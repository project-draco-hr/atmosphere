{
  System.err.println("\n\nTEST broadcastWebSocketTest\n\n");
  final AsyncHttpClient client=getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build());
  final String sessionid1=getSessionID(client,GET_SESSION_URL);
  final String username="test_" + System.currentTimeMillis();
  WebSocketWrapper webSocketWrapper1=loginWS("clientWebSocket1",client,WS_GET_SESSION_URL + "websocket/" + sessionid1,username,true);
  final AsyncHttpClient client2=getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build());
  final String sessionid2=getSessionID(client,GET_SESSION_URL);
  final String username2="test2_" + System.currentTimeMillis();
  WebSocketWrapper webSocketWrapper2=loginWS("clientWebSocket2",client2,WS_GET_SESSION_URL + "websocket/" + sessionid2,username2,true);
  final CountDownLatch lWebSocket2=new CountDownLatch(1);
  webSocketWrapper1.setListener(new WebSocketResponseListener(webSocketWrapper1){
    @Override public void onClose(){
      System.err.println("onClose called");
    }
    @Override public void notify(    String message){
      log.info("clientWebSocket1 message received = " + message);
      Assert.assertNotNull(message);
      List<SocketIOPacketImpl> messages=null;
      try {
        messages=SocketIOPacketImpl.parse(message);
      }
 catch (      SocketIOException e1) {
        e1.printStackTrace();
      }
      if (messages == null || messages.isEmpty()) {
        return;
      }
      for (      SocketIOPacketImpl msg : messages) {
        String data=msg.toString();
switch (msg.getFrameType()) {
case CONNECT:
          Assert.assertEquals(message,"1::");
        break;
default :
    }
  }
}
}
);
webSocketWrapper2.setListener(new WebSocketResponseListener(webSocketWrapper2){
@Override public void onClose(){
  System.err.println("onClose called");
}
@Override public void notify(String message){
  log.info("clientWebSocket2 message received = " + message);
  Assert.assertNotNull(message);
  List<SocketIOPacketImpl> messages=null;
  try {
    messages=SocketIOPacketImpl.parse(message);
  }
 catch (  SocketIOException e1) {
    e1.printStackTrace();
  }
  if (messages == null || messages.isEmpty()) {
    return;
  }
  for (  SocketIOPacketImpl msg : messages) {
    String data=msg.toString();
switch (msg.getFrameType()) {
case EVENT:
      if (data.contains("5:::{\"name\":\"user message\",\"args\":[\"") && data.contains("message1 from " + username + "\"]}")) {
        lWebSocket2.countDown();
      }
    break;
default :
}
}
}
}
);
sendMessage(webSocketWrapper1.websocket,"5:::{\"name\":\"user message\",\"args\":[\"message1 from " + username + "\"]}");
if (!lWebSocket2.await(30,TimeUnit.SECONDS)) {
throw new RuntimeException("Timeout out WS 2");
}
client.close();
client2.close();
}
