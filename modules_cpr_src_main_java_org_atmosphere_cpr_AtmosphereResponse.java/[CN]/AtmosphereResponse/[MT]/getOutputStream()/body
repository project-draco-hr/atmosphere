{
  if (forceAsyncIOWriter || !delegateToNativeResponse) {
    return new ServletOutputStream(){
      @Override public void write(      int i) throws java.io.IOException {
        if (asyncIOWriter == null)         return;
        writeStatusAndHeaders();
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        try {
          asyncIOWriter.write(AtmosphereResponse.this,new byte[]{(byte)i});
        }
 catch (        IOException e) {
          handleException(e);
          throw e;
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
      @Override public void write(      byte[] bytes) throws java.io.IOException {
        if (asyncIOWriter == null)         return;
        writeStatusAndHeaders();
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        try {
          asyncIOWriter.write(AtmosphereResponse.this,bytes);
        }
 catch (        IOException e) {
          handleException(e);
          throw e;
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
      @Override public void write(      byte[] bytes,      int start,      int offset) throws java.io.IOException {
        if (asyncIOWriter == null)         return;
        writeStatusAndHeaders();
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        try {
          asyncIOWriter.write(AtmosphereResponse.this,bytes,start,offset);
        }
 catch (        IOException e) {
          handleException(e);
          throw e;
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
      @Override public void flush() throws IOException {
        if (asyncIOWriter == null)         return;
        writeStatusAndHeaders();
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        try {
          asyncIOWriter.flush(AtmosphereResponse.this);
        }
 catch (        IOException e) {
          handleException(e);
          throw e;
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
      @Override public void close() throws java.io.IOException {
        if (asyncIOWriter == null)         return;
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        try {
          asyncIOWriter.close(AtmosphereResponse.this);
        }
 catch (        IOException e) {
          handleException(e);
          throw e;
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
    }
;
  }
 else {
    return _r().getOutputStream() != null ? _r().getOutputStream() : new ServletOutputStream(){
      @Override public void write(      int b) throws IOException {
      }
    }
;
  }
}
