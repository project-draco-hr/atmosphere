{
  if (!delegateToNativeResponse || forceAsyncIOWriter) {
    return new ServletOutputStream(){
      @Override public void write(      int i) throws java.io.IOException {
        writeStatusAndHeaders();
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        asyncIOWriter.write(AtmosphereResponse.this,new byte[]{(byte)i});
        forceAsyncIOWriter=b;
      }
      @Override public void write(      byte[] bytes) throws java.io.IOException {
        writeStatusAndHeaders();
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        asyncIOWriter.write(AtmosphereResponse.this,bytes);
        forceAsyncIOWriter=b;
      }
      @Override public void write(      byte[] bytes,      int start,      int offset) throws java.io.IOException {
        writeStatusAndHeaders();
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        asyncIOWriter.write(AtmosphereResponse.this,bytes,start,offset);
        forceAsyncIOWriter=b;
      }
      @Override public void flush() throws IOException {
        writeStatusAndHeaders();
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        asyncIOWriter.flush(AtmosphereResponse.this);
        forceAsyncIOWriter=b;
      }
      @Override public void close() throws java.io.IOException {
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        asyncIOWriter.close(AtmosphereResponse.this);
        forceAsyncIOWriter=b;
      }
    }
;
  }
 else {
    return _r().getOutputStream();
  }
}
