{
  if (config.getServletConfig().getInitParameter(REDIS_AUTH) != null) {
    authToken=config.getServletConfig().getInitParameter(REDIS_AUTH);
  }
  if (config.getServletConfig().getInitParameter(REDIS_SERVER) != null) {
    uri=URI.create(config.getServletConfig().getInitParameter(REDIS_SERVER));
  }
 else   if (uri == null) {
    throw new NullPointerException("uri cannot be null");
  }
  if (config.getServletConfig().getInitParameter(REDIS_SHARED_POOL) != null) {
    sharedPool=Boolean.parseBoolean(config.getServletConfig().getInitParameter(REDIS_SHARED_POOL));
  }
  logger.info("{} shared connection pool {}",getClass().getName(),sharedPool);
  if (sharedPool) {
    if (config.properties().get(REDIS_SHARED_POOL) != null) {
      jedisPool=(JedisPool)config.properties().get(REDIS_SHARED_POOL);
    }
    if (jedisPool == null) {
      GenericObjectPool.Config gConfig=new GenericObjectPool.Config();
      gConfig.testOnBorrow=true;
      gConfig.testWhileIdle=true;
      jedisPool=new JedisPool(gConfig,uri.getHost(),uri.getPort());
      config.properties().put(REDIS_SHARED_POOL,jedisPool);
    }
 else {
      if (jedisPublisher != null) {
        jedisPool.returnResource(jedisPublisher);
      }
      if (jedisSubscriber != null) {
        disconnectSubscriber();
      }
    }
  }
  jedisSubscriber=new Jedis(uri.getHost(),uri.getPort());
  try {
    jedisSubscriber.connect();
    auth(jedisSubscriber);
  }
 catch (  IOException e) {
    logger.error("failed to connect subscriber",e);
    try {
      jedisSubscriber.disconnect();
    }
 catch (    IOException e1) {
      logger.error("failed to disconnect subscriber",e);
    }
  }
  jedisPublisher=sharedPool ? null : new Jedis(uri.getHost(),uri.getPort());
  if (!sharedPool) {
    try {
      jedisPublisher.connect();
      auth(jedisPublisher);
    }
 catch (    IOException e) {
      logger.error("failed to connect publisher",e);
      try {
        jedisPublisher.disconnect();
      }
 catch (      IOException e1) {
        logger.error("failed to disconnect publisher",e);
      }
    }
  }
}
