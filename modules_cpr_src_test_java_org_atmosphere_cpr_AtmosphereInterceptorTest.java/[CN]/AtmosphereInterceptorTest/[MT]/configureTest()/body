{
  final AtomicInteger count=new AtomicInteger();
  framework=new AtmosphereFramework();
  framework.setAsyncSupport(mock(AsyncSupport.class));
  framework.interceptor(new AtmosphereInterceptor(){
    @Override public void configure(    AtmosphereConfig config){
      count.incrementAndGet();
    }
    @Override public Action inspect(    AtmosphereResource r){
      return Action.CREATED;
    }
    @Override public void destroy(){
    }
    @Override public void postInspect(    AtmosphereResource r){
    }
  }
);
  framework.init(new ServletConfig(){
    @Override public String getServletName(){
      return "void";
    }
    @Override public ServletContext getServletContext(){
      return mock(ServletContext.class);
    }
    @Override public String getInitParameter(    String name){
      return null;
    }
    @Override public Enumeration<String> getInitParameterNames(){
      return null;
    }
  }
);
  config=framework.getAtmosphereConfig();
  processor=new AsynchronousProcessor(config){
    @Override public Action service(    AtmosphereRequest req,    AtmosphereResponse res) throws IOException, ServletException {
      return action(req,res);
    }
  }
;
  framework.addAtmosphereHandler("/*",handler);
  assertEquals(Action.CREATED,processor.service(mock(AtmosphereRequest.class),AtmosphereResponse.newInstance()));
  assertEquals(1,count.get());
}
