{
  if (response.getStatus() == 204) {
    response.setStatus(200);
  }
  BroadcasterFactory broadcasterFactory=(BroadcasterFactory)servletReq.getAttribute(ApplicationConfig.BROADCASTER_FACTORY);
  URI location=null;
  if (!sessionSupported && !resumeOnBroadcast && response.getHttpHeaders().getFirst("Location") == null) {
    String uuid=UUID.randomUUID().toString();
    location=uriInfo.getAbsolutePathBuilder().path(uuid).build("");
    resumeCandidates.put(uuid,r);
    servletReq.setAttribute(RESUME_UUID,uuid);
    servletReq.setAttribute(RESUME_CANDIDATES,resumeCandidates);
  }
  if (bc == null && localScope != Suspend.SCOPE.REQUEST) {
    bc=r.getBroadcaster();
  }
  if (sessionSupported && localScope != Suspend.SCOPE.REQUEST && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
    AtmosphereResource<HttpServletRequest,HttpServletResponse> cached=(AtmosphereResource)servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
    bc=cached.getBroadcaster();
    try {
      bc.removeAtmosphereResource(cached);
    }
 catch (    IllegalStateException ex) {
      logger.trace(ex.getMessage(),ex);
    }
  }
  if (response.getEntity() instanceof Broadcastable) {
    Broadcastable b=(Broadcastable)response.getEntity();
    bc=b.getBroadcaster();
    response.setEntity(b.getResponseMessage());
  }
  if ((localScope == Suspend.SCOPE.REQUEST) && bc == null) {
    if (bc == null) {
      try {
        String id=UUID.randomUUID().toString();
        Class<Broadcaster> c=null;
        try {
          c=(Class<Broadcaster>)Class.forName((String)servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
        }
 catch (        Throwable e) {
          throw new IllegalStateException(e.getMessage());
        }
        bc=broadcasterFactory.get(c,id);
        bc.setScope(Broadcaster.SCOPE.REQUEST);
      }
 catch (      Exception ex) {
        logger.error("failed to instantiate broadcaster with factory: " + broadcasterFactory,ex);
      }
    }
 else {
      bc.setScope(Broadcaster.SCOPE.REQUEST);
    }
  }
  configureFilter(bc);
  r.setBroadcaster(bc);
  if (sessionSupported) {
    servletReq.getSession().setAttribute(SUSPENDED_RESOURCE,r);
    servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE,response);
  }
  servletReq.setAttribute(SUSPENDED_RESOURCE,r);
  servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE,response);
  logger.debug("Linked HttpServletRequest {} with ContainerResponse {}",servletReq,response);
  if (resumeOnBroadcast) {
    servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST,new Boolean(true));
  }
  try {
    MediaType contentType=response.getMediaType();
    if (contentType == null && response.getEntity() != null) {
      LinkedList<MediaType> l=new LinkedList<MediaType>();
      l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
      contentType=response.getMessageBodyWorkers().getMessageBodyWriterMediaType(response.getEntity().getClass(),response.getEntityType(),response.getAnnotations(),l);
      if (contentType == null || contentType.isWildcardType() || contentType.isWildcardSubtype())       contentType=MediaType.APPLICATION_OCTET_STREAM_TYPE;
    }
    Object entity=response.getEntity();
    Response.ResponseBuilder b=Response.ok();
    b=configureHeaders(b);
    if (entity != null) {
      b=b.header("Content-Type",contentType != null ? contentType.toString() : "text/html; charset=ISO-8859-1");
      servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE,contentType.toString());
    }
    boolean eclipse362468=false;
    String serverInfo=r.getAtmosphereConfig().getServletContext().getServerInfo();
    if (serverInfo.indexOf("jetty") != -1) {
      String[] jettyVersion=serverInfo.substring(6).split("\\.");
      eclipse362468=((Integer.valueOf(jettyVersion[0]) == 8 && Integer.valueOf(jettyVersion[1]) == 0 && Integer.valueOf(jettyVersion[2]) > 1)) || ((Integer.valueOf(jettyVersion[0]) == 7 && Integer.valueOf(jettyVersion[1]) == 5 && Integer.valueOf(jettyVersion[2]) == 4));
      if (comments && eclipse362468) {
        logger.debug("Padding response is disabled to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468");
      }
    }
    if (!eclipse362468 && comments && !resumeOnBroadcast) {
      String padding=(String)servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
      String paddingData=AtmosphereResourceImpl.createStreamingPadding(padding);
      if (location != null) {
        b=b.header(HttpHeaders.LOCATION,location);
        location=null;
      }
      response.setResponse(b.entity(paddingData).build());
      response.write();
    }
    if (entity != null && !entity.toString().isEmpty()) {
      if (location != null) {
        b=b.header(HttpHeaders.LOCATION,location);
      }
      response.setResponse(b.entity(entity).build());
      response.write();
    }
    response.setEntity(null);
    r.suspend(timeout,false);
  }
 catch (  IOException ex) {
    throw new WebApplicationException(ex);
  }
}
