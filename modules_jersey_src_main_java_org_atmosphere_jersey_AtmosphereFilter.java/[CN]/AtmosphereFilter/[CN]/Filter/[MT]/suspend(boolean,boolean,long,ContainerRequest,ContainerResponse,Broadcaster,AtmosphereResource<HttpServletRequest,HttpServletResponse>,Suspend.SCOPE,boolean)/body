{
  if (response.getStatus() == 204) {
    response.setStatus(200);
  }
  BroadcasterFactory broadcasterFactory=(BroadcasterFactory)servletReq.getAttribute(ApplicationConfig.BROADCASTER_FACTORY);
  boolean sessionSupported=(Boolean)servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
  URI location=null;
  if (useResumeAnnotation && !sessionSupported && !resumeOnBroadcast&& response.getHttpHeaders().getFirst("Location") == null) {
    String uuid=UUID.randomUUID().toString();
    location=uriInfo.getAbsolutePathBuilder().path(uuid).build("");
    resumeCandidates.put(uuid,r);
    servletReq.setAttribute(RESUME_UUID,uuid);
    servletReq.setAttribute(RESUME_CANDIDATES,resumeCandidates);
  }
  if (bc == null && localScope != Suspend.SCOPE.REQUEST) {
    bc=r.getBroadcaster();
  }
  if (sessionSupported && localScope != Suspend.SCOPE.REQUEST && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
    AtmosphereResource<HttpServletRequest,HttpServletResponse> cached=(AtmosphereResource)servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
    bc=cached.getBroadcaster();
    try {
      bc.removeAtmosphereResource(cached);
    }
 catch (    IllegalStateException ex) {
      logger.trace(ex.getMessage(),ex);
    }
  }
  if (response.getEntity() instanceof Broadcastable) {
    Broadcastable b=(Broadcastable)response.getEntity();
    bc=b.getBroadcaster();
    response.setEntity(b.getResponseMessage());
  }
  if ((localScope == Suspend.SCOPE.REQUEST) && bc == null) {
    if (bc == null) {
      try {
        String id=servletReq.getHeader(X_ATMOSPHERE_TRACKING_ID);
        if (id == null) {
          id=UUID.randomUUID().toString();
        }
        bc=broadcasterFactory.get(id);
        bc.setScope(Broadcaster.SCOPE.REQUEST);
      }
 catch (      Exception ex) {
        logger.error("failed to instantiate broadcaster with factory: " + broadcasterFactory,ex);
      }
    }
 else {
      bc.setScope(Broadcaster.SCOPE.REQUEST);
    }
  }
  r.setBroadcaster(bc);
  if (resumeOnBroadcast) {
    servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST,new Boolean(true));
  }
  executeSuspend(r,timeout,comments,resumeOnBroadcast,location,request,response,flushEntity);
}
