{
  if (response.getMappedThrowable() != null) {
    return response;
  }
  AtmosphereResource<HttpServletRequest,HttpServletResponse> r=(AtmosphereResource<HttpServletRequest,HttpServletResponse>)servletReq.getAttribute(AtmosphereServlet.ATMOSPHERE_RESOURCE);
  boolean sessionSupported=(Boolean)servletReq.getAttribute(AtmosphereServlet.SUPPORT_SESSION);
switch (action) {
case SUSPEND_RESPONSE:
    SuspendResponse<?> s=SuspendResponse.class.cast(JResponseAsResponse.class.cast(response.getResponse()).getJResponse());
  suspend(sessionSupported,s.resumeOnBroadcast(),s.outputComments(),translateTimeUnit(s.period().value(),s.period().timeUnit()),request,response,r);
for (AtmosphereResourceEventListener el : s.listeners()) {
  if (r instanceof AtmosphereEventLifecycle) {
    ((AtmosphereEventLifecycle)r).addEventListener(el);
  }
}
break;
case SUSPEND:
case SUSPEND_RESUME:
boolean resumeOnBroadcast=(action == Action.SUSPEND_RESUME);
suspend(sessionSupported,resumeOnBroadcast,outputComments,suspendTimeout,request,response,r);
for (Class<? extends AtmosphereResourceEventListener> e : listeners) {
try {
AtmosphereResourceEventListener el=e.newInstance();
if (r instanceof AtmosphereEventLifecycle) {
((AtmosphereEventLifecycle)r).addEventListener(el);
}
}
 catch (Throwable t) {
throw new WebApplicationException(new IllegalStateException("Invalid AtmosphereResourceEventListener " + e));
}
}
break;
case RESUME:
if (response.getEntity() != null) {
try {
response.write();
}
 catch (IOException ex) {
throw new WebApplicationException(ex);
}
}
if (r == null && sessionSupported) {
r=(AtmosphereResource)servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
}
 else {
String path=response.getContainerRequest().getPath();
r=resumeCandidates.remove(path.substring(path.lastIndexOf("/") + 1));
}
if (r != null) {
resume(r);
}
 else {
throw new WebApplicationException(new IllegalStateException("Unable to retrieve suspended Response. " + "Either session-support is not enabled in atmosphere.xml or the" + "path used to resume is invalid."));
}
break;
case BROADCAST:
case RESUME_ON_BROADCAST:
AtmosphereResource ar=(AtmosphereResource)servletReq.getAttribute(SUSPENDED_RESOURCE);
if (ar != null) {
r=ar;
}
broadcast(response,r,suspendTimeout);
break;
case SCHEDULE:
case SCHEDULE_RESUME:
Object o=response.getEntity();
Broadcaster b=r.getBroadcaster();
if (response.getEntity() instanceof Broadcastable) {
b=((Broadcastable)response.getEntity()).getBroadcaster();
o=((Broadcastable)response.getEntity()).getMessage();
response.setEntity(((Broadcastable)response.getEntity()).getResponseMessage());
}
if (response.getEntity() != null) {
try {
response.write();
}
 catch (IOException ex) {
throw new WebApplicationException(ex);
}
}
if (action == Action.SCHEDULE_RESUME) {
configureResumeOnBroadcast(b);
}
b.scheduleFixedBroadcast(o,waitFor,suspendTimeout,TimeUnit.SECONDS);
break;
}
return response;
}
