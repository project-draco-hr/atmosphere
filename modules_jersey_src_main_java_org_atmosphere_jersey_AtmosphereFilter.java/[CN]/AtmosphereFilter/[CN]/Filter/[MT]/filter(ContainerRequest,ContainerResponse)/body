{
  if (response.getMappedThrowable() != null) {
    return response;
  }
  if (action == Action.NONE)   return response;
  AtmosphereConfig config=(AtmosphereConfig)servletReq.getAttribute(ATMOSPHERE_CONFIG);
  String p=config.getInitParameter(ApplicationConfig.JERSEY_CONTAINER_RESPONSE_WRITER_CLASS);
  ContainerResponseWriter w=null;
  if (p != null) {
    try {
      w=(ContainerResponseWriter)Thread.currentThread().getContextClassLoader().loadClass(p).newInstance();
      logger.trace("Installing ContainerResponseWriter {}",p);
    }
 catch (    Throwable e) {
      logger.error("Error loading ContainerResponseWriter {}",p,e);
    }
  }
  w=(ContainerResponseWriter)servletReq.getAttribute(FrameworkConfig.JERSEY_CONTAINER_RESPONSE_WRITER_INSTANCE);
  if (w != null) {
    response.setContainerResponseWriter(w);
  }
  AtmosphereResource r=(AtmosphereResource)servletReq.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
  if (Boolean.parseBoolean(config.getInitParameter(ApplicationConfig.SUPPORT_LOCATION_HEADER))) {
    useResumeAnnotation=true;
  }
  if (response.getStatus() == 204) {
    response.setStatus(200);
  }
switch (action) {
case ASYNCHRONOUS:
    String transport=getHeaderOrQueryValue(X_ATMOSPHERE_TRANSPORT);
  String broadcasterName=getHeaderOrQueryValue(topic);
if (transport == null || broadcasterName == null) {
  StringBuffer s=new StringBuffer();
  Enumeration<String> e=servletReq.getHeaderNames();
  String t;
  while (e.hasMoreElements()) {
    t=e.nextElement();
    s.append(t).append("=").append(servletReq.getHeader(t)).append("\n");
  }
  logger.error("\nQueryString:\n{}\n\nHeaders:\n{}",servletReq.getQueryString(),s.toString());
  throw new WebApplicationException(new IllegalStateException("Must specify transport using header value " + transport + " and uuid "+ broadcasterName));
}
String subProtocol=(String)servletReq.getAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL);
final boolean waitForResource=waitFor == -1 ? true : false;
final Broadcaster bcaster=BroadcasterFactory.getDefault().lookup(broadcasterName,true);
if (!transport.startsWith(POLLING_TRANSPORT) && subProtocol == null) {
boolean outputJunk=transport.equalsIgnoreCase(STREAMING_TRANSPORT);
final boolean resumeOnBroadcast=resumeOnBroadcast(false);
for (Class<? extends AtmosphereResourceEventListener> listener : listeners) {
try {
AtmosphereResourceEventListener el=listener.newInstance();
InjectorProvider.getInjector().inject(el);
if (r instanceof AtmosphereEventLifecycle) {
r.addEventListener(el);
}
}
 catch (Throwable t) {
throw new WebApplicationException(new IllegalStateException("Invalid AtmosphereResourceEventListener " + listener));
}
}
final Object entity=response.getEntity();
r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
@Override public void onSuspend(AtmosphereResourceEvent event){
try {
if (entity != null) {
  if (waitForResource) {
    bcaster.awaitAndBroadcast(entity,30,TimeUnit.SECONDS);
  }
 else {
    bcaster.broadcast(entity);
  }
}
}
  finally {
event.getResource().removeEventListener(this);
}
}
}
);
if (resumeOnBroadcast) {
servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST,new Boolean(true));
}
r.setBroadcaster(bcaster);
executeSuspend(r,timeout,outputJunk,resumeOnBroadcast,null,request,response,writeEntity);
}
 else {
Object entity=response.getEntity();
if (waitForResource) {
bcaster.awaitAndBroadcast(entity,30,TimeUnit.SECONDS);
}
 else {
bcaster.broadcast(entity);
}
if (subProtocol == null && writeEntity) {
try {
if (Callable.class.isAssignableFrom(entity.getClass())) {
entity=Callable.class.cast(entity).call();
}
response.setEntity(entity);
response.write();
}
 catch (Throwable t) {
logger.debug("Error running Callable",t);
response.setEntity(null);
}
}
 else {
response.setEntity(null);
}
}
break;
case SUSPEND_RESPONSE:
SuspendResponse<?> s=SuspendResponse.class.cast(JResponseAsResponse.class.cast(response.getResponse()).getJResponse());
boolean outputJunk=outputJunk(s.outputComments());
boolean resumeOnBroadcast=resumeOnBroadcast(s.resumeOnBroadcast());
for (AtmosphereResourceEventListener el : s.listeners()) {
if (r instanceof AtmosphereEventLifecycle) {
r.addEventListener(el);
}
}
Broadcaster bc=s.broadcaster();
if (bc == null && s.scope() != Suspend.SCOPE.REQUEST) {
bc=(Broadcaster)servletReq.getAttribute(INJECTED_BROADCASTER);
}
boolean supportTrackable=config.getInitParameter(ApplicationConfig.SUPPORT_TRACKABLE) != null;
boolean isTracked=response.getEntity() != null ? TrackableResource.class.isAssignableFrom(response.getEntity().getClass()) : supportTrackable;
TrackableResource<? extends Trackable> trackableResource=null;
if (isTracked) {
trackableResource=preTrack(request,response);
}
suspend(resumeOnBroadcast,outputJunk,translateTimeUnit(s.period().value(),s.period().timeUnit()),request,response,bc,r,s.scope(),s.writeEntity());
if (isTracked && trackableResource != null) {
postTrack(trackableResource,r);
}
break;
case SUBSCRIBE_TRACKABLE:
case SUBSCRIBE:
case SUSPEND:
case SUSPEND_TRACKABLE:
case SUSPEND_RESUME:
outputJunk=outputJunk(outputComments);
resumeOnBroadcast=resumeOnBroadcast((action == Action.SUSPEND_RESUME));
for (Class<? extends AtmosphereResourceEventListener> listener : listeners) {
try {
AtmosphereResourceEventListener el=listener.newInstance();
InjectorProvider.getInjector().inject(el);
if (r instanceof AtmosphereEventLifecycle) {
((AtmosphereEventLifecycle)r).addEventListener(el);
}
}
 catch (Throwable t) {
throw new WebApplicationException(new IllegalStateException("Invalid AtmosphereResourceEventListener " + listener,t));
}
}
Broadcaster broadcaster=(Broadcaster)servletReq.getAttribute(INJECTED_BROADCASTER);
if (action == Action.SUBSCRIBE) {
Class<Broadcaster> c=null;
try {
c=(Class<Broadcaster>)Class.forName((String)servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
}
 catch (Throwable e) {
throw new IllegalStateException(e.getMessage());
}
broadcaster=BroadcasterFactory.getDefault().lookup(c,topic,true);
}
supportTrackable=config.getInitParameter(ApplicationConfig.SUPPORT_TRACKABLE) != null;
isTracked=response.getEntity() != null ? TrackableResource.class.isAssignableFrom(response.getEntity().getClass()) : supportTrackable;
if (isTracked) {
trackableResource=preTrack(request,response);
}
 else {
trackableResource=null;
}
suspend(resumeOnBroadcast,outputJunk,timeout,request,response,broadcaster,r,scope,writeEntity);
if (isTracked && trackableResource != null) {
postTrack(trackableResource,r);
}
break;
case RESUME:
if (response.getEntity() != null) {
try {
response.write();
}
 catch (IOException ex) {
throw new WebApplicationException(ex);
}
}
boolean sessionSupported=(Boolean)servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
if (sessionSupported) {
r=(AtmosphereResource)servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
}
 else {
String path=response.getContainerRequest().getPath();
r=resumeCandidates.remove(path.substring(path.lastIndexOf("/") + 1));
}
if (r != null) {
resume(r);
}
 else {
throw new WebApplicationException(new IllegalStateException("Unable to retrieve suspended Response. " + "Either session-support is not enabled in atmosphere.xml or the" + "path used to resume is invalid."));
}
break;
case BROADCAST:
case PUBLISH:
case RESUME_ON_BROADCAST:
AtmosphereResource ar=(AtmosphereResource)servletReq.getAttribute(SUSPENDED_RESOURCE);
if (ar != null) {
r=ar;
}
if (action == Action.PUBLISH) {
Class<Broadcaster> c=null;
try {
c=(Class<Broadcaster>)Class.forName((String)servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
}
 catch (Throwable e) {
throw new IllegalStateException(e.getMessage());
}
r.setBroadcaster(BroadcasterFactory.getDefault().lookup(c,topic,true));
}
broadcast(response,r,timeout);
if (!writeEntity) {
response.setEntity(null);
}
break;
case SCHEDULE:
case SCHEDULE_RESUME:
Object o=response.getEntity();
Broadcaster b=r.getBroadcaster();
if (response.getEntity() instanceof Broadcastable) {
b=((Broadcastable)response.getEntity()).getBroadcaster();
o=((Broadcastable)response.getEntity()).getMessage();
response.setEntity(((Broadcastable)response.getEntity()).getResponseMessage());
}
if (response.getEntity() != null) {
try {
response.write();
}
 catch (IOException ex) {
throw new WebApplicationException(ex);
}
}
if (action == Action.SCHEDULE_RESUME) {
configureResumeOnBroadcast(b);
}
b.scheduleFixedBroadcast(o,waitFor,timeout,TimeUnit.SECONDS);
break;
}
return response;
}
