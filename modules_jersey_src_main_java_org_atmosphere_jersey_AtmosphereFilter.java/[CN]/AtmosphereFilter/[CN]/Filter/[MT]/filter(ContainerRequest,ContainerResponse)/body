{
  if (response.getMappedThrowable() != null) {
    return response;
  }
  AtmosphereResource<HttpServletRequest,HttpServletResponse> r=(AtmosphereResource<HttpServletRequest,HttpServletResponse>)servletReq.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
  boolean sessionSupported=(Boolean)servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
switch (action) {
case SUSPEND_RESPONSE:
    SuspendResponse<?> s=SuspendResponse.class.cast(JResponseAsResponse.class.cast(response.getResponse()).getJResponse());
  boolean outputJunk=outputJunk(request,s.outputComments());
boolean resumeOnBroadcast=resumeOnBroadcast(request,s.resumeOnBroadcast());
for (AtmosphereResourceEventListener el : s.listeners()) {
if (r instanceof AtmosphereEventLifecycle) {
  ((AtmosphereEventLifecycle)r).addEventListener(el);
}
}
Broadcaster bc=s.broadcaster();
if (bc == null) {
bc=(Broadcaster)servletReq.getAttribute(INJECTED_BROADCASTER);
}
suspend(sessionSupported,resumeOnBroadcast,outputJunk,translateTimeUnit(s.period().value(),s.period().timeUnit()),request,response,bc,r);
break;
case SUBSCRIBE_TRACKABLE:
case SUBSCRIBE:
case SUSPEND:
case SUSPEND_TRACKABLE:
case SUSPEND_RESUME:
outputJunk=outputJunk(request,outputComments);
resumeOnBroadcast=resumeOnBroadcast(request,(action == Action.SUSPEND_RESUME));
for (Class<? extends AtmosphereResourceEventListener> listener : listeners) {
try {
AtmosphereResourceEventListener el=listener.newInstance();
InjectorProvider.getInjector().inject(el);
if (r instanceof AtmosphereEventLifecycle) {
((AtmosphereEventLifecycle)r).addEventListener(el);
}
}
 catch (Throwable t) {
throw new WebApplicationException(new IllegalStateException("Invalid AtmosphereResourceEventListener " + listener,t));
}
}
Broadcaster broadcaster=(Broadcaster)servletReq.getAttribute(INJECTED_BROADCASTER);
if (action == Action.SUBSCRIBE) {
Class<Broadcaster> c=null;
try {
c=(Class<Broadcaster>)Class.forName((String)servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
}
 catch (Throwable e) {
throw new IllegalStateException(e.getMessage());
}
broadcaster=BroadcasterFactory.getDefault().lookup(c,topic,true);
}
boolean isTracked=response.getEntity() != null ? TrackableResource.class.isAssignableFrom(response.getEntity().getClass()) : false;
TrackableResource<? extends Trackable> trackableResource=null;
if (isTracked) {
trackableResource=TrackableResource.class.cast(response.getEntity());
response.setEntity(trackableResource.entity());
String trackableUUID=request.getHeaderValue(TrackableResource.TRACKING_HEADER);
if (trackableUUID == null && trackableResource.trackingID() != null) {
trackableUUID=trackableResource.trackingID();
}
 else if (trackableUUID == null) {
trackableUUID=UUID.randomUUID().toString();
}
trackableResource.setTrackingID(trackableUUID);
TrackableSession.getDefault().track(trackableResource);
response.getHttpHeaders().putSingle(TrackableResource.TRACKING_HEADER,trackableResource.trackingID());
servletReq.setAttribute(TrackableResource.TRACKING_HEADER,trackableResource.trackingID());
}
suspend(sessionSupported,resumeOnBroadcast,outputJunk,timeout,request,response,broadcaster,r);
if (isTracked && trackableResource != null) {
boolean isAresource=AtmosphereResource.class.isAssignableFrom(trackableResource.type()) ? true : false;
trackableResource.setResource(isAresource ? r : r.getBroadcaster());
}
break;
case RESUME:
if (response.getEntity() != null) {
try {
response.write();
}
 catch (IOException ex) {
throw new WebApplicationException(ex);
}
}
if (sessionSupported) {
r=(AtmosphereResource)servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
}
 else {
String path=response.getContainerRequest().getPath();
r=resumeCandidates.remove(path.substring(path.lastIndexOf("/") + 1));
}
if (r != null) {
resume(r);
}
 else {
throw new WebApplicationException(new IllegalStateException("Unable to retrieve suspended Response. " + "Either session-support is not enabled in atmosphere.xml or the" + "path used to resume is invalid."));
}
break;
case BROADCAST:
case PUBLISH:
case RESUME_ON_BROADCAST:
AtmosphereResource ar=(AtmosphereResource)servletReq.getAttribute(SUSPENDED_RESOURCE);
if (ar != null) {
r=ar;
}
if (action == Action.PUBLISH) {
Class<Broadcaster> c=null;
try {
c=(Class<Broadcaster>)Class.forName((String)servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
}
 catch (Throwable e) {
throw new IllegalStateException(e.getMessage());
}
r.setBroadcaster(BroadcasterFactory.getDefault().lookup(c,topic,true));
}
broadcast(response,r,timeout);
break;
case SCHEDULE:
case SCHEDULE_RESUME:
Object o=response.getEntity();
Broadcaster b=r.getBroadcaster();
if (response.getEntity() instanceof Broadcastable) {
b=((Broadcastable)response.getEntity()).getBroadcaster();
o=((Broadcastable)response.getEntity()).getMessage();
response.setEntity(((Broadcastable)response.getEntity()).getResponseMessage());
}
if (response.getEntity() != null) {
try {
response.write();
}
 catch (IOException ex) {
throw new WebApplicationException(ex);
}
}
if (action == Action.SCHEDULE_RESUME) {
configureResumeOnBroadcast(b);
}
b.scheduleFixedBroadcast(o,waitFor,timeout,TimeUnit.SECONDS);
break;
}
return response;
}
