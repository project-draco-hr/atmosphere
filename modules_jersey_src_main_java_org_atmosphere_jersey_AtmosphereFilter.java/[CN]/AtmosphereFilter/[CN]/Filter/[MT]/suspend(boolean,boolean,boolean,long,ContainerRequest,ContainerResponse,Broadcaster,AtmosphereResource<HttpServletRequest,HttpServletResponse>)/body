{
  if (response.getStatus() == 204) {
    response.setStatus(200);
  }
  BroadcasterFactory bf=(BroadcasterFactory)servletReq.getAttribute(AtmosphereServlet.BROADCASTER_FACTORY);
  if (!sessionSupported && !resumeOnBroadcast && response.getHttpHeaders().getFirst("Location") == null) {
    String uuid=UUID.randomUUID().toString();
    response.getHttpHeaders().putSingle(HttpHeaders.LOCATION,uriInfo.getAbsolutePathBuilder().path(uuid).build(""));
    resumeCandidates.put(uuid,r);
    servletReq.setAttribute(RESUME_UUID,uuid);
    servletReq.setAttribute(RESUME_CANDIDATES,resumeCandidates);
  }
  if (bc == null) {
    bc=r.getBroadcaster();
  }
  if (sessionSupported && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
    AtmosphereResource<HttpServletRequest,HttpServletResponse> cached=(AtmosphereResource)servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
    bc=cached.getBroadcaster();
    bc.removeAtmosphereResource(cached);
  }
  if (response.getEntity() instanceof Broadcastable) {
    Broadcastable b=(Broadcastable)response.getEntity();
    bc=b.getBroadcaster();
    response.setEntity(b.getResponseMessage());
    if ((scope == Suspend.SCOPE.REQUEST) && (bc.getScope() != Broadcaster.SCOPE.REQUEST)) {
      bc.setScope(Broadcaster.SCOPE.REQUEST);
    }
  }
 else   if ((scope == Suspend.SCOPE.REQUEST) && (bc.getScope() != Broadcaster.SCOPE.REQUEST)) {
    try {
      String id=bc.getID();
      bc.setID(bc.getClass().getSimpleName() + "-" + UUID.randomUUID());
      bc=bf.get();
      bc.setScope(Broadcaster.SCOPE.REQUEST);
      bc.setID(id);
    }
 catch (    InstantiationException ex) {
      logger.log(Level.SEVERE,null,ex);
    }
catch (    IllegalAccessException ex) {
      logger.log(Level.SEVERE,null,ex);
    }
  }
  configureFilter(bc);
  r.setBroadcaster(bc);
  if (sessionSupported) {
    servletReq.getSession().setAttribute(SUSPENDED_RESOURCE,r);
    servletReq.getSession().setAttribute(CONTAINER_RESPONSE,response);
  }
  servletReq.setAttribute(SUSPENDED_RESOURCE,r);
  servletReq.setAttribute(CONTAINER_RESPONSE,response);
  if (resumeOnBroadcast) {
    servletReq.setAttribute(AtmosphereServlet.RESUME_ON_BROADCAST,new Boolean(true));
  }
  try {
    MediaType contentType=response.getMediaType();
    if (contentType == null && response.getEntity() != null) {
      LinkedList<MediaType> l=new LinkedList<MediaType>();
      l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
      contentType=response.getMessageBodyWorkers().getMessageBodyWriterMediaType(response.getEntity().getClass(),response.getEntityType(),response.getAnnotations(),l);
      if (contentType == null || contentType.isWildcardType() || contentType.isWildcardSubtype())       contentType=MediaType.APPLICATION_OCTET_STREAM_TYPE;
    }
    r.getResponse().setContentType(contentType != null ? contentType.toString() : "text/html;charset=ISO-8859-1");
    r.suspend(timeout,comments && !resumeOnBroadcast);
    if (response.getEntity() != null) {
      response.write();
    }
  }
 catch (  IOException ex) {
    throw new WebApplicationException(ex);
  }
}
