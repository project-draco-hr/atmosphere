{
  LinkedList<ResourceFilter> list=new LinkedList<ResourceFilter>();
  Filter f;
  if (logger.isDebugEnabled()) {
    for (    Annotation annotation : am.getAnnotations()) {
      logger.debug("AtmosphereFilter processing annotation: {}",annotation);
    }
  }
  if (am.getMethod() == null) {
    return null;
  }
  if (SuspendResponse.class.isAssignableFrom(am.getMethod().getReturnType())) {
    list.addLast(new Filter(Action.SUSPEND_RESPONSE));
    return list;
  }
  if (am.isAnnotationPresent(Broadcast.class)) {
    int delay=am.getAnnotation(Broadcast.class).delay();
    Class[] broadcastFilter=am.getAnnotation(Broadcast.class).value();
    if (am.getAnnotation(Broadcast.class).resumeOnBroadcast()) {
      f=new Filter(Action.RESUME_ON_BROADCAST,delay,0,Suspend.SCOPE.APPLICATION,true,broadcastFilter,null);
    }
 else {
      f=new Filter(Action.BROADCAST,delay,0,Suspend.SCOPE.APPLICATION,true,broadcastFilter,null);
    }
    list.addLast(f);
    if (am.isAnnotationPresent(Cluster.class)) {
      broadcastFilter=am.getAnnotation(Cluster.class).value();
      for (      Class<ClusterBroadcastFilter> c : broadcastFilter) {
        try {
          ClusterBroadcastFilter cbf=c.newInstance();
          InjectorProvider.getInjector().inject(cbf);
          cbf.setUri(am.getAnnotation(Cluster.class).name());
          f.addCluster(cbf);
        }
 catch (        Throwable t) {
          logger.warn("Invalid ClusterBroadcastFilter",t);
        }
      }
    }
  }
  if (am.isAnnotationPresent(Asynchronous.class)) {
    int suspendTimeout=am.getAnnotation(Asynchronous.class).period();
    Class[] broadcastFilter=am.getAnnotation(Asynchronous.class).broadcastFilter();
    boolean wait=am.getAnnotation(Asynchronous.class).waitForResource();
    f=new Filter(Action.ASYNCHRONOUS,suspendTimeout,wait ? -1 : 0,null,false,broadcastFilter,am.getAnnotation(Asynchronous.class).header());
    f.setListeners(am.getAnnotation(Asynchronous.class).eventListeners());
    list.addFirst(f);
  }
  if (am.isAnnotationPresent(Suspend.class)) {
    long suspendTimeout=am.getAnnotation(Suspend.class).period();
    TimeUnit tu=am.getAnnotation(Suspend.class).timeUnit();
    suspendTimeout=translateTimeUnit(suspendTimeout,tu);
    Suspend.SCOPE scope=am.getAnnotation(Suspend.class).scope();
    boolean outputComments=am.getAnnotation(Suspend.class).outputComments();
    boolean trackable=false;
    if (TrackableResource.class.isAssignableFrom(am.getMethod().getReturnType())) {
      trackable=true;
    }
    if (am.getAnnotation(Suspend.class).resumeOnBroadcast()) {
      f=new Filter(trackable ? Action.SUSPEND_TRACKABLE : Action.SUSPEND_RESUME,suspendTimeout,0,scope,outputComments);
    }
 else {
      f=new Filter(trackable ? Action.SUSPEND_TRACKABLE : Action.SUSPEND,suspendTimeout,0,scope,outputComments);
    }
    f.setListeners(am.getAnnotation(Suspend.class).listeners());
    list.addFirst(f);
  }
  if (am.isAnnotationPresent(Subscribe.class)) {
    boolean trackable=false;
    if (TrackableResource.class.isAssignableFrom(am.getMethod().getReturnType())) {
      trackable=true;
    }
    f=new Filter(trackable ? Action.SUBSCRIBE_TRACKABLE : Action.SUBSCRIBE,30000,-1,Suspend.SCOPE.APPLICATION,false,null,am.getAnnotation(Subscribe.class).value());
    f.setListeners(am.getAnnotation(Subscribe.class).listeners());
    list.addFirst(f);
  }
  if (am.isAnnotationPresent(Publish.class)) {
    f=new Filter(Action.PUBLISH,-1,-1,Suspend.SCOPE.APPLICATION,false,null,am.getAnnotation(Publish.class).value());
    list.addFirst(f);
  }
  if (am.isAnnotationPresent(Resume.class)) {
    int suspendTimeout=am.getAnnotation(Resume.class).value();
    list.addFirst(new Filter(Action.RESUME,suspendTimeout));
  }
  if (am.isAnnotationPresent(Schedule.class)) {
    int period=am.getAnnotation(Schedule.class).period();
    int waitFor=am.getAnnotation(Schedule.class).waitFor();
    if (am.getAnnotation(Schedule.class).resumeOnBroadcast()) {
      list.addFirst(new Filter(Action.SCHEDULE_RESUME,period,waitFor));
    }
 else {
      list.addFirst(new Filter(Action.SCHEDULE,period,waitFor));
    }
  }
  return list.size() > 0 ? list : null;
}
