{
  logger.info("{}: running test: onDisconnectTest",getClass().getSimpleName());
  final AtomicBoolean onDisconnect=new AtomicBoolean();
  final AtomicBoolean onClose=new AtomicBoolean();
  final CountDownLatch eventReceived=new CountDownLatch(2);
  final CountDownLatch latch=new CountDownLatch(1);
  atmoServlet.framework().addAtmosphereHandler(ROOT,new AbstractHttpAtmosphereHandler(){
    boolean isSuspended=false;
    public void onRequest(    AtmosphereResource r) throws IOException {
      r.addEventListener(new WebSocketEventListenerAdapter(){
        @Override public void onDisconnect(        WebSocketEvent event){
          onDisconnect.set(true);
          eventReceived.countDown();
        }
        @Override public void onClose(        WebSocketEvent event){
          onClose.set(true);
          eventReceived.countDown();
        }
      }
);
      if (!isSuspended) {
        r.suspend();
        isSuspended=true;
      }
 else {
        String message=r.getRequest().getReader().readLine();
        r.getBroadcaster().broadcast(message);
      }
    }
    public void onStateChange(    AtmosphereResourceEvent event) throws IOException {
      if (event.isSuspended()) {
        event.write(event.getMessage().toString().getBytes());
      }
    }
  }
,BroadcasterFactory.getDefault().get(DefaultBroadcaster.class,"suspend"));
  AsyncHttpClient c=new AsyncHttpClient();
  try {
    final AtomicReference<String> response=new AtomicReference<String>(null);
    WebSocket w=c.prepareGet(urlTarget).execute(new WebSocketUpgradeHandler.Builder().build()).get();
    w.addWebSocketListener(new WebSocketTextListener(){
      @Override public void onMessage(      String message){
        response.set(message);
        latch.countDown();
      }
      @Override public void onFragment(      String fragment,      boolean last){
        fail();
      }
      @Override public void onOpen(      WebSocket websocket){
      }
      @Override public void onClose(      WebSocket websocket){
        latch.countDown();
      }
      @Override public void onError(      Throwable t){
        t.printStackTrace();
        fail(t.getMessage());
      }
    }
).sendTextMessage("echo");
    try {
      latch.await(20,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      fail(e.getMessage());
    }
    c.close();
    eventReceived.await(10,TimeUnit.SECONDS);
    assertNotNull(response.get());
    assertEquals(response.get(),"echo");
    assertTrue(onClose.get());
    assertTrue(onDisconnect.get());
  }
 catch (  Exception e) {
    logger.error("test failed",e);
    fail(e.getMessage());
  }
}
