{
  System.err.println("\n\nTEST broadcastXHRPollingTest\n\n");
  final AsyncHttpClient client=getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build());
  final String sessionid1=getSessionID(client,GET_SESSION_URL);
  final String username="test_" + System.currentTimeMillis();
  login("clientXHRPolling1",client,GET_SESSION_URL + "xhr-polling/" + sessionid1,username,true);
  final AsyncHttpClient client2=getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build());
  final String sessionid2=getSessionID(client,GET_SESSION_URL);
  final String username2="test_" + System.currentTimeMillis();
  login("clientXHRPolling2",client2,GET_SESSION_URL + "xhr-polling/" + sessionid2,username2,true);
  suspend("clientXHRPolling1",client,GET_SESSION_URL + "xhr-polling/" + sessionid1,new ResponseListener(){
    @Override public void notify(    String message){
      log.info("clientXHRPolling1 message received = " + message);
      Assert.assertNotNull(message);
      List<SocketIOPacketImpl> messages=null;
      try {
        messages=SocketIOPacketImpl.parse(message);
      }
 catch (      SocketIOException e1) {
        e1.printStackTrace();
      }
      if (messages == null || messages.isEmpty()) {
        return;
      }
      for (      SocketIOPacketImpl msg : messages) {
        String data=msg.toString();
switch (msg.getFrameType()) {
case EVENT:
          break;
default :
        try {
          newSuspendConnection("clientXHRPolling1",client,GET_SESSION_URL + "xhr-polling/" + sessionid1,this);
        }
 catch (        Throwable e) {
          e.printStackTrace();
        }
    }
  }
}
}
);
final CountDownLatch latchGet=new CountDownLatch(1);
suspend("clientXHRPolling2",client2,GET_SESSION_URL + "xhr-polling/" + sessionid2,new ResponseListener(){
@Override public void notify(String message){
  log.info("broadcastXHRPollingTest clientXHRPolling2 message received = " + message);
  Assert.assertNotNull(message);
  List<SocketIOPacketImpl> messages=null;
  try {
    messages=SocketIOPacketImpl.parse(message);
  }
 catch (  SocketIOException e1) {
    e1.printStackTrace();
  }
  if (messages == null || messages.isEmpty()) {
    return;
  }
  for (  SocketIOPacketImpl msg : messages) {
    String data=msg.toString();
switch (msg.getFrameType()) {
case EVENT:
      if (data.contains("5:::{\"name\":\"user message\",\"args\":[\"") && data.contains("message1 from " + username + "\"]}")) {
        latchGet.countDown();
      }
    break;
default :
}
}
if (latchGet.getCount() > 0) {
try {
  newSuspendConnection("clientXHRPolling2",client2,GET_SESSION_URL + "xhr-polling/" + sessionid2,this);
}
 catch (Throwable e) {
  e.printStackTrace();
}
}
}
}
);
sendMessage("clientXHRPolling1",client,GET_SESSION_URL + "xhr-polling/" + sessionid1,"5:::{\"name\":\"user message\",\"args\":[\"message1 from " + username + "\"]}",new ResponseListener(){
@Override public void notify(String message){
log.info("broadcastXHRPollingTest clientXHRPolling1 message received = " + message);
Assert.assertNotNull(message);
Assert.assertEquals(message,SocketIOPacketImpl.POST_RESPONSE);
}
}
);
if (!latchGet.await(45,TimeUnit.SECONDS)) {
throw new RuntimeException("Timeout out broadcastXHRPollingTest");
}
client.close();
client2.close();
}
