{
  this.framework=framework;
  this.webSocketProcessor=webSocketProcessor;
  if (framework.isUseNativeImplementation()) {
    throw new IllegalStateException("You cannot use WebSocket native implementation with JSR356. Please set " + ApplicationConfig.PROPERTY_NATIVE_COMETSUPPORT + " to false");
  }
  String s=framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.WEBSOCKET_IDLETIME);
  if (s != null) {
    webSocketWriteTimeout=Integer.valueOf(s);
  }
 else {
    webSocketWriteTimeout=-1;
  }
  s=framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.WEBSOCKET_MAXBINARYSIZE);
  if (s != null) {
    maxBinaryBufferSize=Integer.valueOf(s);
  }
 else {
    maxBinaryBufferSize=-1;
  }
  s=framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.WEBSOCKET_MAXTEXTSIZE);
  if (s != null) {
    maxTextBufferSize=Integer.valueOf(s);
  }
 else {
    maxTextBufferSize=-1;
  }
  try {
    Map<String,? extends ServletRegistration> m=framework.getServletContext().getServletRegistrations();
    for (    Map.Entry<String,? extends ServletRegistration> e : m.entrySet()) {
      if (AtmosphereServlet.class.isAssignableFrom(loadClass(e.getValue().getClassName()))) {
        servletContext="/" + e.getValue().getMappings().iterator().next().replace("/","").replace("*","");
      }
    }
  }
 catch (  Exception ex) {
    logger.trace("",ex);
  }
}
