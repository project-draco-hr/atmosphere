{
  if (!webSocketProcessor.handshake(request)) {
    try {
      session.close(new CloseReason(CloseReason.CloseCodes.CANNOT_ACCEPT,"Handshake not accepted."));
    }
 catch (    IOException e) {
      logger.trace("",e);
    }
    return;
  }
  if (maxBinaryBufferSize != -1)   session.setMaxBinaryMessageBufferSize(maxBinaryBufferSize);
  if (webSocketWriteTimeout != -1)   session.setMaxIdleTimeout(webSocketWriteTimeout);
  if (maxTextBufferSize != -1)   session.setMaxTextMessageBufferSize(maxTextBufferSize);
  webSocket=new JSR356WebSocket(session,framework.getAtmosphereConfig());
  Map<String,String> headers=new HashMap<String,String>();
  for (  Map.Entry<String,List<String>> e : handshakeRequest.getHeaders().entrySet()) {
    headers.put(e.getKey(),e.getValue().size() > 0 ? e.getValue().get(0) : "");
  }
  String servletPath="";
  URI uri=session.getRequestURI();
  String[] paths=uri.getPath() != null ? uri.getPath().split("/") : new String[]{};
  StringBuffer b=new StringBuffer("/");
  for (int i=0; i < paths.length; i++) {
    if (i == 2)     servletPath+="/" + paths[i];
    if (i >= 3) {
      b.append(paths[i]).append("/");
    }
  }
  if (b.length() > 1) {
    b.deleteCharAt(b.length() - 1);
  }
  String pathInfo=b.toString();
  if (pathInfo.equals("/")) {
    pathInfo=null;
  }
  try {
    String requestUri=session.getRequestURI().toASCIIString();
    if (requestUri.contains("?")) {
      requestUri=requestUri.substring(0,requestUri.indexOf("?"));
    }
    request=new AtmosphereRequest.Builder().requestURI(requestUri).requestURL(requestUri).headers(headers).session((HttpSession)handshakeRequest.getHttpSession()).servletPath(servletPath).contextPath(framework.getServletContext().getContextPath()).pathInfo(pathInfo).userPrincipal(session.getUserPrincipal()).build().queryString(session.getQueryString());
    framework.addInitParameter(ALLOW_QUERYSTRING_AS_REQUEST,"false");
    webSocketProcessor.open(webSocket,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,webSocket));
    framework.addInitParameter(ALLOW_QUERYSTRING_AS_REQUEST,"true");
  }
 catch (  Throwable e) {
    try {
      session.close(new CloseReason(CloseReason.CloseCodes.UNEXPECTED_CONDITION,e.getMessage()));
    }
 catch (    IOException e1) {
      logger.trace("",e);
    }
    logger.error("",e);
    return;
  }
  session.addMessageHandler(new MessageHandler.Whole<String>(){
    @Override public void onMessage(    String s){
      webSocketProcessor.invokeWebSocketProtocol(webSocket,s);
    }
  }
);
  session.addMessageHandler(new MessageHandler.Whole<ByteBuffer>(){
    @Override public void onMessage(    ByteBuffer bb){
      byte[] b=new byte[bb.limit()];
      bb.get(b);
      webSocketProcessor.invokeWebSocketProtocol(webSocket,b,0,b.length);
    }
  }
);
}
