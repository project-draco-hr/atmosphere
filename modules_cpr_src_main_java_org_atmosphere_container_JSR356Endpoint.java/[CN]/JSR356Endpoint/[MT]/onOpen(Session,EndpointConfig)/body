{
  if (framework.isDestroyed())   return;
  if (!session.isOpen()) {
    logger.trace("Session Closed {}",session);
    return;
  }
  if (maxBinaryBufferSize != -1)   session.setMaxBinaryMessageBufferSize(maxBinaryBufferSize);
  if (webSocketWriteTimeout != -1)   session.setMaxIdleTimeout(webSocketWriteTimeout);
  if (maxTextBufferSize != -1)   session.setMaxTextMessageBufferSize(maxTextBufferSize);
  webSocket=new JSR356WebSocket(session,framework.getAtmosphereConfig());
  Map<String,String> headers=new HashMap<String,String>();
  for (  Map.Entry<String,List<String>> e : handshakeRequest.getHeaders().entrySet()) {
    headers.put(e.getKey(),!e.getValue().isEmpty() ? e.getValue().get(0) : "");
  }
  headers.put("Connection","Upgrade");
  String servletPath=framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.JSR356_MAPPING_PATH);
  if (servletPath == null) {
    servletPath=IOUtils.guestServletPath(framework.getAtmosphereConfig());
  }
  boolean recomputeForBackwardCompat=false;
  URI uri=session.getRequestURI();
  String rawPath=uri.getPath();
  String contextPath=framework.getAtmosphereConfig().getServletContext().getContextPath();
  int pathInfoStartAt=rawPath.indexOf(servletPath) + servletPath.length();
  String pathInfo=null;
  if (rawPath.length() >= pathInfoStartAt) {
    pathInfo=rawPath.substring(pathInfoStartAt);
  }
 else {
    recomputeForBackwardCompat=true;
  }
  if (recomputeForBackwardCompat) {
    String[] paths=uri.getPath() != null ? uri.getPath().split("/") : new String[]{};
    int pathInfoStartIndex=3;
    if ("".equals(contextPath) || "".equals(servletPath)) {
      pathInfoStartIndex=2;
    }
    StringBuffer b=new StringBuffer("/");
    for (int i=0; i < paths.length; i++) {
      if (i >= pathInfoStartIndex) {
        b.append(paths[i]).append("/");
      }
    }
    if (b.length() > 1) {
      b.deleteCharAt(b.length() - 1);
    }
    pathInfo=b.toString();
  }
  if (pathInfo.equals("/")) {
    pathInfo=null;
  }
  try {
    String requestURL=uri.toASCIIString();
    if (requestURL.contains("?")) {
      requestURL=requestURL.substring(0,requestURL.indexOf("?"));
    }
    if ((!requestURL.startsWith("http://")) || (!requestURL.startsWith("https://"))) {
      if (requestURL.startsWith("/")) {
        List<String> l=handshakeRequest.getHeaders().get("origin");
        if (l == null) {
          l=handshakeRequest.getHeaders().get("Origin");
        }
        String origin;
        if (l != null && !l.isEmpty()) {
          origin=l.get(0);
        }
 else {
          logger.trace("Unable to retrieve the `origin` header for websocket {}",session);
          origin=new StringBuilder("http").append(session.isSecure() ? "s" : "").append("://0.0.0.0:80").toString();
        }
        requestURL=new StringBuilder(origin).append(requestURL).toString();
      }
 else       if (requestURL.startsWith("ws://")) {
        requestURL=requestURL.replace("ws://","http://");
      }
 else       if (requestURL.startsWith("wss://")) {
        requestURL=requestURL.replace("wss://","https://");
      }
    }
    request=new AtmosphereRequestImpl.Builder().requestURI(uri.getPath()).requestURL(requestURL).headers(headers).session((HttpSession)handshakeRequest.getHttpSession()).servletPath(servletPath).contextPath(framework.getServletContext().getContextPath()).pathInfo(pathInfo).destroyable(false).userPrincipal(session.getUserPrincipal()).remoteInetSocketAddress(new Callable<InetSocketAddress>(){
      @Override public InetSocketAddress call() throws Exception {
        return (InetSocketAddress)endpointConfig.getUserProperties().get(JAVAX_WEBSOCKET_ENDPOINT_REMOTE_ADDRESS);
      }
    }
).localInetSocketAddress(new Callable<InetSocketAddress>(){
      @Override public InetSocketAddress call() throws Exception {
        return (InetSocketAddress)endpointConfig.getUserProperties().get(JAVAX_WEBSOCKET_ENDPOINT_LOCAL_ADDRESS);
      }
    }
).build().queryString(session.getQueryString());
    if (!webSocketProcessor.handshake(request)) {
      try {
        session.close(new CloseReason(CloseReason.CloseCodes.CANNOT_ACCEPT,"Handshake not accepted."));
      }
 catch (      IOException e) {
        logger.trace("",e);
      }
      return;
    }
    framework.addInitParameter(ALLOW_QUERYSTRING_AS_REQUEST,"false");
    webSocketProcessor.open(webSocket,request,AtmosphereResponseImpl.newInstance(framework.getAtmosphereConfig(),request,webSocket));
    framework.addInitParameter(ALLOW_QUERYSTRING_AS_REQUEST,"true");
    if (session.isOpen()) {
      session.addMessageHandler(new MessageHandler.Whole<String>(){
        @Override public void onMessage(        String s){
          webSocketProcessor.invokeWebSocketProtocol(webSocket,s);
        }
      }
);
      session.addMessageHandler(new MessageHandler.Whole<ByteBuffer>(){
        @Override public void onMessage(        ByteBuffer bb){
          byte[] b=bb.hasArray() ? bb.array() : new byte[bb.limit()];
          bb.get(b);
          webSocketProcessor.invokeWebSocketProtocol(webSocket,b,0,b.length);
        }
      }
);
    }
 else {
      logger.trace("Session closed during onOpen {}",session);
      onClose(session,new CloseReason(CloseReason.CloseCodes.GOING_AWAY,"Session closed already"));
    }
  }
 catch (  Throwable e) {
    if (session.isOpen()) {
      logger.error("",e);
    }
 else {
      logger.trace("Session closed during onOpen",e);
    }
    try {
      session.close(new CloseReason(CloseReason.CloseCodes.UNEXPECTED_CONDITION,e.getMessage()));
    }
 catch (    IOException e1) {
      logger.trace("",e);
    }
    return;
  }
}
