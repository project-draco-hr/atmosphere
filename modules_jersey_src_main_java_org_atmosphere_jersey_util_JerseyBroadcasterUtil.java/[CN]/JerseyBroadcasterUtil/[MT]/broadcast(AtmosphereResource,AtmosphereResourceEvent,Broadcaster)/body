{
  AtmosphereRequest request=r.getRequest();
  ContainerResponse cr=null;
  cr=(ContainerResponse)request.getAttribute(FrameworkConfig.CONTAINER_RESPONSE);
  boolean isCancelled=r.getAtmosphereResourceEvent().isCancelled();
  if (cr == null || isCancelled) {
    logger.debug("Retrieving HttpServletRequest {} with ContainerResponse {}",request,cr);
    if (!isCancelled) {
      logger.debug("Unexpected state. ContainerResponse cannot be null or already committed. The connection hasn't been suspended yet");
    }
 else {
      logger.debug("ContainerResponse already resumed or cancelled. Ignoring");
    }
    if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
      DefaultBroadcaster.class.cast(broadcaster).cacheLostMessage(r);
    }
    AsynchronousProcessor.destroyResource(r);
    return;
  }
synchronized (cr) {
    try {
      String m=null;
      if (request.getAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE) != null) {
        m=(String)request.getAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE);
      }
      if (m == null || m.equalsIgnoreCase("text/event-stream")) {
        if (cr.getHttpHeaders().getFirst(HttpHeaders.CONTENT_TYPE) != null) {
          m=cr.getHttpHeaders().getFirst(HttpHeaders.CONTENT_TYPE).toString();
        }
        if (m == null || m.equalsIgnoreCase("application/octet-stream")) {
          m=r.getAtmosphereConfig().getInitParameter(ApplicationConfig.SSE_CONTENT_TYPE);
          if (m == null) {
            m="text/plain";
          }
        }
      }
      if (e.getMessage() instanceof Response) {
        cr.setResponse((Response)e.getMessage());
        cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE,m);
        cr.write();
        try {
          cr.getOutputStream().flush();
        }
 catch (        IOException ex) {
          logger.trace("",ex);
        }
      }
 else       if (e.getMessage() instanceof List) {
        for (        Object msg : (List<Object>)e.getMessage()) {
          cr.setResponse(Response.ok(msg).build());
          cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE,m);
          cr.write();
          try {
            cr.getOutputStream().flush();
          }
 catch (          IOException ex) {
            logger.trace("",ex);
          }
        }
      }
 else {
        if (e.getMessage() == null) {
          logger.warn("Broadcasted message is null");
          return;
        }
        cr.setResponse(Response.ok(e.getMessage()).build());
        cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE,m);
        cr.write();
        try {
          cr.getOutputStream().flush();
        }
 catch (        IOException ex) {
          logger.trace("",ex);
        }
      }
    }
 catch (    Throwable t) {
      boolean notifyAndCache=true;
      for (      StackTraceElement element : t.getStackTrace()) {
        if (element.getClassName().equals("java.io.BufferedWriter") && element.getMethodName().equals("flush")) {
          logger.trace("Workaround issue https://github.com/Atmosphere/atmosphere/issues/710");
          notifyAndCache=false;
        }
      }
      if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
        DefaultBroadcaster.class.cast(broadcaster).onException(t,r,notifyAndCache);
      }
 else {
        onException(t,r);
      }
    }
 finally {
      if (cr != null) {
        cr.setEntity(null);
      }
      Boolean resumeOnBroadcast=(Boolean)request.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
      if (resumeOnBroadcast != null && resumeOnBroadcast) {
        String uuid=(String)request.getAttribute(AtmosphereFilter.RESUME_UUID);
        if (uuid != null) {
          if (request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES) != null) {
            ((ConcurrentHashMap<String,AtmosphereResource>)request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES)).remove(uuid);
          }
        }
        r.resume();
      }
    }
  }
}
