{
  super(config);
  String bs=config.getInitParameter(ApplicationConfig.WEBSOCKET_BUFFER_SIZE);
  WebSocketPolicy policy=new WebSocketPolicy(WebSocketBehavior.SERVER);
  if (bs != null) {
    policy.setInputBufferSize(Integer.parseInt(bs));
  }
  String max=config.getInitParameter(ApplicationConfig.WEBSOCKET_IDLETIME);
  if (max != null) {
    policy.setIdleTimeout(Integer.parseInt(max));
  }
  max=config.getInitParameter(ApplicationConfig.WEBSOCKET_MAXTEXTSIZE);
  if (max != null) {
    policy.setMaxMessageSize(Integer.parseInt(max));
  }
  max=config.getInitParameter(ApplicationConfig.WEBSOCKET_MAXBINARYSIZE);
  if (max != null) {
    policy.setMaxMessageSize(Integer.parseInt(max));
  }
  final WebSocketProcessor webSocketProcessor=WebSocketProcessorFactory.getDefault().getWebSocketProcessor(config.framework());
  webSocketFactory=new WebSocketServerFactory(policy){
    @Override public boolean acceptWebSocket(    final HttpServletRequest request,    HttpServletResponse response) throws IOException {
      setCreator(new WebSocketCreator(){
        @Override public Object createWebSocket(        UpgradeRequest upgradeRequest,        UpgradeResponse upgradeResponse){
          ServletWebSocketRequest r=ServletWebSocketRequest.class.cast(upgradeRequest);
          r.getExtensions().clear();
          return new Jetty9WebSocketHandler(request,config.framework(),webSocketProcessor);
        }
      }
);
      return super.acceptWebSocket(request,response);
    }
  }
;
  try {
    webSocketFactory.start();
  }
 catch (  Exception e) {
    logger.error("",e);
  }
}
