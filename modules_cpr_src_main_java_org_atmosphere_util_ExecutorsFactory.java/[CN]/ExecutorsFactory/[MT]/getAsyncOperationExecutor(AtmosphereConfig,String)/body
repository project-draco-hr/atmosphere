{
  final boolean shared=config.framework().isShareExecutorServices();
  if (!shared || config.properties().get(ASYNC_WRITE_THREAD_POOL) == null) {
    int numberOfAsyncThread=DEFAULT_ASYNC_THREAD;
    String s=config.getInitParameter(ApplicationConfig.BROADCASTER_ASYNC_WRITE_THREADPOOL_MAXSIZE);
    if (s != null) {
      numberOfAsyncThread=Integer.parseInt(s);
    }
    if (shared && numberOfAsyncThread == 1) {
      logger.warn("Not enough numberOfAsyncThread for a shareable thread pool {}, " + "Setting it to a newCachedThreadPool",numberOfAsyncThread);
      numberOfAsyncThread=-1;
    }
    AbstractExecutorService asyncWriteService;
    logger.trace("Max number of AsyncOp {}",numberOfAsyncThread == -1 ? "Unlimited" : numberOfAsyncThread);
    if (numberOfAsyncThread == -1) {
      asyncWriteService=!useForkJoinPool ? (ThreadPoolExecutor)Executors.newCachedThreadPool(new AtmosphereThreadFactory(shared,name + "-AsyncOp-")) : new org.atmosphere.util.ForkJoinPool();
    }
 else {
      asyncWriteService=(ThreadPoolExecutor)Executors.newFixedThreadPool(numberOfAsyncThread,new AtmosphereThreadFactory(shared,name + "-AsyncOp-"));
      if (useForkJoinPool) {
        logger.info("ForkJoinPool is available. Set the {} to -1 to fully use its power.",ApplicationConfig.BROADCASTER_ASYNC_WRITE_THREADPOOL_MAXSIZE);
      }
    }
    keepAliveThreads(asyncWriteService,config);
    if (shared) {
      config.properties().put(ASYNC_WRITE_THREAD_POOL,asyncWriteService);
    }
    return asyncWriteService;
  }
 else {
    return (ExecutorService)config.properties().get(ASYNC_WRITE_THREAD_POOL);
  }
}
