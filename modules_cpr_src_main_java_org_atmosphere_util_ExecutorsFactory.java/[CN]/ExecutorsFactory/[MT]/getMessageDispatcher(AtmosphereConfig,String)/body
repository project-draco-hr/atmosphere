{
  final boolean shared=config.framework().isShareExecutorServices();
  boolean isExecutorShared=shared ? true : false;
  if (!shared || config.properties().get("executorService") == null) {
    int numberOfMessageProcessingThread=DEFAULT_MESSAGE_THREAD;
    String s=config.getInitParameter(ApplicationConfig.BROADCASTER_MESSAGE_PROCESSING_THREADPOOL_MAXSIZE);
    if (s != null) {
      numberOfMessageProcessingThread=Integer.parseInt(s);
    }
    if (isExecutorShared && numberOfMessageProcessingThread == 1) {
      logger.warn("Not enough numberOfMessageProcessingThread for a shareable thread pool {}, " + "Setting it to a newCachedThreadPool",numberOfMessageProcessingThread);
      numberOfMessageProcessingThread=-1;
    }
    ThreadPoolExecutor messageService;
    logger.trace("Max number of DispatchOp {}",numberOfMessageProcessingThread == -1 ? "Unlimited" : numberOfMessageProcessingThread);
    if (numberOfMessageProcessingThread == -1) {
      messageService=(ThreadPoolExecutor)Executors.newCachedThreadPool(new ThreadFactory(){
        private final AtomicInteger count=new AtomicInteger();
        @Override public Thread newThread(        final Runnable runnable){
          Thread t=new Thread(runnable,(shared ? "Atmosphere-Shared" : name) + "-DispatchOp-" + count.getAndIncrement());
          t.setDaemon(true);
          return t;
        }
      }
);
    }
 else {
      messageService=(ThreadPoolExecutor)Executors.newFixedThreadPool(numberOfMessageProcessingThread,new ThreadFactory(){
        private final AtomicInteger count=new AtomicInteger();
        @Override public Thread newThread(        final Runnable runnable){
          Thread t=new Thread(runnable,(shared ? "Atmosphere-Shared" : name) + "-DispatchOp-" + count.getAndIncrement());
          t.setDaemon(true);
          return t;
        }
      }
);
    }
    keepAliveThreads(messageService,config);
    if (shared) {
      config.properties().put("executorService",messageService);
    }
    return messageService;
  }
 else {
    return (ExecutorService)config.properties().get("executorService");
  }
}
