{
  final boolean shared=config.framework().isShareExecutorServices();
  useForkJoinPool=config.getInitParameter(ApplicationConfig.USE_FORJOINPOOL,true);
  if (!shared || config.properties().get(BROADCASTER_THREAD_POOL) == null) {
    int numberOfMessageProcessingThread=DEFAULT_MESSAGE_THREAD;
    String s=config.getInitParameter(ApplicationConfig.BROADCASTER_MESSAGE_PROCESSING_THREADPOOL_MAXSIZE);
    if (s != null) {
      numberOfMessageProcessingThread=Integer.parseInt(s);
    }
    if (shared && numberOfMessageProcessingThread == 1) {
      logger.warn("Not enough numberOfMessageProcessingThread for a shareable thread pool {}, " + "Setting it to a newCachedThreadPool",numberOfMessageProcessingThread);
      numberOfMessageProcessingThread=-1;
    }
    AbstractExecutorService messageService;
    logger.trace("Max number of DispatchOp {}",numberOfMessageProcessingThread == -1 ? "Unlimited" : numberOfMessageProcessingThread);
    if (numberOfMessageProcessingThread == -1) {
      messageService=!useForkJoinPool ? (ThreadPoolExecutor)Executors.newCachedThreadPool(new AtmosphereThreadFactory(shared,name + "-DispatchOp-")) : new org.atmosphere.util.ForkJoinPool();
    }
 else {
      messageService=(ThreadPoolExecutor)Executors.newFixedThreadPool(numberOfMessageProcessingThread,new AtmosphereThreadFactory(shared,name + "-DispatchOp-"));
    }
    keepAliveThreads(messageService,config);
    if (shared) {
      config.properties().put(BROADCASTER_THREAD_POOL,messageService);
    }
    return messageService;
  }
 else {
    return (ExecutorService)config.properties().get(BROADCASTER_THREAD_POOL);
  }
}
