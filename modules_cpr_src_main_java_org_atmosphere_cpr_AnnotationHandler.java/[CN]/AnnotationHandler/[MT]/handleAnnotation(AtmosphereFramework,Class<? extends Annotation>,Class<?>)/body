{
  logger.info("Found Annotation in {} being scanned: {}",discoveredClass,annotation);
  if (AtmosphereHandlerService.class.equals(annotation)) {
    try {
      AtmosphereHandlerService a=discoveredClass.getAnnotation(AtmosphereHandlerService.class);
      atmosphereConfig(a.atmosphereConfig(),framework);
      framework.setDefaultBroadcasterClassName(a.broadcaster().getName());
      filters(a.broadcastFilters(),framework);
      Class<?>[] interceptors=a.interceptors();
      List<AtmosphereInterceptor> l=new ArrayList<AtmosphereInterceptor>();
      for (      Class i : interceptors) {
        try {
          AtmosphereInterceptor ai=(AtmosphereInterceptor)i.newInstance();
          l.add(ai);
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
      if (a.path().contains("{")) {
        l.add(new AtmosphereHandlerServiceInterceptor());
      }
      framework.sessionSupport(a.supportSession());
      AtmosphereHandler handler=(AtmosphereHandler)discoveredClass.newInstance();
      for (      String s : a.properties()) {
        String[] nv=s.split("=");
        IntrospectionUtils.setProperty(handler,nv[0],nv[1]);
        IntrospectionUtils.addProperty(handler,nv[0],nv[1]);
      }
      framework.addAtmosphereHandler(a.path(),handler,l);
      framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (BroadcasterCacheService.class.equals(annotation)) {
    framework.setBroadcasterCacheClassName(discoveredClass.getName());
  }
 else   if (BroadcasterCacheInspectorService.class.equals(annotation)) {
    try {
      framework.addBroadcasterCacheInjector((BroadcasterCacheInspector)discoveredClass.newInstance());
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (MeteorService.class.equals(annotation)) {
    try {
      ReflectorServletProcessor r=new ReflectorServletProcessor();
      r.setServletClassName(discoveredClass.getName());
      Class<Servlet> s=(Class<Servlet>)discoveredClass;
      MeteorService m=s.getAnnotation(MeteorService.class);
      String mapping=m.path();
      atmosphereConfig(m.atmosphereConfig(),framework);
      framework.setDefaultBroadcasterClassName(m.broadcaster().getName());
      filters(m.broadcastFilters(),framework);
      Class<?>[] interceptors=m.interceptors();
      List<AtmosphereInterceptor> l=new ArrayList<AtmosphereInterceptor>();
      for (      Class i : interceptors) {
        try {
          AtmosphereInterceptor ai=(AtmosphereInterceptor)i.newInstance();
          l.add(ai);
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
      if (m.path().contains("{")) {
        l.add(new MeteorServiceInterceptor());
      }
      framework.addAtmosphereHandler(mapping,r,l);
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (BroadcasterFilterService.class.equals(annotation)) {
    try {
      framework.broadcasterFilters((BroadcastFilter)discoveredClass.newInstance());
    }
 catch (    Exception e) {
      logger.warn("",e);
    }
  }
 else   if (BroadcasterService.class.equals(annotation)) {
    framework.setDefaultBroadcasterClassName(discoveredClass.getName());
  }
 else   if (WebSocketHandlerService.class.equals(annotation)) {
    try {
      Class<WebSocketHandler> s=(Class<WebSocketHandler>)discoveredClass;
      WebSocketHandlerService m=s.getAnnotation(WebSocketHandlerService.class);
      framework.addAtmosphereHandler(m.path(),new AbstractReflectorAtmosphereHandler(){
        @Override public void onRequest(        AtmosphereResource resource) throws IOException {
        }
        @Override public void destroy(){
        }
      }
).initWebSocket();
      atmosphereConfig(m.atmosphereConfig(),framework);
      framework.setDefaultBroadcasterClassName(m.broadcaster().getName());
      filters(m.broadcastFilters(),framework);
      interceptors(m.interceptors(),framework);
      WebSocketProcessor p=WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework);
      p.registerWebSocketHandler(m.path(),s.newInstance());
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (WebSocketProtocolService.class.equals(annotation)) {
    framework.setWebSocketProtocolClassName(discoveredClass.getName());
  }
 else   if (AtmosphereInterceptorService.class.equals(annotation)) {
    try {
      AtmosphereInterceptor a=(AtmosphereInterceptor)discoveredClass.newInstance();
      framework.interceptor(a);
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (AsyncSupportService.class.equals(annotation)) {
    try {
      framework.setAsyncSupport(new DefaultAsyncSupportResolver(framework.config).newCometSupport(discoveredClass.getName()));
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (AsyncSupportListenerService.class.equals(annotation)) {
    try {
      framework.asyncSupportListener((AsyncSupportListener)discoveredClass.newInstance());
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (BroadcasterFactoryService.class.equals(annotation)) {
    try {
      Class<BroadcasterFactory> bf=(Class<BroadcasterFactory>)discoveredClass;
      framework.setBroadcasterFactory(bf.newInstance());
      framework.configureBroadcasterFactory();
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (BroadcasterListenerService.class.equals(annotation)) {
    try {
      framework.addBroadcasterListener((BroadcasterListener)discoveredClass.newInstance());
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (WebSocketProcessorService.class.equals(annotation)) {
    try {
      framework.setWebsocketProcessorClassName(discoveredClass.getName());
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (ManagedService.class.equals(annotation)) {
    try {
      Class<?> aClass=discoveredClass;
      ManagedService a=aClass.getAnnotation(ManagedService.class);
      List<AtmosphereInterceptor> l=new ArrayList<AtmosphereInterceptor>();
      atmosphereConfig(a.atmosphereConfig(),framework);
      framework.setDefaultBroadcasterClassName(a.broadcaster().getName());
      filters(a.broadcastFilters(),framework);
      final Class<? extends AtmosphereResourceEventListener>[] listeners=a.listeners();
      if (listeners.length > 0) {
        try {
          AtmosphereInterceptor ai=new AtmosphereInterceptor(){
            @Override public void configure(            AtmosphereConfig config){
            }
            @Override public Action inspect(            AtmosphereResource r){
              for (              Class<? extends AtmosphereResourceEventListener> l : listeners) {
                try {
                  r.addEventListener(l.newInstance());
                }
 catch (                Throwable e) {
                  logger.warn("",e);
                }
              }
              return Action.CONTINUE;
            }
            @Override public void postInspect(            AtmosphereResource r){
            }
            @Override public String toString(){
              return "@ManagedService Event Listeners";
            }
          }
;
          l.add(ai);
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
      Object c=aClass.newInstance();
      AtmosphereHandler handler=new ManagedAtmosphereHandler(c);
      Class<?>[] interceptors=a.interceptors();
      for (      Class i : interceptors) {
        try {
          AtmosphereInterceptor ai;
          if (AnnotationServiceInterceptor.class.isAssignableFrom(i)) {
            ai=new AnnotationServiceInterceptor(ManagedAtmosphereHandler.class.cast(handler));
          }
 else {
            ai=(AtmosphereInterceptor)i.newInstance();
          }
          l.add(ai);
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
      framework.addAtmosphereHandler(a.path(),handler,l);
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (AtmosphereService.class.equals(annotation)) {
    try {
      Class<?> aClass=discoveredClass;
      AtmosphereService a=aClass.getAnnotation(AtmosphereService.class);
      atmosphereConfig(a.atmosphereConfig(),framework);
      framework.setDefaultBroadcasterClassName(a.broadcaster().getName());
      filters(a.broadcastFilters(),framework);
      final Class<? extends AtmosphereResourceEventListener>[] listeners=a.listeners();
      if (listeners.length > 0) {
        try {
          AtmosphereInterceptor ai=new AtmosphereInterceptor(){
            @Override public void configure(            AtmosphereConfig config){
            }
            @Override public Action inspect(            AtmosphereResource r){
              for (              Class<? extends AtmosphereResourceEventListener> l : listeners) {
                try {
                  r.addEventListener(l.newInstance());
                }
 catch (                Throwable e) {
                  logger.warn("",e);
                }
              }
              return Action.CONTINUE;
            }
            @Override public void postInspect(            AtmosphereResource r){
            }
            @Override public String toString(){
              return "@Atmosphere Managed Event Listeners";
            }
          }
;
          framework.interceptor(ai);
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
      if (!a.servlet().isEmpty()) {
        final ReflectorServletProcessor r=new ReflectorServletProcessor();
        r.setServletClassName(a.servlet());
        String mapping=a.path();
        Class<?>[] interceptors=a.interceptors();
        LinkedList<AtmosphereInterceptor> l=new LinkedList<AtmosphereInterceptor>();
        for (        Class i : interceptors) {
          try {
            AtmosphereInterceptor ai=(AtmosphereInterceptor)i.newInstance();
            l.add(ai);
          }
 catch (          Throwable e) {
            logger.warn("",e);
          }
        }
        if (!a.dispatch()) {
          AtmosphereHandler proxy=new AtmosphereServletProcessor(){
            private String method="GET";
            @Override public void onRequest(            AtmosphereResource resource) throws IOException {
              if (!resource.getRequest().getMethod().equalsIgnoreCase(method)) {
                r.onRequest(resource);
              }
            }
            @Override public void onStateChange(            AtmosphereResourceEvent event) throws IOException {
              r.onStateChange(event);
            }
            @Override public void destroy(){
              r.destroy();
            }
            @Override public void init(            ServletConfig sc) throws ServletException {
              String s=sc.getInitParameter(ATMOSPHERERESOURCE_INTERCEPTOR_METHOD);
              if (s != null) {
                method=s;
              }
              r.init(sc);
            }
          }
;
          framework.addAtmosphereHandler(mapping,proxy,l);
        }
 else {
          framework.addAtmosphereHandler(mapping,r,l);
        }
      }
 else {
        interceptors(a.interceptors(),framework);
      }
      framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
 else   if (EndpoinMapperService.class.equals(annotation)) {
    try {
      framework.endPointMapper((EndpointMapper<?>)discoveredClass.newInstance());
    }
 catch (    Throwable e) {
      logger.warn("",e);
    }
  }
}
