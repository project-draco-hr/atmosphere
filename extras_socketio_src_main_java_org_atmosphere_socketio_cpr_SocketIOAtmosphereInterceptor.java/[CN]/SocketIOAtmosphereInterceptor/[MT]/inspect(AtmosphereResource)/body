{
  final AtmosphereRequest request=r.getRequest();
  final AtmosphereResponse response=r.getResponse();
  final AtmosphereHandler atmosphereHandler=(AtmosphereHandler)request.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
  final AtmosphereResourceImpl resource=(AtmosphereResourceImpl)request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
  if (atmosphereHandler instanceof SocketIOAtmosphereHandler) {
    try {
      String path=request.getPathInfo();
      if (path == null || path.length() == 0 || "/".equals(path)) {
        response.sendError(AtmosphereResponse.SC_BAD_REQUEST,"Missing SocketIO transport");
        return null;
      }
      if (path.startsWith("/")) {
        path=path.substring(1);
      }
      String[] parts=path.split("/");
      String protocol=null;
      String version=null;
      if (parts.length == 0) {
        return null;
      }
 else       if (parts.length == 1) {
        if (parts[0].length() == 1) {
          version=parts[0];
          if (!Character.isDigit(version.charAt(0))) {
            version=null;
          }
        }
 else {
          protocol=parts[0];
        }
      }
 else {
        version=parts[0];
        protocol=parts[1];
        if (!Character.isDigit(version.charAt(0))) {
          version=null;
          protocol=null;
        }
      }
      if (protocol == null && version == null) {
        return null;
      }
 else       if (protocol == null && version != null) {
        response.setStatus(200);
        SocketIOSession session=getSessionManager(version).createSession(resource,(SocketIOAtmosphereHandler)atmosphereHandler);
        response.getWriter().print(session.getSessionId() + ":" + heartbeatInterval+ ":"+ timeout+ ":"+ availableTransports);
        return Action.CANCELLED;
      }
 else       if (protocol != null && version == null) {
        version="0";
      }
      Transport transport=transports.get(protocol + "-" + version);
      if (transport != null) {
        return transport.handle(resource,(SocketIOAtmosphereHandler)atmosphereHandler,getSessionManager(version));
      }
 else {
        logger.error("Protocol not supported : " + protocol);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return Action.CANCELLED;
}
