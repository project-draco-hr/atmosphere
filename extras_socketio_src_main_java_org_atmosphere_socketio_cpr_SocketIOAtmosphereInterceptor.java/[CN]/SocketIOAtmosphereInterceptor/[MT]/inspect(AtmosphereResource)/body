{
  final AtmosphereRequest request=r.getRequest();
  final AtmosphereResponse response=r.getResponse();
  final AtmosphereHandler atmosphereHandler=(AtmosphereHandler)request.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
  try {
    String path=request.getPathInfo();
    if (path == null || path.length() == 0 || "/".equals(path)) {
      logger.debug("Not a SocketIO client");
      return Action.CONTINUE;
    }
    if (path.startsWith("/")) {
      path=path.substring(1);
    }
    String[] parts=path.split("/");
    String protocol=null;
    String version=null;
    if (parts.length == 0) {
      logger.debug("Not a SocketIO protocol supported");
      return Action.CONTINUE;
    }
 else     if (parts.length == 1) {
      if (parts[0].length() == 1) {
        version=parts[0];
        if (!Character.isDigit(version.charAt(0))) {
          version=null;
        }
      }
 else {
        protocol=parts[0];
      }
    }
 else {
      version=parts[0];
      protocol=parts[1];
      if (!Character.isDigit(version.charAt(0))) {
        version=null;
        protocol=null;
      }
    }
    if (protocol == null && version == null) {
      logger.debug("Not a SocketIO protocol supported");
      return Action.CONTINUE;
    }
 else     if (protocol == null && version != null) {
      response.setStatus(200);
      SocketIOSession session=getSessionManager(version).createSession((AtmosphereResourceImpl)r,atmosphereHandler);
      response.getWriter().print(session.getSessionId() + ":" + heartbeatInterval+ ":"+ timeout+ ":"+ availableTransports);
      return Action.CANCELLED;
    }
 else     if (protocol != null && version == null) {
      version="0";
    }
    final Transport transport=transports.get(protocol + "-" + version);
    if (transport != null) {
      if (!SocketIOAtmosphereHandler.class.isAssignableFrom(atmosphereHandler.getClass())) {
        response.asyncIOWriter(new AsyncIOWriterAdapter(){
          @Override public AsyncIOWriter write(          AtmosphereResponse r,          String data) throws IOException {
            SocketIOSessionOutbound outbound=(SocketIOSessionOutbound)request.getAttribute(SocketIOAtmosphereHandler.SOCKETIO_SESSION_OUTBOUND);
            SocketIOSessionManagerImpl.SocketIOProtocol p=(SocketIOSessionManagerImpl.SocketIOProtocol)r.request().getAttribute(SocketIOSessionManagerImpl.SocketIOProtocol.class.getName());
            String msg=p == null ? data : mapper.writeValueAsString(p.clearArgs().addArgs(data));
            if (outbound != null) {
              outbound.sendMessage(new SocketIOPacketImpl(SocketIOPacketImpl.PacketType.EVENT,msg));
            }
 else {
              r.getResponse().getOutputStream().write(msg.getBytes(r.getCharacterEncoding()));
            }
            return this;
          }
          @Override public AsyncIOWriter write(          AtmosphereResponse r,          byte[] data) throws IOException {
            SocketIOSessionManagerImpl.SocketIOProtocol p=(SocketIOSessionManagerImpl.SocketIOProtocol)r.request().getAttribute(SocketIOSessionManagerImpl.SocketIOProtocol.class.getName());
            if (p == null) {
              r.getResponse().getOutputStream().write(data);
            }
 else {
              write(new String(data,r.request().getCharacterEncoding()));
            }
            return this;
          }
          @Override public AsyncIOWriter write(          AtmosphereResponse r,          byte[] data,          int offset,          int length) throws IOException {
            SocketIOSessionManagerImpl.SocketIOProtocol p=(SocketIOSessionManagerImpl.SocketIOProtocol)r.request().getAttribute(SocketIOSessionManagerImpl.SocketIOProtocol.class.getName());
            if (p == null) {
              r.getResponse().getOutputStream().write(data,offset,length);
            }
 else {
              write(new String(data,offset,length,r.request().getCharacterEncoding()));
            }
            return this;
          }
          @Override public AsyncIOWriter flush(          AtmosphereResponse r) throws IOException {
            try {
              r.getResponse().getOutputStream().flush();
            }
 catch (            IllegalStateException ex) {
              r.getResponse().getWriter().flush();
            }
            return this;
          }
          @Override public AsyncIOWriter writeError(          AtmosphereResponse r,          int errorCode,          String message) throws IOException {
            ((HttpServletResponse)r.getResponse()).sendError(errorCode,message);
            return this;
          }
          @Override public void close(          AtmosphereResponse r) throws IOException {
            try {
              r.getResponse().getOutputStream().close();
            }
 catch (            IllegalStateException ex) {
              r.getResponse().getWriter().close();
            }
          }
        }
);
      }
      transport.handle((AtmosphereResourceImpl)r,atmosphereHandler,getSessionManager(version));
    }
 else {
      logger.error("Protocol not supported : " + protocol);
    }
  }
 catch (  Exception e) {
    logger.error("",e);
  }
  return Action.CONTINUE;
}
