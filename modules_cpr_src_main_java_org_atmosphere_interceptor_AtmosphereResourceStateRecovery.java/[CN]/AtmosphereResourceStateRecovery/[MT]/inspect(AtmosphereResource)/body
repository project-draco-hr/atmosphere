{
  if (!r.transport().equals(AtmosphereResource.TRANSPORT.POLLING) && !r.transport().equals(AtmosphereResource.TRANSPORT.AJAX)) {
    final BroadcasterTracker tracker=track(r).tick();
    List<Object> cachedMessages=new LinkedList<Object>();
    for (    String broadcasterID : tracker.ids()) {
      Broadcaster b=factory.lookup(broadcasterID,false);
      BroadcasterCache cache;
      if (b != null && !b.getID().equalsIgnoreCase(r.getBroadcaster().getID())) {
        cache=b.getBroadcasterConfig().getBroadcasterCache();
        List<Object> t=cache.retrieveFromCache(b.getID(),r);
        cachedMessages=b.getBroadcasterConfig().applyFilters(r,cachedMessages);
        if (t.size() > 0) {
          logger.trace("Found Cached Messages For AtmosphereResource {} with Broadcaster {}",r.uuid(),broadcasterID);
          cachedMessages.addAll(t);
        }
      }
 else {
        logger.trace("Broadcaster {} is no longer available",broadcasterID);
      }
    }
    if (cachedMessages.size() > 0) {
      try {
        logger.trace("Writing cached messages {} for {}",cachedMessages,r.uuid());
        r.getAtmosphereHandler().onStateChange(new AtmosphereResourceEventImpl(AtmosphereResourceImpl.class.cast(r),false,false,null).setMessage(cachedMessages));
        return Action.CANCELLED;
      }
 catch (      IOException e) {
        logger.warn("Unable to recover from state recovery",e);
      }
    }
 else {
      r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
        public void onSuspend(        AtmosphereResourceEvent event){
          final AtomicBoolean doNotSuspend=new AtomicBoolean(false);
          r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
            @Override public void onBroadcast(            AtmosphereResourceEvent event){
              r.removeEventListener(this);
              doNotSuspend.set(true);
            }
          }
);
          for (          String broadcasterID : tracker.ids()) {
            Broadcaster b=factory.lookup(broadcasterID,false);
            if (b != null && !b.getID().equalsIgnoreCase(r.getBroadcaster().getID())) {
              logger.trace("Associate AtmosphereResource {} with Broadcaster {}",r.uuid(),broadcasterID);
              b.addAtmosphereResource(r);
            }
 else             if (b == null) {
              logger.trace("Broadcaster {} is no longer available",broadcasterID);
            }
          }
          if (doNotSuspend.get()) {
            AtmosphereResourceImpl.class.cast(r).action().type(Action.TYPE.CONTINUE);
          }
        }
      }
);
    }
  }
  return Action.CONTINUE;
}
