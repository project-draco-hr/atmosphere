{
  if (!Utils.pollableTransport(r.transport())) {
    final BroadcasterTracker tracker=track(r).tick();
    List<Object> cachedMessages=retrieveCache(r,tracker,false);
    if (cachedMessages.size() > 0) {
      logger.trace("cached messages");
      writeCache(r,cachedMessages);
      return Action.CANCELLED;
    }
 else {
      r.addEventListener(new OnSuspend(){
        public void onSuspend(        AtmosphereResourceEvent event){
          logger.trace("onSuspend first");
          final AtomicBoolean doNotSuspend=new AtomicBoolean(false);
          r.addEventListener(new OnBroadcast(){
            @Override public void onBroadcast(            AtmosphereResourceEvent event){
              r.removeEventListener(this);
              doNotSuspend.set(true);
              logger.trace("onBroadcast");
            }
          }
);
          for (          String broadcasterID : tracker.ids()) {
            Broadcaster b=factory.lookup(broadcasterID,false);
            logger.trace("About to associate resource {} with Broadcaster {}",r.uuid(),broadcasterID);
            if (b != null && !b.getID().equalsIgnoreCase(r.getBroadcaster().getID())) {
              logger.trace("Associate AtmosphereResource {} with Broadcaster {}",r.uuid(),broadcasterID);
              b.addAtmosphereResource(r);
            }
 else             if (b == null) {
              logger.trace("Broadcaster {} is no longer available for {}",broadcasterID,r);
            }
 else {
              logger.trace("AtmosphereResource {} already associated with {}",r.uuid(),broadcasterID);
            }
          }
          final List<Object> cachedMessages=retrieveCache(r,tracker,true);
          if (logger.isTraceEnabled()) {
            logger.trace("message size {}",cachedMessages.size());
          }
          if (cachedMessages.size() > 0) {
            logger.trace("About to write to the cache {}",r.uuid());
            writeCache(r,cachedMessages);
            doNotSuspend.set(true);
          }
          if (doNotSuspend.get()) {
            AtmosphereResourceImpl.class.cast(r).action().type(Action.TYPE.CONTINUE);
          }
          if (logger.isTraceEnabled()) {
            logger.trace("doNotSuspend {}",doNotSuspend.get());
          }
        }
      }
);
    }
  }
  return Action.CONTINUE;
}
