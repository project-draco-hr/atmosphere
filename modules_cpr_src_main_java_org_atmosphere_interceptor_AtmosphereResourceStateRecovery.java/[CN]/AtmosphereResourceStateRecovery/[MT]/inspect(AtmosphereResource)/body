{
  if (!r.transport().equals(AtmosphereResource.TRANSPORT.POLLING) && !r.transport().equals(AtmosphereResource.TRANSPORT.AJAX)) {
    final BroadcasterTracker tracker=track(r).tick();
    List<Object> cachedMessages=retrieveCache(r,tracker,false);
    if (cachedMessages.size() > 0) {
      writeCache(r,cachedMessages);
      return Action.CANCELLED;
    }
 else {
      r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
        public void onSuspend(        AtmosphereResourceEvent event){
          final AtomicBoolean doNotSuspend=new AtomicBoolean(false);
          r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
            @Override public void onBroadcast(            AtmosphereResourceEvent event){
              r.removeEventListener(this);
              doNotSuspend.set(true);
            }
          }
);
          for (          String broadcasterID : tracker.ids()) {
            Broadcaster b=factory.lookup(broadcasterID,false);
            if (b != null && !b.getID().equalsIgnoreCase(r.getBroadcaster().getID())) {
              logger.trace("Associate AtmosphereResource {} with Broadcaster {}",r.uuid(),broadcasterID);
              b.addAtmosphereResource(r);
            }
 else             if (b == null) {
              logger.trace("Broadcaster {} is no longer available",broadcasterID);
            }
          }
          if (doNotSuspend.get()) {
            AtmosphereResourceImpl.class.cast(r).action().type(Action.TYPE.CONTINUE);
          }
        }
      }
);
    }
    r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
      @Override public void onSuspend(      final AtmosphereResourceEvent event){
        ExecutorsFactory.getScheduler(r.getAtmosphereConfig()).schedule(new Runnable(){
          @Override public void run(){
            try {
              List<Object> cachedMessages=retrieveCache(r,tracker,true);
              if (cachedMessages.size() > 0) {
                logger.trace("About to force writing the cache {}",r.uuid());
                writeCache(r,cachedMessages);
                logger.trace("Forcing close of {}",r.uuid());
                r.close();
              }
            }
 catch (            Throwable t) {
              logger.error("",t);
            }
          }
        }
,2,TimeUnit.SECONDS);
      }
    }
);
  }
  return Action.CONTINUE;
}
