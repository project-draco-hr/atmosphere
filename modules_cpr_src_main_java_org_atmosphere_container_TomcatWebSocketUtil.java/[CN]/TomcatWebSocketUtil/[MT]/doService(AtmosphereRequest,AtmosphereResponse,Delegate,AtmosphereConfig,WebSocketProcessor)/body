{
  if (req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {
    boolean useBuildInSession=config.isSupportSession();
    String s=config.getInitParameter(ApplicationConfig.BUILT_IN_SESSION);
    if (s != null) {
      useBuildInSession=Boolean.valueOf(s);
    }
    String key=null;
    String subProtocol=null;
    boolean allowWebSocketWithoutHeaders=req.getHeader(HeaderConfig.X_ATMO_WEBSOCKET_PROXY) != null ? true : false;
    if (!allowWebSocketWithoutHeaders) {
      if (!headerContainsToken(req,"Upgrade","websocket")) {
        return delegate.doService(req,res);
      }
      if (!headerContainsToken(req,"Connection","upgrade")) {
        return delegate.doService(req,res);
      }
      if (!headerContainsToken(req,"sec-websocket-version","13")) {
        WebSocket.notSupported(req,res);
        return new Action(Action.TYPE.CANCELLED);
      }
    }
    key=req.getHeader("Sec-WebSocket-Key");
    if (key == null) {
      return delegate.doService(req,res);
    }
    String requireSameOrigin=config.getInitParameter(ApplicationConfig.WEBSOCKET_REQUIRE_SAME_ORIGIN);
    if (!webSocketProcessor.handshake(req)) {
      res.sendError(HttpServletResponse.SC_FORBIDDEN,"WebSocket requests rejected.");
      return new Action(Action.TYPE.CANCELLED);
    }
    if (Boolean.valueOf(requireSameOrigin) && !verifyOrigin(req)) {
      res.sendError(HttpServletResponse.SC_FORBIDDEN,"Origin header does not match expected value");
      return new Action(Action.TYPE.CANCELLED);
    }
    res.setHeader("Upgrade","websocket");
    res.setHeader("Connection","upgrade");
    res.setHeader("Sec-WebSocket-Accept",getWebSocketAccept(key));
    if (subProtocol != null) {
      res.setHeader("Sec-WebSocket-Protocol",subProtocol);
    }
    HttpServletRequest hsr=req.wrappedRequest();
    while (hsr instanceof HttpServletRequestWrapper)     hsr=(HttpServletRequest)((HttpServletRequestWrapper)hsr).getRequest();
    RequestFacade facade=(RequestFacade)hsr;
    boolean isDestroyable=false;
    s=config.getInitParameter(ApplicationConfig.RECYCLE_ATMOSPHERE_REQUEST_RESPONSE);
    if (s != null && Boolean.valueOf(s)) {
      isDestroyable=true;
    }
    StreamInbound inbound=new TomcatWebSocketHandler(AtmosphereRequest.cloneRequest(req,true,useBuildInSession,isDestroyable,config.getInitParameter(PROPERTY_SESSION_CREATE,true)),config.framework(),webSocketProcessor);
    facade.doUpgrade(inbound);
    return new Action(Action.TYPE.CREATED);
  }
  try {
    Action action=delegate.suspended(req,res);
    if (action.type() == Action.TYPE.RESUME) {
      req.setAttribute(WebSocket.WEBSOCKET_RESUME,true);
    }
    return action;
  }
 catch (  Exception ex) {
    logger.error("",ex);
  }
  return Action.CANCELLED;
}
