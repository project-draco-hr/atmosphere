{
  broadcaster.removeAtmosphereResource(ar);
  broadcaster.getBroadcasterConfig().setBroadcasterCache(new AbstractBroadcasterCache(){
    @Override public void addToCache(    String broadcasterId,    AtmosphereResource r,    Message e){
      long now=System.nanoTime() * 2;
      put(e,now);
    }
    @Override public List<Object> retrieveFromCache(    String id,    AtmosphereResource r){
      long cacheHeaderTime=Long.valueOf(System.nanoTime());
      return get(cacheHeaderTime);
    }
  }
).addFilter(new TrackMessageSizeFilter(){
    @Override public BroadcastAction filter(    AtmosphereResource r,    Object message,    Object originalMessage){
      String msg=message.toString();
      msg=msg.length() + "|" + msg;
      return new BroadcastAction(BroadcastAction.ACTION.CONTINUE,msg);
    }
  }
);
  broadcaster.broadcast("message-1").get();
  broadcaster.addAtmosphereResource(ar);
  broadcaster.broadcast("message-2").get();
  broadcaster.removeAtmosphereResource(ar);
  broadcaster.addAtmosphereResource(ar);
  assertEquals(atmosphereHandler.value.get().toString(),"9|message-19|message-29|message-1");
}
