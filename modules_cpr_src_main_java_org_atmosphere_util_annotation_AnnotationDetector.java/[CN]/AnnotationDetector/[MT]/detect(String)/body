{
  final String[] pkgNameFilter=new String[packageNames.length];
  for (int i=0; i < pkgNameFilter.length; ++i) {
    pkgNameFilter[i]=packageNames[i].replace('.','/');
    if (!pkgNameFilter[i].endsWith("/")) {
      pkgNameFilter[i]=pkgNameFilter[i].concat("/");
    }
  }
  final Set<File> files=new HashSet<File>();
  final Set<InputStream> streams=new HashSet<InputStream>();
  for (  final String packageName : pkgNameFilter) {
    final ClassLoader loader=Thread.currentThread().getContextClassLoader();
    final Enumeration<URL> resourceEnum=loader.getResources(packageName);
    while (resourceEnum.hasMoreElements()) {
      final URL url=resourceEnum.nextElement();
      final boolean isVfs=url.getProtocol() != null && url.getProtocol().startsWith("vfs");
      if ("file".equals(url.getProtocol()) || isVfs) {
        final File dir=toFile(url);
        if (dir.isDirectory()) {
          files.add(dir);
          if (DEBUG)           print("Add directory: '%s'",dir);
        }
 else         if (isVfs) {
          String jarPath=dir.getPath();
          final int idx=jarPath.indexOf(".jar");
          if (idx > -1) {
            jarPath=jarPath.substring(0,idx + 4);
            final File jarFile=new File(jarPath);
            if (jarFile.isFile() && jarFile.exists()) {
              files.add(jarFile);
              if (DEBUG)               print("Add jar file from VFS: '%s'",jarFile);
            }
 else {
              try {
                List<org.jboss.vfs.VirtualFile> vfs=org.jboss.vfs.VFS.getChild(dir.getPath()).getChildren();
                for (                org.jboss.vfs.VirtualFile f : vfs) {
                  files.add(f.getPhysicalFile());
                }
              }
 catch (              Throwable ex) {
                vfs(url,packageName,streams);
              }
            }
          }
 else {
            vfs(url,packageName,streams);
          }
        }
      }
 else       if (isRunningJavaWebStart()) {
        try {
          loadJarContent((JarURLConnection)url.openConnection(),packageName,streams);
        }
 catch (        ClassCastException cce) {
          throw new AssertionError("Not a File: " + url.toExternalForm());
        }
      }
 else {
        File jarFile;
        try {
          jarFile=toFile(((JarURLConnection)url.openConnection()).getJarFileURL());
        }
 catch (        ClassCastException cce) {
          try {
            String u=url.toExternalForm();
            if (u.startsWith("zip:")) {
              u=u.substring(4);
              if (!u.startsWith("file:")) {
                u="file:" + u;
              }
              u=u.substring(0,u.indexOf("!"));
            }
            jarFile=toFile(new URL(u));
          }
 catch (          Exception ex) {
            throw new AssertionError("Not a File: " + url.toExternalForm());
          }
        }
        try {
          if (jarFile.isFile()) {
            files.add(jarFile);
            if (DEBUG)             print("Add jar file: '%s'",jarFile);
          }
 else {
            final URLConnection urlConnection=url.openConnection();
            if (urlConnection instanceof JarURLConnection) {
              loadJarContent((JarURLConnection)(url.openConnection()),packageName,streams);
            }
 else {
              streams.add(url.openConnection().getInputStream());
            }
          }
        }
 catch (        Exception ex) {
          print("Cannot load from jar file",ex);
        }
      }
    }
  }
  if (!files.isEmpty()) {
    detect(new ClassFileIterator(files.toArray(new File[files.size()]),pkgNameFilter));
  }
 else   if (!streams.isEmpty()) {
    detect(new ClassFileIterator(streams.toArray(new InputStream[streams.size()]),pkgNameFilter));
  }
}
