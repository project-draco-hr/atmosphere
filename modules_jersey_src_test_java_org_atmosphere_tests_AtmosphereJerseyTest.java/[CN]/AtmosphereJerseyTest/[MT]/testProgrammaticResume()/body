{
  System.out.println("Running testProgrammaticResume");
  AsyncHttpClient c=new AsyncHttpClient();
  final AtomicReference<String> location=new AtomicReference<String>();
  final AtomicReference<String> response=new AtomicReference<String>("");
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch locationLatch=new CountDownLatch(1);
  try {
    c.prepareGet(urlTarget + "/suspendAndResume").execute(new AsyncHandler<String>(){
      public void onThrowable(      Throwable throwable){
      }
      public STATE onBodyPartReceived(      HttpResponseBodyPart<String> bp) throws Exception {
        System.out.println("bp: " + new String(bp.getBodyPartBytes()));
        response.set(response.get() + new String(bp.getBodyPartBytes()));
        locationLatch.countDown();
        return STATE.CONTINUE;
      }
      public STATE onStatusReceived(      HttpResponseStatus<String> hs) throws Exception {
        return STATE.CONTINUE;
      }
      public STATE onHeadersReceived(      HttpResponseHeaders<String> rh) throws Exception {
        location.set(rh.getHeaders().getHeaderValue("Location"));
        return STATE.CONTINUE;
      }
      public String onCompleted() throws Exception {
        latch.countDown();
        return "";
      }
    }
);
    locationLatch.await(10,TimeUnit.SECONDS);
    Response r=c.prepareGet(location.get()).execute().get(5,TimeUnit.SECONDS);
    latch.await(20,TimeUnit.SECONDS);
    assertNotNull(r);
    assertEquals(r.getStatusCode(),200);
    assertEquals(response.get(),"suspendresume");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  c.close();
}
