{
  Set<Field> fields=new HashSet<Field>();
  Object instance=null;
  final LinkedHashSet<Object> postponedMethodExecution=new LinkedHashSet<>(pushBackInjection);
  while (!pushBackInjection.isEmpty() & maxTry-- > 0) {
    Iterator<Object> t=new LinkedList(pushBackInjection).iterator();
    pushBackInjection.clear();
    while (t.hasNext()) {
      instance=t.next();
      fields.addAll(getInheritedPrivateFields(instance.getClass()));
      try {
        injectFields(fields,instance,framework,injectables);
      }
 catch (      IllegalAccessException e) {
        logger.warn("",e);
      }
 finally {
        fields.clear();
      }
    }
  }
  if (!pushBackInjection.isEmpty()) {
    injectionFailed();
  }
  for (  Object o : postponedMethodExecution) {
    try {
      applyMethods(o,(Class<Object>)o.getClass());
    }
 catch (    IllegalAccessException e) {
      logger.warn("",e);
    }
  }
}
