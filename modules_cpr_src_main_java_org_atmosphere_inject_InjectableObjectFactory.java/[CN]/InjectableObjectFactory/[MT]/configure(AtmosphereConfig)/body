{
  this.config=config;
  this.maxTry=config.getInitParameter(ApplicationConfig.INJECTION_TRY,5);
  String s=config.getInitParameter(ApplicationConfig.INJECTION_LISTENERS,"");
  if (s != null && !s.isEmpty()) {
    String[] listeners=s.split(",");
    for (    String l : listeners) {
      try {
        listener((InjectionListener)IOUtils.loadClass(getClass(),l).newInstance());
      }
 catch (      Exception ex) {
        logger.warn("",ex);
      }
    }
  }
  for (  Injectable<?> i : injectableServiceLoader) {
    try {
      logger.debug("Adding class {} as injectable",i.getClass());
      if (InjectIntrospector.class.isAssignableFrom(i.getClass())) {
        InjectIntrospector<?> ii=InjectIntrospector.class.cast(i);
        introspectors.addFirst(ii);
        if (i.getClass().isAnnotationPresent(RequestScoped.class)) {
          config.properties().put(FrameworkConfig.NEED_RUNTIME_INJECTION,true);
          requestScopedIntrospectors.addFirst(ii);
        }
      }
      if (i.getClass().isAnnotationPresent(ApplicationScoped.class) || (!i.getClass().isAnnotationPresent(RequestScoped.class) && !i.getClass().isAnnotationPresent(RequestScoped.class))) {
        injectables.addFirst(i);
      }
    }
 catch (    Exception e) {
      logger.error("",e.getCause());
    }
  }
  for (  Injectable<?> i : injectables) {
    try {
      inject(i);
    }
 catch (    Exception e) {
      logger.error("",e.getCause());
    }
  }
  config.startupHook(new AtmosphereConfig.StartupHook(){
    @Override public void started(    AtmosphereFramework framework){
      Set<Field> fields=new HashSet<Field>();
      Object instance=null;
      while (!pushBackInjection.isEmpty() & maxTry-- > 0) {
        Iterator<Object> t=new LinkedList(pushBackInjection).iterator();
        pushBackInjection.clear();
        while (t.hasNext()) {
          instance=t.next();
          fields.addAll(getInheritedPrivateFields(instance.getClass()));
          try {
            injectFields(fields,instance,framework,injectables);
            applyMethods(instance,(Class<Object>)instance.getClass());
          }
 catch (          IllegalAccessException e) {
            logger.warn("",e);
          }
 finally {
            fields.clear();
          }
        }
      }
      if (!pushBackInjection.isEmpty()) {
        injectionFailed();
      }
    }
  }
);
}
