{
  this.config=config;
  for (  Injectable<?> i : injectableServiceLoader) {
    try {
      logger.debug("Adding class {} as injectable",i.getClass());
      if (InjectIntrospector.class.isAssignableFrom(i.getClass())) {
        InjectIntrospector<?> ii=InjectIntrospector.class.cast(i);
        introspectors.addFirst(ii);
        if (i.getClass().isAnnotationPresent(RequestScoped.class)) {
          config.properties().put(FrameworkConfig.NEED_RUNTIME_INJECTION,true);
          requestScopedIntrospectors.addFirst(ii);
        }
      }
      if (i.getClass().isAnnotationPresent(ApplicationScoped.class) || (!i.getClass().isAnnotationPresent(RequestScoped.class) && !i.getClass().isAnnotationPresent(RequestScoped.class))) {
        injectables.addFirst(i);
      }
    }
 catch (    Exception e) {
      logger.error("",e);
    }
  }
  for (  Injectable<?> i : injectables) {
    try {
      injectInjectable(i,i.getClass(),config.framework());
    }
 catch (    IllegalAccessException e) {
      logger.error("",e);
    }
  }
  config.startupHook(new AtmosphereConfig.StartupHook(){
    @Override public void started(    AtmosphereFramework framework){
      Set<Field> fields=new HashSet<Field>();
      try {
        for (        Object instance : pushBackInjection) {
          fields.addAll(getInheritedPrivateFields(instance.getClass()));
          try {
            injectFields(fields,instance,framework,injectables);
          }
 catch (          IllegalAccessException e) {
            logger.warn("",e);
          }
          fields.clear();
        }
      }
  finally {
        pushBackInjection.clear();
        framework.getAtmosphereConfig().properties().remove(INSTANCE_BEING_INJECTED);
      }
    }
  }
);
}
