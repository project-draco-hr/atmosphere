{
  for (  Field field : fields) {
    if (field.isAnnotationPresent(Inject.class)) {
      for (      Injectable c : injectable) {
        if (c.supportedType(field.getType())) {
          if (InjectIntrospector.class.isAssignableFrom(c.getClass())) {
            InjectIntrospector.class.cast(c).introspectField(instance.getClass(),field);
          }
          try {
            field.setAccessible(true);
            preFieldInjection(field,instance,(Class<U>)instance.getClass());
            Object o=c.injectable(framework.getAtmosphereConfig());
            if (o == null) {
              pushBackInjection.add(instance);
              continue;
            }
            postFieldInjection(field,instance,(Class<U>)instance.getClass());
            if (field.getType().equals(Boolean.TYPE)) {
              field.setBoolean(instance,Boolean.class.cast(o).booleanValue());
            }
 else             if (field.getType().equals(Integer.TYPE)) {
              field.setInt(instance,Integer.class.cast(o).intValue());
            }
 else             if (field.getType().equals(Byte.TYPE)) {
              field.setByte(instance,Byte.class.cast(o).byteValue());
            }
 else             if (field.getType().equals(Double.TYPE)) {
              field.setDouble(instance,Double.class.cast(o).doubleValue());
            }
 else             if (field.getType().equals(Long.TYPE)) {
              field.setLong(instance,Long.class.cast(o).longValue());
            }
 else             if (field.getType().equals(Float.TYPE)) {
              field.setFloat(instance,Float.class.cast(o).floatValue());
            }
 else {
              field.set(instance,o);
            }
          }
 catch (          Exception ex) {
            fieldInjectionException(field,instance,(Class<U>)instance.getClass(),ex);
            throw ex;
          }
 finally {
            field.setAccessible(false);
          }
          break;
        }
      }
    }
  }
}
