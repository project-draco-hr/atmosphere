{
  logger.info("{}: running test: testAggregateFilter",getClass().getSimpleName());
  final CountDownLatch latch=new CountDownLatch(2);
  final CountDownLatch suspended=new CountDownLatch(1);
  atmoServlet.framework().addAtmosphereHandler(ROOT,new AbstractHttpAtmosphereHandler(){
    AtomicBoolean b=new AtomicBoolean(false);
    public void onRequest(    AtmosphereResource event) throws IOException {
      if (!b.getAndSet(true)) {
        StringFilterAggregator a=new StringFilterAggregator(25);
        event.getBroadcaster().getBroadcasterConfig().addFilter(a);
        try {
          event.suspend();
        }
  finally {
          suspended.countDown();
        }
      }
 else {
        event.getBroadcaster().broadcast("12345678910");
      }
    }
    public void onStateChange(    AtmosphereResourceEvent event) throws IOException {
      if (event.isResuming()) {
        return;
      }
      assertFalse(event.isCancelled());
      assertNotNull(event.getMessage());
      assertEquals(event.getMessage(),"123456789101234567891012345678910");
      event.getResource().getResponse().flushBuffer();
      event.getResource().resume();
      latch.countDown();
    }
  }
,BroadcasterFactory.getDefault().get(DefaultBroadcaster.class,"suspend"));
  AsyncHttpClient c=new AsyncHttpClient();
  try {
    c.prepareGet(urlTarget).execute(new AsyncCompletionHandler<String>(){
      @Override public String onCompleted(      Response response) throws Exception {
        latch.countDown();
        return null;
      }
    }
);
    suspended.await(20,TimeUnit.SECONDS);
    c.prepareGet(urlTarget).execute().get();
    c.prepareGet(urlTarget).execute().get();
    Response r=c.prepareGet(urlTarget).execute().get();
    try {
      latch.await(20,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      fail(e.getMessage());
    }
    assertNotNull(r);
    assertEquals(r.getStatusCode(),200);
  }
 catch (  Exception e) {
    logger.error("test failed",e);
    fail(e.getMessage());
  }
  c.close();
}
