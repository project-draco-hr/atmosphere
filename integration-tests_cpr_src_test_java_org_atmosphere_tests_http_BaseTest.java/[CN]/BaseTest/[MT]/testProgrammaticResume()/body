{
  logger.info("{}: running test: testProgrammaticResume",getClass().getSimpleName());
  final CountDownLatch latch=new CountDownLatch(2);
  final CountDownLatch suspended=new CountDownLatch(1);
  atmoServlet.framework().addAtmosphereHandler(ROOT,new AbstractHttpAtmosphereHandler(){
    AtomicBoolean b=new AtomicBoolean(false);
    AtmosphereResource suspendedEvent;
    public void onRequest(    AtmosphereResource event) throws IOException {
      if (!b.getAndSet(true)) {
        try {
          suspendedEvent=event;
          event.suspend();
        }
  finally {
          suspended.countDown();
        }
      }
 else {
        suspendedEvent.getResponse().flushBuffer();
        suspendedEvent.resume();
      }
    }
    public void onStateChange(    AtmosphereResourceEvent event) throws IOException {
      try {
        assertTrue(event.isResuming());
      }
  finally {
        latch.countDown();
      }
    }
  }
,BroadcasterFactory.getDefault().get(DefaultBroadcaster.class,"suspend"));
  AsyncHttpClient c=new AsyncHttpClient();
  try {
    c.prepareGet(urlTarget).execute(new AsyncCompletionHandler<String>(){
      @Override public String onCompleted(      Response response) throws Exception {
        try {
          assertEquals(response.getResponseBody(),"");
        }
  finally {
          latch.countDown();
        }
        return null;
      }
    }
);
    suspended.await(20,TimeUnit.SECONDS);
    Response r=c.prepareGet(urlTarget).execute().get();
    try {
      latch.await(20,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      fail(e.getMessage());
    }
    assertNotNull(r);
    assertEquals(r.getStatusCode(),200);
  }
 catch (  Exception e) {
    logger.error("test failed",e);
    fail(e.getMessage());
  }
  c.close();
}
