{
  c.log("Initializing AtmosphereFramework");
  for (  Map.Entry<String,? extends ServletRegistration> reg : c.getServletRegistrations().entrySet()) {
    String disableSwitchValue=reg.getValue().getInitParameter(ApplicationConfig.DISABLE_ATMOSPHERE_INITIALIZER);
    if (Boolean.parseBoolean(disableSwitchValue)) {
      c.log("Container managed initialization disabled for servlet: " + reg.getValue().getName());
      continue;
    }
    if (c.getAttribute(reg.getKey()) == null && IOUtils.isAtmosphere(reg.getValue().getClassName())) {
      final AtmosphereFramework framework=AtmosphereFrameworkInitializer.newAtmosphereFramework(c,false,true);
      DefaultAsyncSupportResolver resolver=new DefaultAsyncSupportResolver(framework.getAtmosphereConfig());
      List<Class<? extends AsyncSupport>> l=resolver.detectWebSocketPresent(false,true);
      int size=c.getServerInfo().contains("WebLogic") ? 1 : 0;
      String s=reg.getValue().getInitParameter(ApplicationConfig.PROPERTY_COMET_SUPPORT);
      boolean force=false;
      if (s != null && s.equals(JSR356AsyncSupport.class.getName())) {
        force=true;
      }
      if (force || l.size() == size && resolver.testClassExists(DefaultAsyncSupportResolver.JSR356_WEBSOCKET)) {
        try {
          framework.setAsyncSupport(new JSR356AsyncSupport(framework.getAtmosphereConfig(),c));
        }
 catch (        IllegalStateException ex) {
          c.log("Unable to initialize websocket support",ex);
        }
      }
      try {
        c.addListener(new ServletRequestListener(){
          @Override public void requestDestroyed(          ServletRequestEvent sre){
          }
          @Override public void requestInitialized(          ServletRequestEvent sre){
            HttpServletRequest r=HttpServletRequest.class.cast(sre.getServletRequest());
            AtmosphereConfig config=framework.getAtmosphereConfig();
            if (config.isSupportSession() && Utils.webSocketEnabled(r)) {
              r.getSession(config.getInitParameter(ApplicationConfig.PROPERTY_SESSION_CREATE,true));
            }
          }
        }
);
      }
 catch (      Throwable t) {
        c.log("AtmosphereFramework : Unable to install WebSocket Session Creator",t);
      }
      try {
        s=c.getInitParameter(PROPERTY_SESSION_SUPPORT);
        if (s != null) {
          boolean sessionSupport=Boolean.valueOf(s);
          if (sessionSupport && c.getMajorVersion() > 2) {
            c.addListener(SessionSupport.class);
            c.log("AtmosphereFramework : Installed " + SessionSupport.class);
          }
        }
      }
 catch (      Throwable t) {
        c.log("AtmosphereFramework : SessionSupport error. Make sure you also define {} as a listener in web.xml, see https://github.com/Atmosphere/atmosphere/wiki/Enabling-HttpSession-Support",t);
      }
      c.setAttribute(reg.getKey(),framework);
    }
  }
}
