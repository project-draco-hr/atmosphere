{
  Object message=event.getMessage();
  AtmosphereResponse r=event.getResource().getResponse();
  if (message == null || event.isCancelled() || event.isResuming() || event.getResource().getRequest().destroyed())   return;
  if (event.getResource().getSerializer() != null) {
    try {
      if (message instanceof List) {
        for (        Object s : (List<Object>)message) {
          event.getResource().getSerializer().write(event.getResource().getResponse().getOutputStream(),s);
        }
      }
 else {
        event.getResource().getSerializer().write(event.getResource().getResponse().getOutputStream(),message);
      }
    }
 catch (    Throwable ex) {
      logger.warn("Serializer exception: message: " + message,ex);
      throw new IOException(ex);
    }
  }
 else {
    boolean isUsingStream=true;
    Object o=event.getResource().getRequest().getAttribute(PROPERTY_USE_STREAM);
    if (o != null) {
      isUsingStream=(Boolean)o;
    }
    if (!isUsingStream) {
      try {
        r.getWriter();
      }
 catch (      IllegalStateException e) {
        isUsingStream=true;
      }
    }
    if (message instanceof List) {
      Iterator<String> i=((List)message).iterator();
      try {
        String s;
        while (i.hasNext()) {
          s=i.next();
          if (isUsingStream) {
            r.getOutputStream().write(s.getBytes(r.getCharacterEncoding()));
          }
 else {
            r.getWriter().write(s);
          }
          i.remove();
        }
      }
 catch (      IOException ex) {
        event.setMessage(new ArrayList<String>().addAll((List)message));
        throw ex;
      }
      if (isUsingStream) {
        r.getOutputStream().flush();
      }
 else {
        r.getWriter().flush();
      }
    }
 else {
      if (isUsingStream) {
        r.getOutputStream().write(message.toString().getBytes(r.getCharacterEncoding()));
        r.getOutputStream().flush();
      }
 else {
        r.getWriter().write(message.toString());
        r.getWriter().flush();
      }
    }
  }
  postStateChange(event);
}
