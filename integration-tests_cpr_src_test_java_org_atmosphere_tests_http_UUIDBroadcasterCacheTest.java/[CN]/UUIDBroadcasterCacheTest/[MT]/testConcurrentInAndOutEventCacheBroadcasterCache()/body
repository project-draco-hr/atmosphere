{
  logger.info("{}: running test: testEventCacheBroadcasterCache",getClass().getSimpleName());
  atmoServlet.framework().setBroadcasterCacheClassName(UUIDBroadcasterCache.class.getName());
  final CountDownLatch suspendLatch=new CountDownLatch(1);
  final CountDownLatch resumedLatch=new CountDownLatch(1);
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch missedBroadcastCount=new CountDownLatch(101);
  atmoServlet.framework().addAtmosphereHandler(ROOT,new AbstractHttpAtmosphereHandler(){
    public AtomicInteger count=new AtomicInteger();
    public void onRequest(    AtmosphereResource event) throws IOException {
      if (event.getRequest().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID) != null) {
        event.addEventListener(new AtmosphereResourceEventListenerAdapter(){
          @Override public void onSuspend(          AtmosphereResourceEvent event){
            suspendLatch.countDown();
          }
          @Override public void onResume(          AtmosphereResourceEvent event){
            resumedLatch.countDown();
          }
        }
).suspend(-1);
        return;
      }
      event.getBroadcaster().broadcast("message-" + count.getAndIncrement());
    }
    public void onStateChange(    AtmosphereResourceEvent event) throws IOException {
      if (event.isResuming() || event.isCancelled()) {
        return;
      }
      if (List.class.isAssignableFrom(event.getMessage().getClass())) {
        StringBuffer sb=new StringBuffer();
        for (        String m : (List<String>)event.getMessage()) {
          sb.append(m);
        }
        event.getResource().getResponse().write(sb.toString().getBytes()).flushBuffer();
      }
 else {
        event.getResource().getResponse().write(event.getMessage().toString().getBytes()).flushBuffer();
      }
      event.getResource().resume();
    }
  }
,BroadcasterFactory.getDefault().get(DefaultBroadcaster.class,"cache").addBroadcasterListener(new BroadcasterListenerAdapter(){
    @Override public void onPostCreate(    Broadcaster b){
    }
    @Override public void onComplete(    Broadcaster b){
      System.out.println("missedBroadcastCount=>" + missedBroadcastCount.getCount());
      missedBroadcastCount.countDown();
    }
    @Override public void onPreDestroy(    Broadcaster b){
    }
  }
));
  AsyncHttpClient c=new AsyncHttpClient();
  try {
    final AtomicReference<Response> response=new AtomicReference<Response>();
    c.prepareGet(urlTarget).addHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID,String.valueOf(0)).execute(new AsyncCompletionHandler<Response>(){
      @Override public Response onCompleted(      Response r) throws Exception {
        response.set(r);
        return r;
      }
    }
);
    try {
      suspendLatch.await(30,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      fail(e.getMessage());
    }
    c.prepareGet(urlTarget).execute().get();
    try {
      resumedLatch.await(30,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      fail(e.getMessage());
    }
    for (int i=0; i < 100; i++) {
      c.prepareGet(urlTarget).execute();
    }
    final AtomicReference<StringBuffer> messages=new AtomicReference<StringBuffer>(new StringBuffer());
    c.prepareGet(urlTarget).addHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID,response.get().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID)).addHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT,HeaderConfig.LONG_POLLING_TRANSPORT).execute(new AsyncCompletionHandler<Response>(){
      @Override public Response onCompleted(      Response r) throws Exception {
        messages.get().append(r.getResponseBody());
        return r;
      }
    }
).get();
    missedBroadcastCount.await(10,TimeUnit.SECONDS);
    c.prepareGet(urlTarget).addHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID,response.get().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID)).addHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT,HeaderConfig.LONG_POLLING_TRANSPORT).execute(new AsyncCompletionHandler<Response>(){
      @Override public Response onCompleted(      Response r) throws Exception {
        try {
          messages.get().append(r.getResponseBody());
          return r;
        }
  finally {
          latch.countDown();
        }
      }
    }
);
    try {
      latch.await(10,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      fail(e.getMessage());
    }
    assertTrue(messages.toString().length() >= 992);
  }
 catch (  Exception e) {
    logger.error("test failed",e);
    fail(e.getMessage());
  }
  c.close();
}
