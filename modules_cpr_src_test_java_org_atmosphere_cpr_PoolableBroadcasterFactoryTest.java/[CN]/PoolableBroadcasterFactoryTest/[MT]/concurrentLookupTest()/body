{
  String id="id";
  final CountDownLatch latch=new CountDownLatch(100);
  final AtomicInteger created=new AtomicInteger();
  factory.addBroadcasterListener(new BroadcasterListenerAdapter(){
    @Override public void onPostCreate(    Broadcaster b){
      created.incrementAndGet();
      latch.countDown();
    }
    @Override public void onComplete(    Broadcaster b){
    }
    @Override public void onPreDestroy(    Broadcaster b){
    }
  }
);
  final ConcurrentLinkedQueue<Broadcaster> c=new ConcurrentLinkedQueue<Broadcaster>();
  ExecutorService r=Executors.newCachedThreadPool();
  try {
    for (int i=0; i < 100; i++) {
      r.submit(new Runnable(){
        @Override public void run(){
          c.add(factory.lookup("name" + UUID.randomUUID().toString(),true));
        }
      }
);
    }
  }
  finally {
    r.shutdown();
  }
  latch.await();
  try {
    assertEquals(c.size(),100);
    assertEquals(created.get(),100);
    for (    Broadcaster b : c) {
      b.destroy();
    }
    assertNotNull(factory.lookup("name" + UUID.randomUUID().toString(),true).broadcast("test"));
    assertEquals(factory.poolableProvider().poolSize(),100);
  }
  finally {
    factory.destroy();
  }
}
