{
  final CountDownLatch latch=new CountDownLatch(1000);
  final AtomicInteger created=new AtomicInteger();
  factory.poolableProvider(new UnboundedApachePoolableProvider());
  factory.addBroadcasterListener(new BroadcasterListenerAdapter(){
    @Override public void onPostCreate(    Broadcaster b){
      created.incrementAndGet();
      latch.countDown();
    }
    @Override public void onComplete(    Broadcaster b){
    }
    @Override public void onPreDestroy(    Broadcaster b){
    }
  }
);
  final ConcurrentLinkedQueue<Broadcaster> c=new ConcurrentLinkedQueue<Broadcaster>();
  ExecutorService r=Executors.newCachedThreadPool();
  final String me=new String("me");
  for (int i=0; i < 1000; i++) {
    r.submit(new Runnable(){
      @Override public void run(){
        c.add(factory.get(me));
      }
    }
);
  }
  try {
    assertTrue(latch.await(20,TimeUnit.SECONDS));
    assertEquals(latch.getCount(),0);
    assertEquals(c.size(),1000);
    assertEquals(created.get(),1000);
    for (    Broadcaster b : c) {
      b.destroy();
    }
    assertNotNull(factory.lookup("name" + UUID.randomUUID().toString(),true).broadcast("test"));
    assertEquals(factory.poolableProvider().poolSize(),1000);
  }
  finally {
    factory.destroy();
    r.shutdownNow();
  }
}
