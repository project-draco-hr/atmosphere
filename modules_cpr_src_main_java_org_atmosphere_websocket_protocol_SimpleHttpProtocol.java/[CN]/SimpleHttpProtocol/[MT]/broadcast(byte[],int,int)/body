{
  try {
    final AtomicReference<byte[]> data=new AtomicReference<byte[]>(d);
    final AtomicReference<String> pathInfo=new AtomicReference<String>(request().getPathInfo());
    if (d[0] == (byte)delimiter.charAt(0) && d[1] == (byte)delimiter.charAt(0)) {
      final String s=new String(d,offset,length,"UTF-8");
      String[] token=s.split(delimiter);
      pathInfo.set(token[1]);
      data.set(token[2].getBytes("UTF-8"));
    }
    atmosphereServlet().doCometSupport(new HttpServletRequestWrapper(request()){
      private ByteInputStream bis=new ByteInputStream(data.get(),offset,length);
      private BufferedReader br=new BufferedReader(new StringReader(new String(d,offset,offset,"UTF-8")));
      @Override public String getPathInfo(){
        return pathInfo.get();
      }
      @Override public String getMethod(){
        return methodType;
      }
      @Override public String getContentType(){
        return contentType;
      }
      @Override public Enumeration getHeaders(      String name){
        ArrayList list=Collections.list(super.getHeaders(name));
        if (name.equalsIgnoreCase("content-type")) {
          list.add(contentType);
        }
        if (list.size() == 0 && name.startsWith("X-Atmosphere")) {
          if (request().getAttribute(name) != null) {
            list.add(request().getAttribute(name));
          }
        }
        return Collections.enumeration(list);
      }
      public Enumeration<String> getHeaderNames(){
        ArrayList list=Collections.list(super.getHeaderNames());
        list.add("content-type");
        Enumeration e=request().getAttributeNames();
        while (e.hasMoreElements()) {
          String name=e.nextElement().toString();
          if (name.startsWith("X-Atmosphere")) {
            list.add(name);
          }
        }
        return Collections.enumeration(list);
      }
      @Override public String getHeader(      String s){
        if (s.equalsIgnoreCase("Connection")) {
          return "keep-alive";
        }
 else         if ("content-type".equalsIgnoreCase(s)) {
          return contentType;
        }
 else {
          String name=super.getHeader(s);
          if (name != null) {
            if (name.startsWith("X-Atmosphere")) {
              return (String)request().getAttribute(s);
            }
          }
          return name;
        }
      }
      @Override public ServletInputStream getInputStream() throws IOException {
        return bis;
      }
      @Override public BufferedReader getReader() throws IOException {
        return br;
      }
    }
,new WebSocketHttpServletResponse<WebSocket>(webSocketSupport()));
  }
 catch (  IOException e) {
    logger.warn(e.getMessage(),e);
  }
catch (  ServletException e) {
    logger.warn(e.getMessage(),e);
  }
}
