{
  System.err.println("\n\nTEST disconnectPostWebSocketTest\n\n");
  final AsyncHttpClient client=getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build());
  final String sessionid1=getSessionID(client,GET_SESSION_URL);
  final String username="test_" + System.currentTimeMillis();
  final CountDownLatch l=new CountDownLatch(1);
  WebSocketWrapper webSocketWrapper1=loginWS("clientWebSocket1",client,WS_GET_SESSION_URL + "websocket/" + sessionid1,username,true);
  webSocketWrapper1.setListener(new WebSocketResponseListener(webSocketWrapper1){
    @Override public void onClose(){
      System.err.println("onClose called");
    }
    @Override public void notify(    String message){
      log.info("clientWebSocket1 message received = " + message);
      Assert.assertNotNull(message);
      List<SocketIOPacketImpl> messages=null;
      try {
        messages=SocketIOPacketImpl.parse(message);
      }
 catch (      SocketIOException e1) {
        e1.printStackTrace();
      }
      if (messages == null || messages.isEmpty()) {
        return;
      }
      for (      SocketIOPacketImpl msg : messages) {
        String data=msg.toString();
switch (msg.getFrameType()) {
case CONNECT:
          Assert.assertEquals(message,"1::");
        l.countDown();
      break;
default :
  }
}
}
}
);
sendMessage(webSocketWrapper1.websocket,"0:::");
if (!l.await(30,TimeUnit.SECONDS)) {
throw new RuntimeException("Timeout out");
}
client.close();
}
