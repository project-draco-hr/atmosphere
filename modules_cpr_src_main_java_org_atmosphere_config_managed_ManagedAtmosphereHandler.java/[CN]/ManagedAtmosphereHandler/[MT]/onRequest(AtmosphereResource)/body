{
  AtmosphereRequest request=resource.getRequest();
  String method=request.getMethod();
  boolean polling=Utils.pollableTransport(resource.transport());
  boolean webSocketMessage=Utils.webSocketMessage(resource);
  if (!webSocketMessage) {
    if (onReadyMethod != null && !polling) {
      resource.addEventListener(new OnSuspend(){
        @Override public void onSuspend(        AtmosphereResourceEvent event){
          processReady(event.getResource());
          resource.removeEventListener(this);
        }
      }
);
    }
    if (onResumeMethod != null && !polling) {
      resource.addEventListener(new OnResume(){
        @Override public void onResume(        AtmosphereResourceEvent event){
          invoke(onResumeMethod,event.getResource());
          resource.removeEventListener(this);
        }
      }
);
    }
    resource.addEventListener(new OnClose(){
      @Override public void onClose(      AtmosphereResourceEvent event){
        invoke(onDisconnectMethod,event);
      }
    }
);
  }
  if (method.equalsIgnoreCase("get")) {
    invoke(onGetMethod,resource);
  }
 else   if (method.equalsIgnoreCase("post")) {
    Object body=null;
    if (onPostMethod != null) {
      if (request.body().hasString()) {
        body=readEntirelyAsString(resource).toString();
        resource.getRequest().body((String)body);
      }
 else {
        body=readEntirelyAsByte(resource);
        resource.getRequest().body((byte[])body);
      }
      invoke(onPostMethod,resource);
    }
    Object o=message(resource,body);
    if (o != null) {
      resource.getBroadcaster().broadcast(new Managed(o));
    }
  }
 else   if (method.equalsIgnoreCase("delete")) {
    invoke(onDeleteMethod,resource);
  }
 else   if (method.equalsIgnoreCase("put")) {
    invoke(onPutMethod,resource);
  }
}
