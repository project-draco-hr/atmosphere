{
  logger.trace("Initializing AtmosphereFramework");
  framework=(AtmosphereFramework)c.getAttribute(AtmosphereFramework.class.getName());
  if (framework == null) {
    framework=new AtmosphereFramework(false,true);
    DefaultAsyncSupportResolver resolver=new DefaultAsyncSupportResolver(framework.getAtmosphereConfig());
    List<Class<? extends AsyncSupport>> l=resolver.detectWebSocketPresent(false,true);
    if (l.size() == 0 && resolver.testClassExists(DefaultAsyncSupportResolver.JSR356_WEBSOCKET)) {
      framework.setAsyncSupport(new JSR356AsyncSupport(new AtmosphereConfig(framework){
        public ServletContext getServletContext(){
          return c;
        }
        public String getInitParameter(        String name){
          return c.getInitParameter(name);
        }
        public Enumeration<String> getInitParameterNames(){
          return c.getInitParameterNames();
        }
      }
));
    }
    try {
      c.addListener(new ServletRequestListener(){
        @Override public void requestDestroyed(        ServletRequestEvent sre){
        }
        @Override public void requestInitialized(        ServletRequestEvent sre){
          HttpServletRequest r=HttpServletRequest.class.cast(sre.getServletRequest());
          if (framework.getAtmosphereConfig().isSupportSession() && r.getHeader("Upgrade") != null) {
            r.getSession(true);
          }
        }
      }
);
    }
 catch (    Throwable t) {
      logger.trace("Unable to install WebSocket Session Creator",t);
    }
    c.setAttribute(AtmosphereFramework.class.getName(),framework);
  }
}
