{
  c.log("Initializing AtmosphereFramework");
  for (  Map.Entry<String,? extends ServletRegistration> reg : c.getServletRegistrations().entrySet()) {
    if (c.getAttribute(reg.getKey()) == null && IOUtils.isAtmosphere(reg.getValue().getClassName())) {
      final AtmosphereFramework framework=new AtmosphereFramework(false,true);
      DefaultAsyncSupportResolver resolver=new DefaultAsyncSupportResolver(framework.getAtmosphereConfig());
      List<Class<? extends AsyncSupport>> l=resolver.detectWebSocketPresent(false,true);
      if (l.size() == 0 && resolver.testClassExists(DefaultAsyncSupportResolver.JSR356_WEBSOCKET)) {
        framework.setAsyncSupport(new JSR356AsyncSupport(new AtmosphereConfig(framework){
          public ServletContext getServletContext(){
            return c;
          }
          public String getInitParameter(          String name){
            return c.getInitParameter(name);
          }
          public Enumeration<String> getInitParameterNames(){
            return c.getInitParameterNames();
          }
        }
));
      }
      try {
        c.addListener(new ServletRequestListener(){
          @Override public void requestDestroyed(          ServletRequestEvent sre){
          }
          @Override public void requestInitialized(          ServletRequestEvent sre){
            HttpServletRequest r=HttpServletRequest.class.cast(sre.getServletRequest());
            if (framework.getAtmosphereConfig().isSupportSession() && Utils.webSocketEnabled(r)) {
              r.getSession(true);
            }
          }
        }
);
      }
 catch (      Throwable t) {
        c.log("AtmosphereFramework : Unable to install WebSocket Session Creator",t);
      }
      try {
        String s=c.getInitParameter(PROPERTY_SESSION_SUPPORT);
        if (s != null) {
          boolean sessionSupport=Boolean.valueOf(s);
          if (sessionSupport && c.getMajorVersion() > 2) {
            c.addListener(SessionSupport.class);
            c.log("AtmosphereFramework : Installed " + SessionSupport.class);
          }
        }
      }
 catch (      Throwable t) {
        c.log("AtmosphereFramework : SessionSupport error. Make sure you also define {} as a listener in web.xml, see https://github.com/Atmosphere/atmosphere/wiki/Enabling-HttpSession-Support",t);
      }
      c.setAttribute(reg.getKey(),framework);
    }
  }
}
