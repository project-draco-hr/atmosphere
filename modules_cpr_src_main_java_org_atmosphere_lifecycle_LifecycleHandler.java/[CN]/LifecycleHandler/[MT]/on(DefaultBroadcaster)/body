{
  final BroadcasterLifeCyclePolicy lifeCyclePolicy=broadcaster.getBroadcasterLifeCyclePolicy();
  final BroadcasterConfig bc=broadcaster.getBroadcasterConfig();
  final Collection<AtmosphereResource> resources=broadcaster.getAtmosphereResources();
  final AtomicBoolean recentActivity=broadcaster.recentActivity();
  if (logger.isTraceEnabled()) {
    logger.trace("{} new lifecycle policy: {}",broadcaster.getID(),lifeCyclePolicy.getLifeCyclePolicy().name());
  }
  if (broadcaster.currentLifecycleTask() != null) {
    broadcaster.currentLifecycleTask().cancel(false);
  }
  if (bc != null && bc.getScheduledExecutorService() == null) {
    logger.error("No Broadcaster's SchedulerExecutorService has been configured on {}. BroadcasterLifeCyclePolicy won't work.",broadcaster.getID());
    return this;
  }
  if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
    recentActivity.set(false);
    int time=lifeCyclePolicy.getTimeout();
    if (time == -1) {
      throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
    }
    Future<?> currentLifecycleTask=bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable(){
      @Override public void run(){
        try {
          if (recentActivity.getAndSet(false)) {
            return;
          }
 else           if (resources.isEmpty()) {
            if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) {
              notifyEmptyListener(broadcaster);
              notifyIdleListener(broadcaster);
              broadcaster.releaseExternalResources();
              logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy to Broadcaster {}",broadcaster.getID());
              if (broadcaster.currentLifecycleTask() != null) {
                broadcaster.currentLifecycleTask().cancel(true);
              }
            }
 else             if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
              notifyEmptyListener(broadcaster);
              notifyIdleListener(broadcaster);
              destroy(false);
              logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy to Broadcaster {}",broadcaster.getID());
            }
          }
 else           if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME) {
            notifyIdleListener(broadcaster);
            destroy(true);
            logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_RESUME policy to Broadcaster {}",broadcaster.getID());
          }
        }
 catch (        Throwable t) {
          if (broadcaster.isDestroyed()) {
            logger.trace("Scheduled BroadcasterLifeCyclePolicy exception",t);
          }
 else {
            logger.warn("Scheduled BroadcasterLifeCyclePolicy exception",t);
          }
        }
      }
      void destroy(      boolean resume){
        if (resume) {
          logger.info("All AtmosphereResource will now be resumed from Broadcaster {}",broadcaster.getID());
          broadcaster.resumeAll();
        }
        broadcaster.destroy();
        if (broadcaster.currentLifecycleTask() != null) {
          broadcaster.currentLifecycleTask().cancel(true);
        }
      }
    }
,time,time,lifeCyclePolicy.getTimeUnit());
    broadcaster.currentLifecycleTask(currentLifecycleTask);
  }
  return this;
}
