{
  boolean writeAsBytes=IOUtils.isBodyBinary(response.request());
  if (writeAsBytes) {
    logger.warn("Cannot use TrackMessageSizeInterceptor with binary write. Writing the message as it is.");
    return responseDraft;
  }
  if (response.request().getAttribute(SKIP_INTERCEPTOR) == null && (response.getContentType() == null || !excludedContentTypes.contains(response.getContentType().toLowerCase()))) {
    try {
      response.setCharacterEncoding(OUT_ENCODING);
      CharBuffer cb=inCharset.newDecoder().decode(ByteBuffer.wrap(responseDraft,0,responseDraft.length));
      String s=cb.toString();
      if (s.trim().length() == 0) {
        return responseDraft;
      }
      AtmosphereResource r=response.resource();
      if (r == null) {
        throw new IOException("Connection Closed by the Client " + response.uuid());
      }
      int size=cb.length();
      String csq=Integer.toString(size) + endString;
      ByteBuffer bb=ByteBuffer.allocate(csq.getBytes().length + responseDraft.length);
      CharBuffer cb2=CharBuffer.wrap(csq);
      CharsetEncoder encoder=outCharset.newEncoder();
      encoder.encode(cb2,bb,false);
      encoder.encode(cb,bb,false);
      bb.flip();
      byte[] b=new byte[bb.limit()];
      bb.get(b);
      return b;
    }
 catch (    MalformedInputException ex) {
      logger.warn("Cannot decode the response bytes for {}. Writing the message as it is",response.uuid(),ex);
      return responseDraft;
    }
  }
 else {
    return responseDraft;
  }
}
