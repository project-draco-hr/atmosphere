{
  final AtmosphereResponse response=r.getResponse();
  if (r.transport() != AtmosphereResource.TRANSPORT.WEBSOCKET) {
    super.inspect(r);
    AsyncIOWriter writer=response.getAsyncIOWriter();
    if (AtmosphereInterceptorWriter.class.isAssignableFrom(writer.getClass())) {
      AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptor(){
        @Override public void prePayload(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
        }
        @Override public byte[] transformPayload(        byte[] responseDraft,        byte[] data) throws IOException {
          String s=new String(responseDraft,response.getCharacterEncoding());
          if (s.trim().length() != 0) {
            s=s.length() + endString + s;
            return s.getBytes(response.getCharacterEncoding());
          }
 else {
            return responseDraft;
          }
        }
        @Override public void postPayload(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
        }
      }
);
    }
 else {
      throw new IllegalStateException("AsyncIOWriter must be an instance of " + AsyncIOWriter.class.getName());
    }
  }
 else {
    ((WebSocket)response.getAsyncIOWriter()).webSocketResponseFilter(new WebSocketResponseFilter(){
      @Override public String filter(      AtmosphereResponse r,      String message){
        return message.length() + endString + message;
      }
      @Override public byte[] filter(      AtmosphereResponse r,      byte[] message){
        String s=null;
        try {
          s=new String(message,r.getCharacterEncoding());
        }
 catch (        UnsupportedEncodingException e) {
          logger.trace("",e);
        }
        s=s.length() + endString + s;
        try {
          return s.getBytes(response.getCharacterEncoding());
        }
 catch (        UnsupportedEncodingException e) {
          logger.trace("",e);
        }
        return message;
      }
      @Override public byte[] filter(      AtmosphereResponse r,      byte[] message,      int offset,      int length){
        String s=null;
        try {
          s=new String(message,offset,length,r.getCharacterEncoding());
        }
 catch (        UnsupportedEncodingException e) {
          logger.trace("",e);
        }
        s=s.length() + endString + s;
        try {
          return s.getBytes(response.getCharacterEncoding());
        }
 catch (        UnsupportedEncodingException e) {
          logger.trace("",e);
        }
        return message;
      }
    }
);
  }
  return Action.CONTINUE;
}
