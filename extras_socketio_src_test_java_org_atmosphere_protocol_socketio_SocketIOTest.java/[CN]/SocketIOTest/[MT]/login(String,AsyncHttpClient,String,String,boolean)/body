{
  final CountDownLatch latchGet=new CountDownLatch(2);
  final CountDownLatch latchPost=new CountDownLatch(1);
  connect(name,client,url);
  final ResponseListener responseListener=new ResponseListener(){
    @Override public void notify(    String message){
      log.info("GET login [" + name + "] CountDown="+ latchGet.getCount()+ "  message received = "+ message);
      Assert.assertNotNull(message);
      List<SocketIOPacketImpl> messages=null;
      try {
        messages=SocketIOPacketImpl.parse(message);
      }
 catch (      SocketIOException e1) {
        e1.printStackTrace();
      }
      if (messages == null || messages.isEmpty()) {
        return;
      }
      for (      SocketIOPacketImpl msg : messages) {
        String data=msg.toString();
switch (msg.getFrameType()) {
case ACK:
          if (data.contains("6:::1+")) {
            latchGet.countDown();
            if (usernameUnique) {
              Assert.assertTrue(data.contains("6:::1+[false]"));
            }
 else {
              Assert.assertTrue(data.contains("6:::1+[true]"));
              latchGet.countDown();
            }
          }
        break;
case HEARTBEAT:
case DISCONNECT:
      break;
case EVENT:
    if (data.contains("5:::{\"name\":\"nicknames\",\"args\":[{")) {
      latchGet.countDown();
      Assert.assertTrue(data.contains("5:::{\"name\":\"nicknames\",\"args\":[{"));
      Assert.assertTrue(data.contains("\"" + username + "\""));
    }
  break;
default :
}
}
log.info("FINISH GET login [" + name + "] CountDown="+ latchGet.getCount());
if (latchGet.getCount() > 0) {
try {
newSuspendConnection(name,client,url,username,usernameUnique,this);
}
 catch (Throwable e) {
e.printStackTrace();
}
}
}
}
;
suspend(name,client,url,responseListener);
sendMessage(name,client,url,"5:1+::{\"name\":\"nickname\",\"args\":[\"" + username + "\"]}",new ResponseListener(){
@Override public void notify(String message){
log.info("POST login [" + name + "] message received = "+ message);
latchPost.countDown();
Assert.assertNotNull(message);
Assert.assertEquals(message,SocketIOPacketImpl.POST_RESPONSE);
}
}
);
if (!latchGet.await(30,TimeUnit.SECONDS)) {
throw new RuntimeException("Timeout out Login 1 from user=[" + name + "]");
}
if (!latchPost.await(30,TimeUnit.SECONDS)) {
throw new RuntimeException("Timeout out Login 3 from user=[" + name + "]");
}
}
