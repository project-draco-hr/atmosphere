{
  System.err.println("\n\nTEST broadcastDisconnectXHRPollingTest\n\n");
  final AsyncHttpClient client=getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build());
  final String sessionid1=getSessionID(client,GET_SESSION_URL);
  final String username="test_" + System.currentTimeMillis();
  login("clientXHRPolling1",client,GET_SESSION_URL + "xhr-polling/" + sessionid1,username,true);
  final AsyncHttpClient client2=getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build());
  final String sessionid2=getSessionID(client,GET_SESSION_URL);
  final String username2="test_" + System.currentTimeMillis();
  login("clientXHRPolling2",client2,GET_SESSION_URL + "xhr-polling/" + sessionid2,username2,true);
  suspend("clientXHRPolling1",client,GET_SESSION_URL + "xhr-polling/" + sessionid1,new ResponseListener(){
    @Override public void notify(    String message){
      log.info("broadcastDisconnectXHRPollingTest clientXHRPolling1 message received = " + message);
      Assert.assertNotNull(message);
      Assert.assertEquals(message,"1::");
    }
  }
);
  suspend("clientXHRPolling2",client2,GET_SESSION_URL + "xhr-polling/" + sessionid2,new ResponseListener(){
    @Override public void notify(    String message){
      log.info("broadcastDisconnectXHRPollingTest clientXHRPolling2 message received = " + message);
      Assert.assertNotNull(message);
      Assert.assertTrue(message.contains("5:::{\"name\":\"announcement\",\"args\":[\"" + username + " disconnected\"]}"));
    }
  }
);
  disconnect("clientXHRPolling1",client,GET_SESSION_URL + "xhr-polling/" + sessionid1);
  client.close();
  client2.close();
}
