{
  String named=pathLocal.get();
  String[] paths=(String[])r.getRequest().getAttribute(PathParam.class.getName());
  if (paths == null || paths.length != 2) {
    AtmosphereFramework.AtmosphereHandlerWrapper w=(AtmosphereFramework.AtmosphereHandlerWrapper)r.getRequest().getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER_WRAPPER);
    if (w != null) {
      if (AnnotatedProxy.class.isAssignableFrom(w.atmosphereHandler.getClass())) {
        AnnotatedProxy ap=AnnotatedProxy.class.cast(w.atmosphereHandler);
        if (ap.target().getClass().isAnnotationPresent(ManagedService.class)) {
          String targetPath=ap.target().getClass().getAnnotation(ManagedService.class).path();
          if (targetPath.indexOf("{") != -1 && targetPath.indexOf("}") != -1) {
            paths=new String[]{Utils.pathInfo(r.getRequest()),targetPath};
          }
        }
      }
      if (paths == null || paths.length != 2) {
        return null;
      }
    }
  }
  logger.debug("Path: {}, targetPath: {}",pathLocal,paths[1]);
  String[] inParts=paths[0].split("/");
  String[] outParts=paths[1].split("/");
  Map<String,String> annotatedPathVars=new HashMap<>();
  int len=Math.min(outParts.length,inParts.length);
  for (int i=0; i < len; i++) {
    String s=outParts[i];
    if (s.startsWith("{") && s.endsWith("}")) {
      int end=s.contains(":") ? s.indexOf(":") : s.length() - 1;
      annotatedPathVars.put(s.substring(1,end),inParts[i]);
      logger.debug("Putting PathVar pair: {} -> {}",s.substring(1,s.length() - 1),inParts[i]);
    }
  }
  return annotatedPathVars.get(named);
}
