{
  try {
    ReflectorServletProcessor r=new ReflectorServletProcessor();
    r.setServletClassName(discoveredClass.getName());
    Class<Servlet> s=(Class<Servlet>)discoveredClass;
    MeteorService m=s.getAnnotation(MeteorService.class);
    String mapping=m.path();
    atmosphereConfig(m.atmosphereConfig(),framework);
    framework.setDefaultBroadcasterClassName(m.broadcaster().getName());
    filters(m.broadcastFilters(),framework);
    Class<?>[] interceptors=m.interceptors();
    List<AtmosphereInterceptor> l=new ArrayList<AtmosphereInterceptor>();
    for (    Class i : interceptors) {
      try {
        AtmosphereInterceptor ai=(AtmosphereInterceptor)i.newInstance();
        l.add(ai);
      }
 catch (      Throwable e) {
        logger.warn("",e);
      }
    }
    if (m.path().contains("{")) {
      l.add(new MeteorServiceInterceptor());
    }
    framework.addAtmosphereHandler(mapping,r,l);
  }
 catch (  Throwable e) {
    logger.warn("",e);
  }
}
