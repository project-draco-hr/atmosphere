{
  try {
    ReflectorServletProcessor r=framework.newClassInstance(ReflectorServletProcessor.class,ReflectorServletProcessor.class);
    r.setServletClassName(annotatedClass.getName());
    List<AtmosphereInterceptor> l=new LinkedList<AtmosphereInterceptor>();
    MeteorService m=annotatedClass.getAnnotation(MeteorService.class);
    framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
    String mapping=m.path();
    atmosphereConfig(m.atmosphereConfig(),framework);
    filters(m.broadcastFilters(),framework);
    AtmosphereInterceptor aa=listeners(m.listeners(),framework);
    if (aa != null) {
      l.add(aa);
    }
    AnnotationUtil.interceptors(framework,m.interceptors(),l);
    if (m.path().contains("{")) {
      framework.interceptors().add(framework.newClassInstance(AtmosphereInterceptor.class,MeteorServiceInterceptor.class));
    }
    framework.addAtmosphereHandler(mapping,r,broadcaster(framework,m.broadcaster(),m.path()),l);
  }
 catch (  Throwable e) {
    logger.warn("",e);
  }
}
