{
  if (event.isSuspended() || disableSuspend)   return this;
  if (config.isSupportSession() && req.getSession(false) != null && req.getSession().getMaxInactiveInterval() >= 0 && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
    throw new IllegalStateException("Cannot suspend a " + "response longer than the session timeout. Increase the value of session-timeout in web.xml");
  }
  if (Utils.resumableTransport(transport())) {
    resumeOnBroadcast.set(true);
  }
  onPreSuspend(event);
  if (event.isSuspended() || disableSuspend)   return this;
  if (!event.isResumedOnTimeout()) {
    suspended.set(true);
    Enumeration<String> connection=req.getHeaders("Connection");
    if (connection == null) {
      connection=req.getHeaders("connection");
    }
    if (connection != null && connection.hasMoreElements()) {
      String[] e=connection.nextElement().toString().split(",");
      for (      String upgrade : e) {
        if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
          if (!asyncSupport.supportWebSocket()) {
            response.addHeader(X_ATMOSPHERE_ERROR,"Websocket protocol not supported");
          }
 else {
            req.setAttribute(FrameworkConfig.TRANSPORT_IN_USE,HeaderConfig.WEBSOCKET_TRANSPORT);
          }
        }
      }
    }
    if (req.getHeader(X_ATMOSPHERE_TRANSPORT) == null || transport().equals(UNDEFINED)) {
      req.setAttribute(FrameworkConfig.TRANSPORT_IN_USE,LONG_POLLING_TRANSPORT);
    }
    req.setAttribute(PRE_SUSPEND,"true");
    action.type(Action.TYPE.SUSPEND);
    action.timeout(timeout);
    boolean isJersey=req.getAttribute(FrameworkConfig.CONTAINER_RESPONSE) != null;
    boolean skipCreation=false;
    if (req.getAttribute(SKIP_BROADCASTER_CREATION) != null) {
      skipCreation=true;
    }
    Broadcaster broadcaster=broadcasters.get(0);
    if (!skipCreation && (broadcaster == null || broadcaster.getScope() == Broadcaster.SCOPE.REQUEST) && !isJersey) {
      String id=broadcaster != null ? broadcaster.getID() : ROOT_MASTER;
      Class<? extends Broadcaster> clazz=broadcaster != null ? broadcaster.getClass() : DefaultBroadcaster.class;
      broadcaster=config.getBroadcasterFactory().lookup(clazz,id,false);
      if (broadcaster == null || broadcaster.getAtmosphereResources().size() > 0) {
        broadcaster=config.getBroadcasterFactory().lookup(clazz,id + "/" + UUID.randomUUID(),true);
      }
    }
    broadcaster.addAtmosphereResource(this);
    if (req.getAttribute(DefaultBroadcaster.CACHED) != null && transport() != null && Utils.resumableTransport(transport())) {
      action.type(Action.TYPE.CONTINUE);
      logger.debug("Cached message found, not suspending {}",uuid());
      return this;
    }
    req.removeAttribute(PRE_SUSPEND);
    register();
    notifyListeners();
  }
  return this;
}
