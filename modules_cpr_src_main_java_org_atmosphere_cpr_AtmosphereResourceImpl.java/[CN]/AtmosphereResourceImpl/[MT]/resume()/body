{
  if (!isSuspended()) {
    logger.trace("AtmosphereResource {} not suspended {}, cannot resume it.",uuid(),action);
    return this;
  }
  try {
    if (!isResumed.getAndSet(true) && isInScope.get()) {
      suspended.set(false);
      logger.trace("AtmosphereResource {} is resuming",uuid());
      action.type(Action.TYPE.RESUME);
      Broadcaster b=getBroadcaster(false);
      if (!b.isDestroyed() && b instanceof DefaultBroadcaster) {
        ((DefaultBroadcaster)b).broadcastOnResume(this);
      }
      notifyListeners();
      try {
        if (!b.isDestroyed()) {
          broadcaster.removeAtmosphereResource(this);
        }
      }
 catch (      IllegalStateException ex) {
        logger.warn("Unable to resume",this);
        logger.debug(ex.getMessage(),ex);
      }
      if (b.getScope() == Broadcaster.SCOPE.REQUEST) {
        logger.debug("Broadcaster's scope is set to request, destroying it {}",b.getID());
        b.destroy();
      }
      if (config.getBroadcasterFactory() != null) {
        config.getBroadcasterFactory().removeAllAtmosphereResource(this);
      }
      try {
        req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT,Boolean.FALSE);
      }
 catch (      Exception ex) {
        logger.debug("Resume exception: Cannot resume an already resumed/cancelled request",ex);
      }
      if (req.getAttribute(PRE_SUSPEND) == null) {
        asyncSupport.action(this);
      }
    }
 else {
      logger.trace("Already resumed {}",this);
      return this;
    }
  }
 catch (  Throwable t) {
    logger.trace("Wasn't able to resume a connection {}",this,t);
  }
 finally {
    unregister();
    try {
      Meteor m=(Meteor)req.getAttribute(METEOR);
      if (m != null) {
        m.destroy();
      }
    }
 catch (    Exception ex) {
      logger.debug("Meteor resume exception: Cannot resume an already resumed/cancelled request",ex);
    }
  }
  listeners.clear();
  return this;
}
