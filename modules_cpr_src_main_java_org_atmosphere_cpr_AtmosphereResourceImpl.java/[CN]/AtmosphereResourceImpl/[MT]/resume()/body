{
  try {
    if (!isResumed && isInScope) {
      action.type=AtmosphereServlet.Action.TYPE.RESUME;
      isResumed=true;
      try {
        logger.debug("Resuming {}",getRequest(false));
      }
 catch (      Throwable ex) {
        return;
      }
      Broadcaster b=getBroadcaster(false);
      if (!b.isDestroyed() && b instanceof DefaultBroadcaster) {
        ((DefaultBroadcaster)b).broadcastOnResume(this);
      }
      notifyListeners();
      listeners.clear();
      try {
        if (!b.isDestroyed()) {
          broadcaster.removeAtmosphereResource(this);
        }
      }
 catch (      IllegalStateException ex) {
        logger.warn("Unable to resume",this);
        logger.debug(ex.getMessage(),ex);
      }
      if (b.getScope() == Broadcaster.SCOPE.REQUEST) {
        logger.debug("Broadcaster's scope is set to request, destroying it {}",b.getID());
        b.destroy();
      }
      if (BroadcasterFactory.getDefault() != null) {
        BroadcasterFactory.getDefault().removeAllAtmosphereResource(this);
      }
      try {
        req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT,Boolean.FALSE);
        Meteor m=(Meteor)req.getAttribute(METEOR);
        if (m != null) {
          m.destroy();
        }
      }
 catch (      Exception ex) {
        logger.debug("Meteor resume exception: Cannot resume an already resumed/cancelled request",ex);
      }
      if (req.getAttribute(PRE_SUSPEND) == null) {
        cometSupport.action(this);
      }
    }
 else {
      logger.debug("Cannot resume an already resumed/cancelled request {}",this);
    }
  }
 catch (  Throwable t) {
    logger.trace("Wasn't able to resume a connection {}",this,t);
  }
}
