{
  final AtomicReference<String> s=new AtomicReference<String>();
  AtmosphereResponse res=AtmosphereResponse.create().request(AtmosphereRequest.create());
  res.request().setAttribute(PROPERTY_USE_STREAM,false);
  res.asyncIOWriter(new AtmosphereInterceptorWriter().interceptor(new AsyncIOInterceptor(){
    @Override public void prePayload(    AtmosphereResponse response,    byte[] data,    int offset,    int length){
    }
    @Override public byte[] transformPayload(    AtmosphereResponse response,    byte[] responseDraft,    byte[] data) throws IOException {
      s.set(new String(data));
      return responseDraft;
    }
    @Override public void postPayload(    AtmosphereResponse response,    byte[] data,    int offset,    int length){
    }
  }
)).write("test");
  assertEquals(s.get(),"test");
}
