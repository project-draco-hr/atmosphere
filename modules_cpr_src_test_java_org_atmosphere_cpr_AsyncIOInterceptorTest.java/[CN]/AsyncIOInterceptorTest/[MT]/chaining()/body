{
  final AtomicReference<StringBuffer> s=new AtomicReference<StringBuffer>(new StringBuffer());
  AtmosphereResponse res=AtmosphereResponse.create().request(AtmosphereRequest.create());
  res.request().setAttribute(PROPERTY_USE_STREAM,false);
  res.asyncIOWriter(new AtmosphereInterceptorWriter(res).interceptor(new AsyncIOInterceptor(){
    @Override public void prePayload(    AtmosphereResponse response,    String data){
    }
    @Override public void prePayload(    AtmosphereResponse response,    byte[] data){
    }
    @Override public void prePayload(    AtmosphereResponse response,    byte[] data,    int offset,    int length){
    }
    @Override public void transformPayload(    ByteArrayOutputStream response,    String data){
    }
    @Override public void transformPayload(    ByteArrayOutputStream response,    byte[] data){
      s.get().append(new String(data));
    }
    @Override public void transformPayload(    ByteArrayOutputStream response,    byte[] data,    int offset,    int length){
    }
    @Override public void postPayload(    AtmosphereResponse response,    String data){
    }
    @Override public void postPayload(    AtmosphereResponse response,    byte[] data){
    }
    @Override public void postPayload(    AtmosphereResponse response,    byte[] data,    int offset,    int length){
    }
  }
).interceptor(new AsyncIOInterceptor(){
    @Override public void prePayload(    AtmosphereResponse response,    String data){
    }
    @Override public void prePayload(    AtmosphereResponse response,    byte[] data){
    }
    @Override public void prePayload(    AtmosphereResponse response,    byte[] data,    int offset,    int length){
    }
    @Override public void transformPayload(    ByteArrayOutputStream response,    String data){
    }
    @Override public void transformPayload(    ByteArrayOutputStream response,    byte[] data){
    }
    @Override public void transformPayload(    ByteArrayOutputStream response,    byte[] data,    int offset,    int length){
    }
    @Override public void postPayload(    AtmosphereResponse response,    String data){
    }
    @Override public void postPayload(    AtmosphereResponse response,    byte[] data){
      s.get().append("-yoyo");
    }
    @Override public void postPayload(    AtmosphereResponse response,    byte[] data,    int offset,    int length){
    }
  }
)).write("test");
  assertEquals(s.get().toString(),"test-yoyo");
}
