{
  String upgrade=req.getHeader("Connection");
  if (upgrade != null && upgrade.equalsIgnoreCase("Upgrade") && !supportWebSocket()) {
    res.setStatus(501);
    res.addHeader("X-Atmosphere-error","Websocket protocol not supported");
    res.flushBuffer();
    return new Action();
  }
  if (config.handlers().isEmpty()) {
    logger.error("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
    throw new ServletException("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
  }
  if (supportSession()) {
    HttpSession session=req.getSession(true);
    if (session.getMaxInactiveInterval() == DEFAULT_SESSION_TIMEOUT) {
      session.setMaxInactiveInterval(-1);
    }
  }
  req.setAttribute(AtmosphereServlet.SUPPORT_SESSION,supportSession());
  AtmosphereHandlerWrapper handlerWrapper=map(req);
  AtmosphereResourceImpl resource=new AtmosphereResourceImpl(config,handlerWrapper.broadcaster,req,res,this);
  handlerWrapper.broadcaster.getBroadcasterConfig().setAtmosphereConfig(config);
  req.setAttribute(AtmosphereServlet.ATMOSPHERE_RESOURCE,resource);
  req.setAttribute(AtmosphereServlet.ATMOSPHERE_HANDLER,handlerWrapper.atmosphereHandler);
  try {
    handlerWrapper.atmosphereHandler.onRequest(resource);
  }
 catch (  IOException t) {
    resource.onThrowable(t);
    throw t;
  }
  config.mapBroadcasterToAtmosphereHandler(resource.getBroadcaster(),handlerWrapper);
  if (resource.getAtmosphereResourceEvent().isSuspended()) {
    req.setAttribute(MAX_INACTIVE,System.currentTimeMillis());
    aliveRequests.put(req,resource);
  }
  return resource.action();
}
