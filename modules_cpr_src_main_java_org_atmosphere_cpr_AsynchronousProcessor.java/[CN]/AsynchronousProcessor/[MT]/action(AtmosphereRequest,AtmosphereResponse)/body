{
  if (Utils.webSocketEnabled(req) && !supportWebSocket()) {
    res.setStatus(501);
    res.addHeader(X_ATMOSPHERE_ERROR,"Websocket protocol not supported");
    res.flushBuffer();
    return new Action();
  }
  if (config.handlers().isEmpty()) {
    logger.error("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @AtmosphereHandlerService");
    throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @AtmosphereHandlerService");
  }
  if (res.request() == null) {
    res.request(req);
  }
  if (supportSession()) {
    HttpSession session=req.getSession(true);
    SessionTimeoutSupport.setupTimeout(session);
  }
  req.setAttribute(FrameworkConfig.SUPPORT_SESSION,supportSession());
  AtmosphereHandlerWrapper handlerWrapper=mapper.map(req,config.handlers());
  Broadcaster b=handlerWrapper.broadcaster;
  if (b.isDestroyed()) {
    BroadcasterFactory f=BroadcasterFactory.getDefault();
synchronized (f) {
      f.remove(b,b.getID());
      try {
        handlerWrapper.broadcaster=f.get(b.getID());
      }
 catch (      IllegalStateException ex) {
        logger.trace("",ex);
        handlerWrapper.broadcaster=f.lookup(b.getID(),true);
      }
    }
  }
  AtmosphereResourceImpl resource=(AtmosphereResourceImpl)req.getAttribute(FrameworkConfig.INJECTED_ATMOSPHERE_RESOURCE);
  if (resource == null) {
    resource=(AtmosphereResourceImpl)AtmosphereResourceFactory.getDefault().create(config,handlerWrapper.broadcaster,res,this,handlerWrapper.atmosphereHandler);
  }
 else {
    try {
      resource.getBroadcaster();
    }
 catch (    IllegalStateException ex) {
      resource.setBroadcaster(handlerWrapper.broadcaster);
    }
    resource.atmosphereHandler(handlerWrapper.atmosphereHandler);
  }
  req.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE,resource);
  req.setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER,handlerWrapper.atmosphereHandler);
  Action a=invokeInterceptors(config.framework().interceptors(),resource);
  if (a == null || a.type() != Action.TYPE.CONTINUE) {
    return a;
  }
  a=invokeInterceptors(handlerWrapper.interceptors,resource);
  if (a == null || a.type() != Action.TYPE.CONTINUE) {
    return a;
  }
  try {
    handlerWrapper.atmosphereHandler.onRequest(resource);
  }
 catch (  IOException t) {
    resource.onThrowable(t);
    throw t;
  }
  postInterceptors(handlerWrapper.interceptors,resource);
  postInterceptors(config.framework().interceptors(),resource);
  if (trackActiveRequest && resource.getAtmosphereResourceEvent().isSuspended() && req.getAttribute(FrameworkConfig.CANCEL_SUSPEND_OPERATION) == null) {
    req.setAttribute(MAX_INACTIVE,System.currentTimeMillis());
    aliveRequests.put(req,resource);
  }
  return resource.action();
}
