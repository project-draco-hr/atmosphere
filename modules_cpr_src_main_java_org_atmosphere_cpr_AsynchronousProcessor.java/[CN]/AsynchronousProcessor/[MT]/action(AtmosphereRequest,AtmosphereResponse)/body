{
  if (Utils.webSocketEnabled(req) && !supportWebSocket()) {
    res.setStatus(501);
    res.addHeader(X_ATMOSPHERE_ERROR,"Websocket protocol not supported");
    res.flushBuffer();
    return new Action();
  }
  if (config.handlers().isEmpty()) {
    logger.error("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
    throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it insides META-INF/atmosphere.xml");
  }
  if (supportSession()) {
    HttpSession session=req.getSession(true);
    SessionTimeoutSupport.setupTimeout(session);
  }
  req.setAttribute(FrameworkConfig.SUPPORT_SESSION,supportSession());
  AtmosphereHandlerWrapper handlerWrapper=map(req);
  Broadcaster b=handlerWrapper.broadcaster;
  if (b.isDestroyed()) {
synchronized (handlerWrapper) {
      config.getBroadcasterFactory().remove(b,b.getID());
      handlerWrapper.broadcaster=config.getBroadcasterFactory().get(b.getID());
    }
  }
  AtmosphereResourceImpl resource=(AtmosphereResourceImpl)req.getAttribute(FrameworkConfig.INJECTED_ATMOSPHERE_RESOURCE);
  if (resource == null) {
    resource=new AtmosphereResourceImpl(config,handlerWrapper.broadcaster,req,res,this,handlerWrapper.atmosphereHandler);
  }
 else {
    resource.setBroadcaster(handlerWrapper.broadcaster).atmosphereHandler(handlerWrapper.atmosphereHandler);
  }
  req.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE,resource);
  req.setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER,handlerWrapper.atmosphereHandler);
  LinkedList<AtmosphereInterceptor> c=config.framework().interceptors();
  Action a;
  for (  AtmosphereInterceptor arc : c) {
    a=arc.inspect(resource);
    if (a == null || a.type() != Action.TYPE.CONTINUE) {
      logger.trace("Interceptor {} interrupted the dispatch with {}",arc,a);
      return a;
    }
  }
  try {
    handlerWrapper.atmosphereHandler.onRequest(resource);
  }
 catch (  IOException t) {
    resource.onThrowable(t);
    throw t;
  }
  if (trackActiveRequest && resource.getAtmosphereResourceEvent().isSuspended() && req.getAttribute(FrameworkConfig.CANCEL_SUSPEND_OPERATION) == null) {
    req.setAttribute(MAX_INACTIVE,System.currentTimeMillis());
    aliveRequests.put(req,resource);
  }
  return resource.action();
}
