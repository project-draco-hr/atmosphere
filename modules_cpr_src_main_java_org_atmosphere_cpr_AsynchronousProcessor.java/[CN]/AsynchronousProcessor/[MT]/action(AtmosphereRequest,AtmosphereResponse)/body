{
  if (!Utils.properProtocol(req)) {
    logger.debug("Invalid request state.");
    res.setStatus(501);
    res.addHeader(X_ATMOSPHERE_ERROR,"Websocket protocol not supported");
    res.flushBuffer();
    return new Action();
  }
  if (Utils.webSocketEnabled(req) && !supportWebSocket()) {
    logger.warn("Websocket protocol not supported");
    res.setStatus(501);
    res.addHeader(X_ATMOSPHERE_ERROR,"Websocket protocol not supported");
    res.flushBuffer();
    return new Action();
  }
  if (isServlet30 && (!req.isAsyncSupported() && !Utils.closeMessage(req))) {
    logger.error("Invalid request state. <async-supported>true</async-supported> must be defined for ALL Servlets and Filters  declarations in web.xml {}",req.getRequestURL().toString());
    res.setStatus(501);
    res.addHeader(X_ATMOSPHERE_ERROR,"<async-supported>true</async-supported> must be defined for ALL Servlets and Filters  declarations in web.xml.");
    res.flushBuffer();
    return new Action();
  }
  if (config.handlers().isEmpty()) {
    logger.error("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @___Service");
    throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @___Service");
  }
  if (res.request() == null) {
    res.request(req);
  }
  if (supportSession()) {
    HttpSession s=req.getSession(config.getInitParameter(PROPERTY_SESSION_CREATE,true));
    if (s != null && s.isNew()) {
      s.setAttribute(FrameworkConfig.BROADCASTER_FACTORY,config.getBroadcasterFactory());
    }
  }
  req.setAttribute(FrameworkConfig.SUPPORT_SESSION,supportSession());
  int tracing=0;
  AtmosphereHandlerWrapper handlerWrapper=map(req);
  if (config.getBroadcasterFactory() == null) {
    logger.error("Atmosphere is misconfigured and will not work. BroadcasterFactory is null");
    return Action.CANCELLED;
  }
  AtmosphereResourceImpl resource=configureWorkflow(null,handlerWrapper,req,res);
  String v=req.getHeader(HeaderConfig.X_ATMO_BINARY);
  if (v != null) {
    resource.forceBinaryWrite(Boolean.valueOf(v));
  }
  Action a=invokeInterceptors(handlerWrapper.interceptors,resource,tracing);
  if (a.type() != Action.TYPE.CONTINUE && a.type() != Action.TYPE.SKIP_ATMOSPHEREHANDLER) {
    return a;
  }
  if (req.getAttribute(FrameworkConfig.NEW_MAPPING) != null) {
    req.removeAttribute(FrameworkConfig.NEW_MAPPING);
    handlerWrapper=map(req);
    if (handlerWrapper == null) {
      logger.debug("Remap {}",resource.uuid());
      throw new AtmosphereMappingException("Invalid state. No AtmosphereHandler maps request for " + req.getRequestURI());
    }
    resource=configureWorkflow(resource,handlerWrapper,req,res);
    resource.setBroadcaster(handlerWrapper.broadcaster);
  }
  boolean skipAtmosphereHandler=req.getAttribute(SKIP_ATMOSPHEREHANDLER.name()) != null ? (Boolean)req.getAttribute(SKIP_ATMOSPHEREHANDLER.name()) : Boolean.FALSE;
  if (!skipAtmosphereHandler) {
    try {
      handlerWrapper.atmosphereHandler.onRequest(resource);
    }
 catch (    IOException t) {
      resource.onThrowable(t);
      throw t;
    }
  }
  postInterceptors(handlerWrapper.interceptors,resource);
  Action action=resource.action();
  if (supportSession() && allowSessionTimeoutRemoval() && action.type().equals(Action.TYPE.SUSPEND)) {
    SessionTimeoutSupport.setupTimeout(config,req.getSession(config.getInitParameter(ApplicationConfig.PROPERTY_SESSION_CREATE,true)));
  }
  logger.trace("Action for {} was {} with transport " + req.getHeader(X_ATMOSPHERE_TRANSPORT),req.resource() != null ? req.resource().uuid() : "null",action);
  return action;
}
