{
  JClassType baseType=typeOracle.getType(typeName);
  String packageName=baseType.getPackage().getName();
  StringBuffer buffer=new StringBuffer();
  buffer.append("public Object deSerialize(JSONValue jsonValue, String className) throws JSONException{");
  buffer.append("\n");
  buffer.append("if(jsonValue instanceof JSONNull){");
  buffer.append("\n");
  buffer.append("return null;");
  buffer.append("\n");
  buffer.append("}");
  buffer.append("\n");
  buffer.append("if(!(jsonValue instanceof JSONObject)){");
  buffer.append("\n");
  buffer.append("throw new IncompatibleObjectException();");
  buffer.append("\n");
  buffer.append("}");
  buffer.append("\n");
  String baseTypeName=baseType.getSimpleSourceName();
  buffer.append("JSONObject jsonObject=(JSONObject)jsonValue;");
  buffer.append("\n");
  buffer.append(baseTypeName + " mainResult=new " + baseTypeName+ "();");
  buffer.append("\n");
  buffer.append("Serializer serializer;");
  buffer.append("\n");
  buffer.append("JSONArray inputJsonArray=null;");
  buffer.append("\n");
  buffer.append("int inpJsonArSize=0;");
  buffer.append("\n");
  buffer.append("JSONValue fieldJsonValue=null;");
  buffer.append("\n");
  List<JField> allFields=new ArrayList<JField>();
  JField[] fields=baseType.getFields();
  for (  JField field : fields) {
    if (!field.isStatic() && !field.isTransient()) {
      allFields.add(field);
    }
  }
  if (baseType.isAssignableTo(typeOracle.getType("com.kfuntak.gwt.json.serialization.client.JsonSerializable"))) {
    boolean flag=true;
    JClassType superClassType=baseType;
    while (flag) {
      superClassType=superClassType.getSuperclass();
      if (superClassType.isAssignableTo(typeOracle.getType("com.kfuntak.gwt.json.serialization.client.JsonSerializable"))) {
        JField[] subClassFields=superClassType.getFields();
        for (        JField subClassField : subClassFields) {
          if (!subClassField.isStatic() && !subClassField.isTransient()) {
            allFields.add(subClassField);
          }
        }
      }
 else {
        flag=false;
      }
    }
  }
  fields=new JField[allFields.size()];
  allFields.toArray(fields);
  for (  JField field : fields) {
    JType fieldType=field.getType();
    String fieldName=field.getName();
    String fieldNameForGS=getNameForGS(fieldName);
    buffer.append("fieldJsonValue=jsonObject.get(\"" + fieldName + "\");");
    buffer.append("\n");
    if (fieldType.isPrimitive() != null) {
      JPrimitiveType fieldPrimitiveType=(JPrimitiveType)fieldType;
      JClassType fieldBoxedType=typeOracle.getType(fieldPrimitiveType.getQualifiedBoxedSourceName());
      if (fieldBoxedType.getQualifiedSourceName().equals("java.lang.Short")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getShort(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldBoxedType.getQualifiedSourceName().equals("java.lang.Byte")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getByte(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldBoxedType.getQualifiedSourceName().equals("java.lang.Long")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getLong(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldBoxedType.getQualifiedSourceName().equals("java.lang.Integer")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getInt(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldBoxedType.getQualifiedSourceName().equals("java.lang.Float")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getFloat(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldBoxedType.getQualifiedSourceName().equals("java.lang.Double")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getDouble(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldBoxedType.getQualifiedSourceName().equals("java.lang.Boolean")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getBoolean(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldBoxedType.getQualifiedSourceName().equals("java.lang.Character")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getShort(fieldJsonValue));");
        buffer.append("\n");
      }
    }
 else {
      JClassType fieldClassType=(JClassType)fieldType;
      if (fieldClassType.getQualifiedSourceName().equals("java.lang.Short")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getShort(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldClassType.getQualifiedSourceName().equals("java.lang.Byte")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getByte(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldClassType.getQualifiedSourceName().equals("java.lang.Long")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getLong(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldClassType.getQualifiedSourceName().equals("java.lang.Integer")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getInt(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldClassType.getQualifiedSourceName().equals("java.lang.Float")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getFloat(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldClassType.getQualifiedSourceName().equals("java.lang.Double")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getDouble(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldClassType.getQualifiedSourceName().equals("java.lang.Boolean")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getBoolean(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldClassType.getQualifiedSourceName().equals("java.lang.Character")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getShort(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldClassType.getQualifiedSourceName().equals("java.util.Date")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getDate(fieldJsonValue));");
        buffer.append("\n");
      }
 else       if (fieldClassType.isAssignableTo(typeOracle.getType("com.kfuntak.gwt.json.serialization.client.JsonSerializable"))) {
        importsList.add(fieldClassType.getQualifiedSourceName());
        buffer.append("serializer = GWT.create(Serializer.class);");
        buffer.append("\n");
        buffer.append("mainResult.set" + fieldNameForGS + "(("+ fieldClassType.getSimpleSourceName()+ ")serializer.deSerialize(fieldJsonValue, \""+ fieldClassType.getQualifiedSourceName()+ "\"));");
        buffer.append("\n");
      }
 else       if (fieldClassType.isAssignableTo(typeOracle.getType("java.util.Collection"))) {
        deserializeCollection(buffer,fieldClassType,fieldNameForGS,fieldName);
      }
 else       if (fieldClassType.getQualifiedSourceName().equals("java.lang.String")) {
        buffer.append("mainResult.set" + fieldNameForGS + "(DeserializerHelper.getString(fieldJsonValue));");
        buffer.append("\n");
      }
    }
  }
  buffer.append("return mainResult;");
  buffer.append("\n");
  buffer.append("}");
  buffer.append("\n");
  return buffer.toString();
}
