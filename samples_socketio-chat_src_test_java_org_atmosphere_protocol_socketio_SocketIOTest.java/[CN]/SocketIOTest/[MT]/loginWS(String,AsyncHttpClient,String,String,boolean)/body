{
  final CountDownLatch l=new CountDownLatch(2);
  WebSocketWrapper wrapper=new WebSocketWrapper();
  wrapper.setListener(new WebSocketResponseListener(wrapper){
    @Override public void onClose(){
      System.err.println("onClose called");
    }
    @Override public void notify(    String message){
      log.info("WS login [" + name + "] CountDown="+ l.getCount()+ "  message received = "+ message);
      Assert.assertNotNull(message);
      List<SocketIOPacketImpl> messages=null;
      try {
        messages=SocketIOPacketImpl.parse(message);
      }
 catch (      SocketIOException e1) {
        e1.printStackTrace();
      }
      if (messages == null || messages.isEmpty()) {
        return;
      }
      for (      SocketIOPacketImpl msg : messages) {
        String data=msg.toString();
switch (msg.getFrameType()) {
case ACK:
          if (data.contains("6:::1+")) {
            l.countDown();
            if (usernameUnique) {
              Assert.assertTrue(data.contains("6:::1+[false]"));
            }
 else {
              Assert.assertTrue(data.contains("6:::1+[true]"));
              l.countDown();
            }
          }
        break;
case HEARTBEAT:
case DISCONNECT:
      break;
case EVENT:
    if (data.contains("5:::{\"name\":\"nicknames\",\"args\":[{")) {
      l.countDown();
      Assert.assertTrue(data.contains("5:::{\"name\":\"nicknames\",\"args\":[{"));
      Assert.assertTrue(data.contains("\"" + username + "\""));
    }
  break;
default :
}
}
}
}
);
wrapper=connectWS(name,client,url,wrapper);
sendMessage(wrapper.websocket,"5:1+::{\"name\":\"nickname\",\"args\":[\"" + username + "\"]}");
if (!l.await(30,TimeUnit.SECONDS)) {
throw new RuntimeException("Timeout out Login WS for user=[" + username + "]");
}
return wrapper;
}
