{
  if (Utils.webSocketMessage(r))   return Action.CONTINUE;
  final AtmosphereResponse response=r.getResponse();
  final AtmosphereRequest request=r.getRequest();
  String accept=request.getHeader("Accept") == null ? "text/plain" : request.getHeader("Accept").trim();
  if (r.transport().equals(AtmosphereResource.TRANSPORT.SSE) || contentType.equalsIgnoreCase(accept)) {
    super.inspect(r);
    r.addEventListener(new P(response));
    AsyncIOWriter writer=response.getAsyncIOWriter();
    if (AtmosphereInterceptorWriter.class.isAssignableFrom(writer.getClass())) {
      AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptorAdapter(){
        private boolean padding(){
          if (!r.isSuspended()) {
            return writePadding(response);
          }
          return false;
        }
        @Override public void prePayload(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
          boolean noPadding=padding();
          if (!noPadding || r.getRequest().getAttribute(CALLBACK_JAVASCRIPT_PROTOCOL) != null) {
            response.write("data:",true);
          }
        }
        @Override public void postPayload(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
          if (r.isSuspended() || r.getRequest().getAttribute(CALLBACK_JAVASCRIPT_PROTOCOL) != null || r.getRequest().getAttribute(CONTAINER_RESPONSE) != null) {
            response.write(END,true);
          }
          String ua=r.getRequest().getHeader("User-Agent");
          if (ua != null && ua.contains("MSIE")) {
            try {
              response.flushBuffer();
            }
 catch (            IOException e) {
              logger.trace("",e);
            }
            r.resume();
          }
        }
      }
);
    }
 else {
      logger.warn("Unable to apply {}. Your AsyncIOWriter must implement {}",getClass().getName(),AtmosphereInterceptorWriter.class.getName());
    }
  }
  return Action.CONTINUE;
}
