{
  final AtmosphereResponse response=r.getResponse();
  if (r.transport().equals(AtmosphereResource.TRANSPORT.SSE)) {
    String contentType=response.getContentType();
    response.setContentType("text/event-stream");
    response.setCharacterEncoding("utf-8");
    PrintWriter writer=null;
    try {
      writer=response.getWriter();
    }
 catch (    IOException e) {
      logger.trace("",e);
    }
    writer.print(whitespace);
    writer.flush();
    response.setContentType(contentType);
    response.asyncIOWriter(new AsyncIOWriterAdapter(){
      @Override public AsyncIOWriter redirect(      String location) throws IOException {
        response.sendRedirect(location);
        return this;
      }
      @Override public AsyncIOWriter writeError(      int errorCode,      String message) throws IOException {
        response.sendError(errorCode);
        return this;
      }
      @Override public AsyncIOWriter write(      String data) throws IOException {
        response.write("data:" + data + "\n\n");
        return this;
      }
      @Override public AsyncIOWriter write(      byte[] data) throws IOException {
        response.write("data:").write(data).write("\n\n");
        return this;
      }
      @Override public AsyncIOWriter write(      byte[] data,      int offset,      int length) throws IOException {
        response.write("data:").write(data,offset,length).write("\n\n");
        return this;
      }
      @Override public void close() throws IOException {
        response.closeStreamOrWriter();
      }
      @Override public AsyncIOWriter flush() throws IOException {
        response.flushBuffer();
        return this;
      }
    }
);
  }
  return Action.CONTINUE;
}
