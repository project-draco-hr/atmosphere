{
  final AtmosphereResponse response=r.getResponse();
  r.getRequest().setAttribute(PROPERTY_USE_STREAM,true);
  if (r.transport().equals(AtmosphereResource.TRANSPORT.SSE)) {
    r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
      @Override public void onSuspend(      AtmosphereResourceEvent event){
        writePadding(response);
      }
    }
);
    response.asyncIOWriter(new AsyncIOWriterAdapter(){
      @Override public AsyncIOWriter redirect(      String location) throws IOException {
        response.sendRedirect(location);
        return this;
      }
      @Override public AsyncIOWriter writeError(      int errorCode,      String message) throws IOException {
        if (errorCode == 406) {
          logger.warn("Status code 406: Make sure you aren't setting any @Produces " + "value if you are using Jersey and instead set the @Suspend(content-type=\"...\" value");
        }
        response.sendError(errorCode);
        return this;
      }
      @Override public AsyncIOWriter write(      String data) throws IOException {
        if (!r.isSuspended()) {
          writePadding(response);
        }
        response.write("data:" + data + "\n\n");
        return this;
      }
      @Override public AsyncIOWriter write(      byte[] data) throws IOException {
        if (!r.isSuspended()) {
          writePadding(response);
        }
        response.write("data:").write(data).write("\n\n");
        return this;
      }
      @Override public AsyncIOWriter write(      byte[] data,      int offset,      int length) throws IOException {
        if (!r.isSuspended()) {
          writePadding(response);
        }
        response.write("data:").write(data,offset,length).write("\n\n");
        return this;
      }
      @Override public void close() throws IOException {
        response.closeStreamOrWriter();
      }
      @Override public AsyncIOWriter flush() throws IOException {
        response.flushBuffer();
        return this;
      }
    }
);
  }
  return Action.CONTINUE;
}
