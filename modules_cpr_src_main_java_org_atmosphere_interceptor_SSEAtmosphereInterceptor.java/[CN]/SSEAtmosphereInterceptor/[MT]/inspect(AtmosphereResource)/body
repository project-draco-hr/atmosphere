{
  final AtmosphereResponse response=r.getResponse();
  if (r.transport().equals(AtmosphereResource.TRANSPORT.SSE)) {
    super.inspect(r);
    r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
      @Override public void onSuspend(      AtmosphereResourceEvent event){
        writePadding(response);
      }
    }
);
    AsyncIOWriter writer=response.getAsyncIOWriter();
    if (AtmosphereInterceptorWriter.class.isAssignableFrom(writer.getClass())) {
      AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptor(){
        private void padding(){
          if (!r.isSuspended()) {
            writePadding(response);
            r.getRequest().setAttribute("paddingWritten","true");
          }
        }
        @Override public void intercept(        AtmosphereResponse response,        String data){
          padding();
          response.write("data:" + data + "\n\n");
        }
        @Override public void intercept(        AtmosphereResponse response,        byte[] data){
          padding();
          response.write("data:").write(data).write("\n\n");
        }
        @Override public void intercept(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
          padding();
          response.write("data:").write(data,offset,length).write("\n\n");
        }
      }
);
    }
 else {
      throw new IllegalStateException("AsyncIOWriter must be an instance of " + AsyncIOWriter.class.getName());
    }
  }
  return Action.CONTINUE;
}
