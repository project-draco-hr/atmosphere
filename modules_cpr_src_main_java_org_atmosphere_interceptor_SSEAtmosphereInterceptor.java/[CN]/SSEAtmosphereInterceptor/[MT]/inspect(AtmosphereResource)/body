{
  final AtmosphereResponse response=r.getResponse();
  if (r.transport().equals(AtmosphereResource.TRANSPORT.SSE)) {
    r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
      @Override public void onSuspend(      AtmosphereResourceEvent event){
        response.setContentType("text/event-stream");
        response.setCharacterEncoding("utf-8");
        OutputStream stream=null;
        try {
          stream=response.getOutputStream();
        }
 catch (        IOException e) {
          logger.trace("",e);
        }
        try {
          stream.write(padding);
          stream.flush();
        }
 catch (        IOException ex) {
          logger.warn("SSE may not work",ex);
        }
      }
    }
);
    response.asyncIOWriter(new AsyncIOWriterAdapter(){
      @Override public AsyncIOWriter redirect(      String location) throws IOException {
        response.sendRedirect(location);
        return this;
      }
      @Override public AsyncIOWriter writeError(      int errorCode,      String message) throws IOException {
        if (errorCode == 406 && r.getAtmosphereConfig().framework().is) {
          logger.warn("Status code 406: Make sure you aren't setting any @Produces " + "value if you are using Jersey and instead set the @Suspend(content-type=\"...\" value");
        }
        response.sendError(errorCode);
        return this;
      }
      @Override public AsyncIOWriter write(      String data) throws IOException {
        response.write("data:" + data + "\n\n");
        return this;
      }
      @Override public AsyncIOWriter write(      byte[] data) throws IOException {
        response.write("data:").write(data).write("\n\n");
        return this;
      }
      @Override public AsyncIOWriter write(      byte[] data,      int offset,      int length) throws IOException {
        response.write("data:").write(data,offset,length).write("\n\n");
        return this;
      }
      @Override public void close() throws IOException {
        response.closeStreamOrWriter();
      }
      @Override public AsyncIOWriter flush() throws IOException {
        response.flushBuffer();
        return this;
      }
    }
);
  }
  return Action.CONTINUE;
}
