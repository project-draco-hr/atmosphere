{
  boolean notifyListeners=true;
  boolean lostCandidate=false;
  if (token.resource == null)   throw new NullPointerException();
  final AtmosphereResourceEventImpl event=(AtmosphereResourceEventImpl)token.resource.getAtmosphereResourceEvent();
  final AtmosphereResourceImpl r=AtmosphereResourceImpl.class.cast(token.resource);
  final boolean willBeResumed=Utils.resumableTransport(r.transport());
  List<AtmosphereResourceEventListener> listeners=willBeResumed ? new ArrayList() : EMPTY_LISTENERS;
  final AtmosphereRequest request=r.getRequest(false);
  try {
    event.setMessage(token.msg);
    if (!isAtmosphereResourceValid(r)) {
      logger.trace("AtmosphereResource {} state is invalid for Broadcaster {}. Message will be cached",r.uuid(),name);
      removeAtmosphereResource(r,false);
      return;
    }
    bc.getBroadcasterCache().clearCache(getID(),r != null ? r.uuid() : BroadcasterCache.NULL,token.cache);
    try {
      request.setAttribute(getID(),token.future);
      request.setAttribute(MAX_INACTIVE,System.currentTimeMillis());
      request.setAttribute(usingTokenIdForAttribute,token);
      if (willBeResumed && !r.atmosphereResourceEventListener().isEmpty()) {
        listeners.addAll(r.atmosphereResourceEventListener());
      }
      prepareInvokeOnStateChange(r,event);
    }
 catch (    Throwable t) {
      logger.debug("Invalid AtmosphereResource state {}. The connection has been remotely" + " closed and message {} will be added to the configured BroadcasterCache for later retrieval",r.uuid(),event.getMessage());
      logger.trace("If you are using Tomcat 7.0.22 and lower, you're most probably hitting http://is.gd/NqicFT");
      logger.trace("ApplicationConfig.CACHE_MESSAGE_ON_IO_FLUSH_EXCEPTION {}",cacheOnIOFlushException,t);
      lostCandidate=cacheOnIOFlushException ? cacheOnIOFlushException : cacheMessageOnIOException(t);
      removeAtmosphereResource(r,false);
      r.removeFromAllBroadcasters();
      event.setCancelled(true);
      event.setThrowable(t);
      r.setIsInScope(false);
      return;
    }
    try {
      request.setAttribute(FrameworkConfig.MESSAGE_WRITTEN,"true");
    }
 catch (    NullPointerException ex) {
      logger.trace("NPE after the message has been written for {}",r.uuid());
    }
  }
  finally {
    if (notifyListeners) {
      if (willBeResumed) {
        event.setMessage(token.msg);
        for (        AtmosphereResourceEventListener e : listeners) {
          e.onBroadcast(event);
        }
      }
 else       if (!event.isResumedOnTimeout()) {
        r.notifyListeners();
      }
    }
    if (token.lastBroadcasted()) {
      notifyBroadcastListener();
    }
    if (token.future != null)     token.future.done();
    if (lostCandidate) {
      cacheLostMessage(r,token,true);
    }
    try {
      request.removeAttribute(getID());
      request.removeAttribute(usingTokenIdForAttribute);
    }
 catch (    NullPointerException ex) {
      logger.trace("NPE after the message has been written for {}",r.uuid());
    }
    token.destroy();
  }
}
