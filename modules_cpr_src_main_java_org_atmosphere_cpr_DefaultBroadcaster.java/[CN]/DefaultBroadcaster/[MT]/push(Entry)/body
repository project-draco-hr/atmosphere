{
  String prevMessage=msg.message.toString();
  if (!delayedBroadcast.isEmpty()) {
    Iterator<Entry> i=delayedBroadcast.iterator();
    StringBuilder b=new StringBuilder();
    while (i.hasNext()) {
      Entry e=i.next();
      if (!(e.future instanceof BroadcasterFuture)) {
        e.future.cancel(true);
      }
      try {
        if (e.message instanceof String && msg.message instanceof String) {
          b.append(e.message);
        }
 else {
          push(e);
        }
      }
  finally {
        i.remove();
        if (e.future instanceof BroadcasterFuture) {
          ((BroadcasterFuture)e.future).done();
        }
      }
    }
    if (b.length() > 0) {
      msg.message=b.append(msg.message).toString();
    }
  }
  if (resources.isEmpty()) {
    trackBroadcastMessage(null,msg.message);
  }
  if (msg.multipleAtmoResources == null) {
    for (    AtmosphereResource<?,?> r : resources) {
      push(r,msg.message);
    }
  }
 else   if (msg.multipleAtmoResources instanceof AtmosphereResource<?,?>) {
    push((AtmosphereResource<?,?>)msg.multipleAtmoResources,msg.message);
  }
 else   if (msg.multipleAtmoResources instanceof Set) {
    Set<AtmosphereResource<?,?>> sub=(Set<AtmosphereResource<?,?>>)msg.multipleAtmoResources;
    for (    AtmosphereResource<?,?> r : sub) {
      push(r,msg.message);
    }
  }
  msg.message=prevMessage;
}
