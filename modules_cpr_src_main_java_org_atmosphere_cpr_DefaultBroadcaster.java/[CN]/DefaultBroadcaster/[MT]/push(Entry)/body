{
  if (destroyed.get()) {
    return;
  }
  String prevMessage=entry.message.toString();
  if (!delayedBroadcast.isEmpty()) {
    Iterator<Entry> i=delayedBroadcast.iterator();
    StringBuilder b=new StringBuilder();
    while (i.hasNext()) {
      Entry e=i.next();
      e.future.cancel(true);
      try {
        if (e.message instanceof String && entry.message instanceof String) {
          b.append(e.message);
        }
 else {
          push(e);
        }
      }
  finally {
        i.remove();
      }
    }
    if (b.length() > 0) {
      entry.message=b.append(entry.message).toString();
    }
  }
  if (resources.isEmpty()) {
    trackBroadcastMessage(null,entry.message);
    if (entry.future != null) {
      entry.future.done();
    }
    return;
  }
  Object finalMsg=translate(entry.message);
  entry.message=finalMsg;
  try {
    if (entry.multipleAtmoResources == null) {
      for (      AtmosphereResource<?,?> r : resources) {
        finalMsg=perRequestFilter(r,entry);
        if (entry.writeLocally) {
          queueWriteIO(r,finalMsg,entry);
        }
      }
    }
 else     if (entry.multipleAtmoResources instanceof AtmosphereResource<?,?>) {
      finalMsg=perRequestFilter((AtmosphereResource<?,?>)entry.multipleAtmoResources,entry);
      if (entry.writeLocally) {
        queueWriteIO((AtmosphereResource<?,?>)entry.multipleAtmoResources,finalMsg,entry);
      }
    }
 else     if (entry.multipleAtmoResources instanceof Set) {
      Set<AtmosphereResource<?,?>> sub=(Set<AtmosphereResource<?,?>>)entry.multipleAtmoResources;
      for (      AtmosphereResource<?,?> r : sub) {
        finalMsg=perRequestFilter(r,entry);
        if (entry.writeLocally) {
          queueWriteIO(r,finalMsg,entry);
        }
      }
    }
    entry.message=prevMessage;
  }
 catch (  InterruptedException ex) {
    logger.debug(ex.getMessage(),ex);
  }
}
