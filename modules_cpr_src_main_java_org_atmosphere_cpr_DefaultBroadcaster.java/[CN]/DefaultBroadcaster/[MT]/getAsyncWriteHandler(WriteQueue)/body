{
  return new Runnable(){
    public void run(){
      while (!isDestroyed()) {
        AsyncWriteToken token=null;
        try {
          token=writeQueue.queue.poll(waitTime,TimeUnit.MILLISECONDS);
          if (token == null && !outOfOrderBroadcastSupported.get()) {
synchronized (writeQueue) {
              if (writeQueue.queue.size() == 0) {
                writeQueue.monitored.set(false);
                writeQueues.remove(writeQueue.uuid);
                return;
              }
            }
          }
 else           if (token == null) {
            return;
          }
        }
 catch (        InterruptedException ex) {
          logger.trace("{} got interrupted for Broadcaster {}",Thread.currentThread().getName(),getID());
          logger.trace("",ex);
          return;
        }
 finally {
          if (!bc.getAsyncWriteService().isShutdown() && outOfOrderBroadcastSupported.get()) {
            bc.getAsyncWriteService().submit(this);
          }
        }
        if (token != null) {
synchronized (token.resource) {
            try {
              logger.trace("About to write to {}",token.resource);
              executeAsyncWrite(token);
            }
 catch (            Throwable ex) {
              if (!started.get() || destroyed.get()) {
                logger.trace("Failed to execute a write operation. Broadcaster is destroyed or not yet started for Broadcaster {}",getID(),ex);
                return;
              }
 else {
                if (token != null) {
                  logger.warn("This message {} will be lost for AtmosphereResource {}, adding it to the BroadcasterCache",token.originalMessage,token.resource != null ? token.resource.uuid() : "null");
                  cacheLostMessage(token.resource,token,true);
                }
                logger.debug("Failed to execute a write operation for Broadcaster {}",getID(),ex);
              }
            }
 finally {
              if (!bc.getAsyncWriteService().isShutdown() && outOfOrderBroadcastSupported.get()) {
                return;
              }
            }
          }
        }
      }
    }
  }
;
}
