{
  final AtomicBoolean init=new AtomicBoolean(true);
  return new Runnable(){
    public void run(){
      while (init.getAndSet(false) || (!isDestroyed() && !outOfOrderBroadcastSupported.get())) {
        Entry msg=null;
        try {
          msg=messages.poll(waitTime,TimeUnit.MILLISECONDS);
          if (msg == null) {
            dispatchThread.decrementAndGet();
            return;
          }
        }
 catch (        InterruptedException ex) {
          logger.trace("{} got interrupted for Broadcaster {}",Thread.currentThread().getName(),getID());
          logger.trace("",ex);
          return;
        }
 finally {
          if (outOfOrderBroadcastSupported.get()) {
            init.set(true);
            bc.getExecutorService().submit(this);
          }
        }
        try {
          logger.trace("{} is about to broadcast {}",getID(),msg);
          push(msg);
        }
 catch (        Throwable ex) {
          if (!started.get() || destroyed.get()) {
            logger.trace("Failed to submit broadcast handler runnable on shutdown for Broadcaster {}",getID(),ex);
            return;
          }
 else {
            logger.warn("This message {} will be lost",msg);
            logger.debug("Failed to submit broadcast handler runnable to for Broadcaster {}",getID(),ex);
          }
        }
      }
    }
  }
;
}
