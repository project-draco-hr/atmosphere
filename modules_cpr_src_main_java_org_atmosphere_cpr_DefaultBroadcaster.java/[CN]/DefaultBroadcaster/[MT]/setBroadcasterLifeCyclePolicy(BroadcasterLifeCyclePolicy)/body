{
  this.lifeCyclePolicy=lifeCyclePolicy;
  logger.debug("{} new lifecycle policy: {}",name,lifeCyclePolicy.getLifeCyclePolicy().name());
  if (currentLifecycleTask != null) {
    currentLifecycleTask.cancel(false);
  }
  if (bc != null && bc.getScheduledExecutorService() == null) {
    logger.error("No Broadcaster's SchedulerExecutorService has been configured on {}. BroadcasterLifeCyclePolicy won't work.",getID());
    return;
  }
  if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
    recentActivity.set(false);
    int time=lifeCyclePolicy.getTimeout();
    if (time == -1) {
      throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
    }
    final AtomicReference<Future<?>> ref=new AtomicReference<Future<?>>();
    currentLifecycleTask=bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable(){
      @Override public void run(){
        try {
          if (recentActivity.getAndSet(false)) {
            return;
          }
 else           if (resources.isEmpty()) {
            if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) {
              notifyEmptyListener();
              notifyIdleListener();
              releaseExternalResources();
              logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy to Broadcaster {}",getID());
            }
 else             if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
              notifyEmptyListener();
              notifyIdleListener();
              destroy(false);
              logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy to Broadcaster {}",getID());
            }
          }
 else           if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME) {
            notifyIdleListener();
            destroy(true);
            logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_RESUME policy to Broadcaster {}",getID());
          }
        }
 catch (        Throwable t) {
          if (destroyed.get()) {
            logger.trace("Scheduled BroadcasterLifeCyclePolicy exception",t);
          }
 else {
            logger.warn("Scheduled BroadcasterLifeCyclePolicy exception",t);
          }
        }
      }
      void destroy(      boolean resume){
        if (resume) {
          logger.info("All AtmosphereResource will now be resumed from Broadcaster {}",getID());
          resumeAll();
        }
        DefaultBroadcaster.this.destroy();
        if (ref.get() != null) {
          currentLifecycleTask.cancel(true);
        }
      }
    }
,time,time,lifeCyclePolicy.getTimeUnit());
    ref.set(currentLifecycleTask);
  }
}
