{
  if (destroyed.get()) {
    logger.debug(DESTROYED,getID(),"delayBroadcast(final T o, long delay, TimeUnit t)");
    return null;
  }
  start();
  final Object msg=filter(o);
  if (msg == null)   return null;
  final BroadcasterFuture<Object> future=new BroadcasterFuture<Object>(msg,broadcasterListeners,this);
  final Entry e=new Entry(msg,null,future,o);
  Future<Object> f;
  if (delay > 0) {
    f=bc.getScheduledExecutorService().schedule(new Callable<Object>(){
      public Object call() throws Exception {
        delayedBroadcast.remove(e);
        if (Callable.class.isAssignableFrom(o.getClass())) {
          try {
            Object r=Callable.class.cast(o).call();
            final Object msg=filter(r);
            if (msg != null) {
              Entry entry=new Entry(msg,null,future,r);
              push(entry);
            }
            return msg;
          }
 catch (          Exception e1) {
            logger.error("",e);
          }
        }
        final Object msg=filter(o);
        final Entry e=new Entry(msg,null,future,o);
        push(e);
        return msg;
      }
    }
,delay,t);
    e.future=new BroadcasterFuture<Object>(f,msg,broadcasterListeners,this);
  }
  delayedBroadcast.offer(e);
  return future;
}
