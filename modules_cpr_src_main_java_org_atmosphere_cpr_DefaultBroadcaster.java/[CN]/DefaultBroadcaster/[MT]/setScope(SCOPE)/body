{
  if (destroyed.get()) {
    logger.debug(DESTROYED,getID(),"setScope");
    return;
  }
  this.scope=scope;
  if (scope != SCOPE.REQUEST) {
    return;
  }
  logger.debug("Changing broadcaster scope for {}. This broadcaster will be destroyed.",getID());
synchronized (resources) {
    try {
      for (      AtmosphereResource resource : resources) {
        Broadcaster b=config.getBroadcasterFactory().get(getClass(),getClass().getSimpleName() + "/" + config.uuidProvider().generateUuid());
        if (DefaultBroadcaster.class.isAssignableFrom(this.getClass())) {
          BroadcasterCache cache=config.framework().newClassInstance(BroadcasterCache.class,bc.getBroadcasterCache().getClass());
          cache.configure(config);
          b.getBroadcasterConfig().setBroadcasterCache(cache);
        }
        resource.setBroadcaster(b);
        b.setScope(SCOPE.REQUEST);
        if (resource.getAtmosphereResourceEvent().isSuspended()) {
          b.addAtmosphereResource(resource);
        }
        logger.debug("Resource {} not using broadcaster {}",resource,b.getID());
      }
      if (resources.isEmpty()) {
        return;
      }
      destroy();
    }
 catch (    Exception e) {
      logger.error("Failed to set request scope for current resources",e);
    }
  }
}
