{
  try {
    if (destroyed.get()) {
      logger.debug(DESTROYED,getID(),"addAtmosphereResource(AtmosphereResource r");
      return this;
    }
    start();
    if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {
      throw new IllegalStateException("Broadcaster " + this + " cannot be used as its scope is set to REQUEST");
    }
    if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {
      if (policy == POLICY.FIFO) {
        AtmosphereResource resource=resources.poll();
        try {
          logger.warn("Too many resource. Forcing resume of {} ",resource.uuid());
          resource.resume();
        }
 catch (        Throwable t) {
          logger.warn("failed to resume resource {} ",resource,t);
        }
      }
 else       if (policy == POLICY.REJECT) {
        throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s",maxSuspendResource));
      }
    }
    if (resources.contains(r)) {
      logger.debug("Duplicate resource {}",r.uuid());
      return this;
    }
synchronized (concurrentSuspendBroadcast) {
      if (resources.isEmpty()) {
        config.getBroadcasterFactory().add(this,name);
      }
      checkCachedAndPush(r,r.getAtmosphereResourceEvent());
      if (isAtmosphereResourceValid(r)) {
        logger.trace("Associating AtmosphereResource {} with Broadcaster {}",r.uuid(),getID());
        resources.add(r);
      }
 else {
        logger.debug("Unable to add AtmosphereResource {}",r.uuid());
      }
    }
  }
  finally {
    if (resources.size() > 0) {
synchronized (awaitBarrier) {
        awaitBarrier.notifyAll();
      }
    }
  }
  return this;
}
