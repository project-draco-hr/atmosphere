{
  try {
    if (destroyed.get()) {
      logger.debug(DESTROYED,getID(),"addAtmosphereResource(AtmosphereResource r");
      return this;
    }
    start();
    if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {
      throw new IllegalStateException("Broadcaster " + this + " cannot be used as its scope is set to REQUEST");
    }
    if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {
      if (policy == POLICY.FIFO) {
        AtmosphereResource resource=resources.poll();
        try {
          logger.warn("Too many resource. Forcing resume of {} ",resource.uuid());
          resource.resume();
        }
 catch (        Throwable t) {
          logger.warn("failed to resume resource {} ",resource,t);
        }
      }
 else       if (policy == POLICY.REJECT) {
        throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s",maxSuspendResource));
      }
    }
    if (!r.isSuspended()) {
      logger.warn("AtmosphereResource {} is not suspended. If cached messages exists, this may cause unexpected situation. Suspend first",r.uuid());
    }
    if (!backwardCompatible && resources.contains(r)) {
      boolean duplicate=r.transport() != AtmosphereResource.TRANSPORT.WEBSOCKET || AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(INJECTED_ATMOSPHERE_RESOURCE) != null;
      if (duplicate) {
        AtmosphereResourceImpl dup=(AtmosphereResourceImpl)config.resourcesFactory().find(r.uuid());
        if (dup != null && dup != r) {
          if (!dup.isPendingClose()) {
            logger.warn("Duplicate resource {}. Could be caused by a dead connection not detected by your server. Replacing the old one with the fresh one",r.uuid());
          }
 else {
            logger.debug("Not yet closed resource still active {}",r.uuid());
          }
          AtmosphereResourceImpl.class.cast(dup).dirtyClose();
        }
 else {
          logger.debug("Duplicate resource {}",r.uuid());
          return this;
        }
      }
 else {
        logger.debug("Duplicate resource {}",r.uuid());
        return this;
      }
    }
    if (!bc.getBroadcasterCache().getClass().equals(BroadcasterCache.DEFAULT.getClass().getName())) {
synchronized (resources) {
        cacheAndSuspend(r);
      }
    }
 else {
      cacheAndSuspend(r);
    }
  }
  finally {
    if (!resources.isEmpty()) {
synchronized (awaitBarrier) {
        awaitBarrier.notifyAll();
      }
    }
  }
  return this;
}
