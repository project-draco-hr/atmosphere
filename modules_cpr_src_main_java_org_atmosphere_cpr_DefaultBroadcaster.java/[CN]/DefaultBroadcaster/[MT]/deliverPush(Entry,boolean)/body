{
  recentActivity.set(true);
  String prevMessage=entry.message.toString();
  if (rec && !delayedBroadcast.isEmpty()) {
    Iterator<Entry> i=delayedBroadcast.iterator();
    StringBuilder b=new StringBuilder();
    while (i.hasNext()) {
      Entry e=i.next();
      e.future.cancel(true);
      try {
        if (e.message instanceof String && entry.message instanceof String) {
          b.append(e.message);
        }
 else {
          deliverPush(e,false);
        }
      }
  finally {
        i.remove();
      }
    }
    if (b.length() > 0) {
      entry.message=b.append(entry.message).toString();
    }
  }
  Object finalMsg=callable(entry.message);
  if (finalMsg == null) {
    logger.error("Callable exception. Please catch all exceptions from your callable. Message {} will be lost and all AtmosphereResource " + "associated with this Broadcaster resumed.",entry.message);
    entryDone(entry.future);
switch (entry.type) {
case ALL:
synchronized (resources) {
        for (        AtmosphereResource r : resources) {
          if (r.transport().equals(AtmosphereResource.TRANSPORT.JSONP) || r.transport().equals(AtmosphereResource.TRANSPORT.LONG_POLLING))           try {
            r.resume();
          }
 catch (          Throwable t) {
            logger.trace("resumeAll",t);
          }
        }
      }
    break;
case RESOURCE:
  entry.resource.resume();
break;
case SET:
for (AtmosphereResource r : entry.resources) {
r.resume();
}
break;
}
return;
}
Object prevM=entry.originalMessage;
entry.originalMessage=(entry.originalMessage != entry.message ? callable(entry.originalMessage) : finalMsg);
if (entry.originalMessage == null) {
logger.trace("Broadcasted message was null {}",prevM);
entryDone(entry.future);
return;
}
entry.message=finalMsg;
AtmosphereResource cache=entry.type != Entry.TYPE.RESOURCE ? null : entry.resource;
entry.cache=bc.getBroadcasterCache().addToCache(getID(),cache,new BroadcastMessage(entry.originalMessage));
if (resources.isEmpty()) {
entryDone(entry.future);
return;
}
try {
if (logger.isTraceEnabled()) {
for (AtmosphereResource r : resources) {
logger.trace("AtmosphereResource {} available for {}",r.uuid(),entry.message);
}
}
boolean hasFilters=bc.hasPerRequestFilters();
Object beforeProcessingMessage=entry.message;
switch (entry.type) {
case ALL:
for (AtmosphereResource r : resources) {
entry.message=beforeProcessingMessage;
boolean deliverMessage=perRequestFilter(r,entry);
if (!deliverMessage || entry.message == null) {
logger.debug("Skipping broadcast delivery {} for resource {} ",entry.message,r.uuid());
bc.getBroadcasterCache().clearCache(getID(),r,entry.cache);
continue;
}
if (entry.writeLocally) {
queueWriteIO(r,hasFilters ? new Entry(r,entry) : entry);
}
}
break;
case RESOURCE:
boolean deliverMessage=perRequestFilter(entry.resource,entry);
if (!deliverMessage || entry.message == null) {
logger.debug("Skipping broadcast delivery {} for resource {} ",entry.message,entry.resource.uuid());
bc.getBroadcasterCache().clearCache(getID(),entry.resource,entry.cache);
return;
}
if (entry.writeLocally) {
queueWriteIO(entry.resource,entry);
}
break;
case SET:
for (AtmosphereResource r : entry.resources) {
entry.message=beforeProcessingMessage;
deliverMessage=perRequestFilter(r,entry);
if (!deliverMessage || entry.message == null) {
logger.debug("Skipping broadcast delivery {} for resource {} ",entry.message,r.uuid());
bc.getBroadcasterCache().clearCache(getID(),r,entry.cache);
continue;
}
if (entry.writeLocally) {
queueWriteIO(r,hasFilters ? new Entry(r,entry) : entry);
}
}
break;
}
entry.message=prevMessage;
}
 catch (InterruptedException ex) {
logger.debug(ex.getMessage(),ex);
}
}
