{
  this.name=name;
  this.uri=uri;
  this.config=config;
  bc=createBroadcasterConfig(config);
  String s=config.getInitParameter(ApplicationConfig.BROADCASTER_CACHE_STRATEGY);
  if (s != null) {
    logger.warn("{} is no longer supported. Use BroadcastInterceptor instead. By default the original message will be cached.",ApplicationConfig.BROADCASTER_CACHE_STRATEGY);
  }
  s=config.getInitParameter(OUT_OF_ORDER_BROADCAST);
  if (s != null) {
    outOfOrderBroadcastSupported.set(Boolean.valueOf(s));
  }
  s=config.getInitParameter(BROADCASTER_WAIT_TIME);
  if (s != null) {
    waitTime=Integer.valueOf(s);
  }
  s=config.getInitParameter(ApplicationConfig.WRITE_TIMEOUT);
  if (s != null) {
    writeTimeoutInSecond=Integer.valueOf(s);
  }
  noOpsResource=AtmosphereResourceFactory.getDefault().create(config,"-1");
  if (outOfOrderBroadcastSupported.get()) {
    logger.trace("{} supports Out Of Order Broadcast: {}",name,outOfOrderBroadcastSupported.get());
  }
  initialized.set(true);
  backwardCompatible=Boolean.parseBoolean(config.getInitParameter(ApplicationConfig.BACKWARD_COMPATIBLE_WEBSOCKET_BEHAVIOR));
  return this;
}
