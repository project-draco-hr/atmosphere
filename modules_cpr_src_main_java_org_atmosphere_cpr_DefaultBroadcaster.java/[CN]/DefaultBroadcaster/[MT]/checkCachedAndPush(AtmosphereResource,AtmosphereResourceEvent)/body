{
  boolean cache=retrieveTrackedBroadcast(r,e);
  if (!cache)   return cache;
  if (!((List)e.getMessage()).isEmpty()) {
    logger.debug("Sending cached message {} to {}",e.getMessage(),r.uuid());
    List<Object> cacheMessages=(List)e.getMessage();
    BroadcasterFuture<Object> f=new BroadcasterFuture<Object>(e.getMessage(),1,this);
    LinkedList<Object> filteredMessage=new LinkedList<Object>();
    Entry entry;
    Object newMessage;
    for (    Object o : cacheMessages) {
      newMessage=filter(o);
      if (newMessage == null) {
        continue;
      }
      entry=new Entry(newMessage,r,f,o);
      if (!perRequestFilter(r,entry)) {
        return false;
      }
      if (entry.message != null) {
        filteredMessage.addLast(newMessage);
      }
    }
    if (filteredMessage.size() == 0) {
      return false;
    }
    e.setMessage(filteredMessage);
    r.getRequest().setAttribute(CACHED,"true");
synchronized (r) {
      try {
        prepareInvokeOnStateChange(r,e);
      }
 catch (      Throwable t) {
        logger.error("Unable to write cached message {} for {}",e.getMessage(),r.uuid());
        logger.error("",t);
        for (        Object o : cacheMessages) {
          bc.getBroadcasterCache().addToCache(getID(),r,new BroadcastMessage(o));
        }
        return true;
      }
      for (      AtmosphereResourceEventListener l : AtmosphereResourceImpl.class.cast(r).atmosphereResourceEventListener()) {
        l.onBroadcast(e);
      }
switch (r.transport()) {
case JSONP:
case AJAX:
case LONG_POLLING:
        return true;
case SSE:
      break;
default :
    try {
      r.getResponse().flushBuffer();
    }
 catch (    IOException ioe) {
      logger.trace("",ioe);
      AtmosphereResourceImpl.class.cast(r)._destroy();
    }
  break;
}
}
}
return false;
}
