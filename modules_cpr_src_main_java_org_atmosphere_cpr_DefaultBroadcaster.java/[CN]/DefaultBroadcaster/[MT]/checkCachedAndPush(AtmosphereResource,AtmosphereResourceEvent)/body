{
  boolean cache=retrieveTrackedBroadcast(r,e);
  if (!cache)   return false;
  if (!((List)e.getMessage()).isEmpty()) {
    logger.debug("Sending cached message {} to {}",e.getMessage(),r.uuid());
    List<Object> cacheMessages=(List)e.getMessage();
    BroadcasterFuture<Object> f=new BroadcasterFuture<Object>(e.getMessage(),1);
    LinkedList<Object> filteredMessage=new LinkedList<Object>();
    LinkedList<Object> filteredMessageClone=null;
    Deliver deliver;
    Object newMessage;
    for (    Object o : cacheMessages) {
      newMessage=filter(o);
      if (newMessage == null) {
        continue;
      }
      deliver=new Deliver(newMessage,r,f,o);
      if (!perRequestFilter(r,deliver)) {
        continue;
      }
      if (deliver.message != null) {
        filteredMessage.addLast(deliver.message);
      }
    }
    if (filteredMessage.size() == 0) {
      return false;
    }
    e.setMessage(filteredMessage);
    final boolean willBeResumed=Utils.resumableTransport(r.transport());
    if (willBeResumed) {
      filteredMessageClone=(LinkedList<Object>)filteredMessage.clone();
    }
    List<AtmosphereResourceEventListener> listeners=willBeResumed ? new ArrayList() : EMPTY_LISTENERS;
    AtmosphereResourceImpl rImpl=AtmosphereResourceImpl.class.cast(r);
    if (willBeResumed && !rImpl.atmosphereResourceEventListener().isEmpty()) {
      listeners.addAll(rImpl.atmosphereResourceEventListener());
    }
synchronized (rImpl) {
      try {
        rImpl.getRequest().setAttribute(CACHED,"true");
        prepareInvokeOnStateChange(r,e);
      }
 catch (      Throwable t) {
        logger.error("Unable to write cached message {} for {}",e.getMessage(),r.uuid());
        logger.error("",t);
        for (        Object o : cacheMessages) {
          bc.getBroadcasterCache().addToCache(getID(),r != null ? r.uuid() : BroadcasterCache.NULL,new BroadcastMessage(o));
        }
        return true;
      }
      if (willBeResumed) {
        e.setMessage(filteredMessageClone);
      }
      for (      AtmosphereResourceEventListener l : willBeResumed ? listeners : rImpl.atmosphereResourceEventListener()) {
        l.onBroadcast(e);
      }
switch (r.transport()) {
case UNDEFINED:
case JSONP:
case AJAX:
case LONG_POLLING:
        return true;
case SSE:
      break;
default :
    try {
      r.getResponse().flushBuffer();
    }
 catch (    IOException ioe) {
      logger.trace("",ioe);
      AtmosphereResourceImpl.class.cast(r)._destroy();
    }
  break;
}
}
}
return false;
}
