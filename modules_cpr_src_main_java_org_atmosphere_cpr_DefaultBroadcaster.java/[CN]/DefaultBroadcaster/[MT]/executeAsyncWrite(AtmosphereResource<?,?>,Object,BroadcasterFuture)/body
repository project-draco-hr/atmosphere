{
  bc.getAsyncWriteService().execute(new Runnable(){
    @Override public void run(){
synchronized (resource) {
        if (resource.getAtmosphereResourceEvent().isCancelled()) {
          return;
        }
        final AtmosphereResourceEvent event=resource.getAtmosphereResourceEvent();
        event.setMessage(msg);
        if (resource.getAtmosphereResourceEvent() != null && !resource.getAtmosphereResourceEvent().isCancelled() && HttpServletRequest.class.isAssignableFrom(resource.getRequest().getClass())) {
          try {
            HttpServletRequest.class.cast(resource.getRequest()).setAttribute(CometSupport.MAX_INACTIVE,System.currentTimeMillis());
          }
 catch (          Exception t) {
            logger.warn("Preventing corruption of a recycled request: resource" + resource,event);
            resources.remove(resource);
            if (future != null) {
              future.cancel(true);
            }
            return;
          }
        }
        broadcast(resource,event);
        if (resource instanceof AtmosphereEventLifecycle) {
          ((AtmosphereEventLifecycle)resource).notifyListeners();
        }
        if (future != null) {
          future.done();
        }
      }
    }
  }
);
}
