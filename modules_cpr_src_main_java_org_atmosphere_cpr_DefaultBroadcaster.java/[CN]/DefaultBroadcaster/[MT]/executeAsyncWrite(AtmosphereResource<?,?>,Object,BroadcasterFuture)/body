{
  boolean notifyListeners=true;
  try {
    final AtmosphereResourceEventImpl event=(AtmosphereResourceEventImpl)resource.getAtmosphereResourceEvent();
    boolean isVoid=event.isCancelled() || event.isResumedOnTimeout() || event.isResuming()|| !event.isSuspended();
    if (isVoid) {
      logger.debug("Resource {} has been already processed",event);
      notifyListeners=false;
      return;
    }
    event.setMessage(msg);
    try {
      if (resource.getAtmosphereResourceEvent() != null && resource.getAtmosphereResourceEvent().isSuspended()) {
        HttpServletRequest.class.cast(resource.getRequest()).setAttribute(MAX_INACTIVE,System.currentTimeMillis());
      }
 else {
        removeAtmosphereResource(resource);
        BroadcasterFactory.getDefault().removeAllAtmosphereResource(resource);
        return;
      }
    }
 catch (    Exception t) {
      logger.warn("executeAsyncWrite exception.",t);
      logger.debug("Preventing corruption of a recycled request: resource" + resource,event);
      removeAtmosphereResource(resource);
      BroadcasterFactory.getDefault().removeAllAtmosphereResource(resource);
      event.setCancelled(true);
      event.setThrowable(t);
      return;
    }
    broadcast(resource,event);
  }
  finally {
    if (notifyListeners && resource instanceof AtmosphereEventLifecycle) {
      ((AtmosphereEventLifecycle)resource).notifyListeners();
    }
    if (future != null) {
      future.done();
    }
  }
}
