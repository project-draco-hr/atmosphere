{
  final AtmosphereRequest request=r.getRequest();
  final AtmosphereResponse response=r.getResponse();
  String uri=request.getRequestURI() == null ? "" : request.getRequestURI();
  if (r.transport().equals(AtmosphereResource.TRANSPORT.JSONP) || uri.indexOf("jsonp") != -1) {
    super.inspect(r);
    AsyncIOWriter writer=response.getAsyncIOWriter();
    if (AtmosphereInterceptorWriter.class.isAssignableFrom(writer.getClass())) {
      AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptorAdapter(){
        String callbackName(){
          String callback=request.getParameter(HeaderConfig.JSONP_CALLBACK_NAME);
          if (callback == null) {
            String jsonp=(String)config.properties().get(HeaderConfig.JSONP_CALLBACK_NAME);
            if (jsonp != null) {
              callback=request.getParameter(jsonp);
            }
          }
          return callback;
        }
        @Override public void prePayload(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
          String callbackName=callbackName();
          response.write(callbackName + START_CHUNK);
        }
        @Override public byte[] transformPayload(        AtmosphereResponse response,        byte[] responseDraft,        byte[] data) throws IOException {
          String charEncoding=response.getCharacterEncoding() == null ? "UTF-8" : response.getCharacterEncoding();
          return escapeForJavaScript(new String(responseDraft,charEncoding)).getBytes(charEncoding);
        }
        @Override public void postPayload(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
          response.write(END_CHUNK,true);
        }
      }
);
    }
 else {
      logger.warn("Unable to apply {}. Your AsyncIOWriter must implement {}",getClass().getName(),AtmosphereInterceptorWriter.class.getName());
    }
  }
  return Action.CONTINUE;
}
