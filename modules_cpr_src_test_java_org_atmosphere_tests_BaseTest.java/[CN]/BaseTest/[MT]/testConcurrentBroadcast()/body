{
  logger.info("{}: running test: testConcurrentBroadcast",getClass().getSimpleName());
  final AtomicInteger broadcastCount=new AtomicInteger(0);
  final AtomicReference<Response> response=new AtomicReference<Response>();
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch suspendedLatch=new CountDownLatch(1);
  atmoServlet.addAtmosphereHandler(ROOT,new AbstractHttpAtmosphereHandler(){
    public void onRequest(    AtmosphereResource<HttpServletRequest,HttpServletResponse> event) throws IOException {
      if (event.getRequest().getHeader("yo") != null) {
        try {
          event.suspend(-1,false);
          suspendedLatch.countDown();
        }
  finally {
        }
      }
 else {
        event.getBroadcaster().broadcast("Message-1 ");
        event.getBroadcaster().broadcast("Message-2 ");
        event.getBroadcaster().broadcast("Message-3 ");
        event.getBroadcaster().broadcast("Message-4");
        logger.info(event.getResponse().toString());
        event.getResponse().getOutputStream().write("OK".getBytes());
      }
    }
    public void onStateChange(    AtmosphereResourceEvent<HttpServletRequest,HttpServletResponse> event) throws IOException {
      if (event.isResuming()) {
        return;
      }
      PrintWriter writer=event.getResource().getResponse().getWriter();
      writer.write(event.getMessage().toString());
      writer.flush();
      try {
        broadcastCount.incrementAndGet();
      }
  finally {
        if (broadcastCount.get() == 4) {
          event.getResource().resume();
        }
      }
    }
  }
,BroadcasterFactory.getDefault().get(DefaultBroadcaster.class,"suspend"));
  AsyncHttpClient c=new AsyncHttpClient();
  try {
    c.prepareGet(urlTarget).addHeader("yo","yo").execute(new AsyncCompletionHandler<Object>(){
      @Override public Object onCompleted(      Response r) throws Exception {
        response.set(r);
        latch.countDown();
        return null;
      }
    }
);
    suspendedLatch.await(10,TimeUnit.SECONDS);
    c.prepareGet(urlTarget).execute();
    latch.await(10,TimeUnit.SECONDS);
    assertNotNull(response.get());
    assertEquals(response.get().getStatusCode(),200);
    assertEquals(response.get().getResponseBody(),"Message-1 Message-2 Message-3 Message-4");
  }
 catch (  Exception e) {
    logger.error("test failed",e);
    fail(e.getMessage());
  }
 finally {
    c.close();
  }
}
