{
  System.out.println("Running testDelayNextBroadcast");
  final CountDownLatch latch=new CountDownLatch(2);
  atmoServlet.addAtmosphereHandler(ROOT,new AtmosphereHandler<HttpServletRequest,HttpServletResponse>(){
    AtomicBoolean b=new AtomicBoolean(false);
    AtomicInteger count=new AtomicInteger(0);
    private long currentTime;
    public void onRequest(    AtmosphereResource<HttpServletRequest,HttpServletResponse> event) throws IOException {
      if (!b.getAndSet(true)) {
        event.suspend(-1,false);
      }
 else {
        currentTime=System.currentTimeMillis();
        if (count.getAndIncrement() < 4) {
          event.getBroadcaster().delayBroadcast("message-" + count.get() + " ");
        }
 else {
          event.getBroadcaster().broadcast("message-final");
        }
      }
    }
    public void onStateChange(    AtmosphereResourceEvent<HttpServletRequest,HttpServletResponse> event) throws IOException {
      if (event.isResuming()) {
        return;
      }
      try {
        event.getResource().getResponse().getWriter().write((String)event.getMessage());
        event.getResource().getResponse().flushBuffer();
        event.getResource().resume();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
 finally {
        latch.countDown();
      }
    }
  }
,new RecyclableBroadcaster("suspend"));
  AsyncHttpClient c=new AsyncHttpClient();
  try {
    Future<Response> f=c.prepareGet(urlTarget).execute();
    latch.await(5,TimeUnit.SECONDS);
    c.prepareGet(urlTarget).execute().get();
    c.prepareGet(urlTarget).execute().get();
    c.prepareGet(urlTarget).execute().get();
    c.prepareGet(urlTarget).execute().get();
    c.prepareGet(urlTarget).execute().get();
    Response r=f.get(10,TimeUnit.SECONDS);
    assertNotNull(r);
    assertEquals(r.getResponseBody(),"message-0 message-1 message-2 message-3 message-final");
    assertEquals(r.getStatusCode(),200);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  c.close();
}
