{
  logger.info("{}: running test: testSuspendTimeout",getClass().getSimpleName());
  final CountDownLatch latch=new CountDownLatch(1);
  atmoServlet.addAtmosphereHandler(ROOT,new AtmosphereHandler<HttpServletRequest,HttpServletResponse>(){
    private long currentTime;
    public void onRequest(    AtmosphereResource<HttpServletRequest,HttpServletResponse> event) throws IOException {
      currentTime=System.currentTimeMillis();
      event.suspend(5000,false);
    }
    public void onStateChange(    AtmosphereResourceEvent<HttpServletRequest,HttpServletResponse> event) throws IOException {
      try {
        event.getResource().getResponse().getOutputStream().write("resume".getBytes());
        assertTrue(event.isResumedOnTimeout());
        long time=System.currentTimeMillis() - currentTime;
        if (time > 5000 && time < 15000) {
          assertTrue(true);
        }
 else {
          assertFalse(false);
        }
      }
  finally {
        latch.countDown();
      }
    }
  }
,new RecyclableBroadcaster("suspend"));
  AsyncHttpClient c=new AsyncHttpClient();
  try {
    Response r=c.prepareGet(urlTarget).execute().get();
    try {
      latch.await(20,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      fail(e.getMessage());
    }
    assertNotNull(r);
    assertEquals(r.getStatusCode(),200);
    String resume=r.getResponseBody();
    assertEquals(resume,"resume");
  }
 catch (  Exception e) {
    logger.error("test failed",e);
    fail(e.getMessage());
  }
  c.close();
}
