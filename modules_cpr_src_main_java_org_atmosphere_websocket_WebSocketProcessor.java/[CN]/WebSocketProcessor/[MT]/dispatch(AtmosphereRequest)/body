{
  if (!loggedMsg.getAndSet(true)) {
    logger.debug("Atmosphere detected WebSocket: {}",webSocket.getClass().getName());
  }
  AtmosphereResponse wsr=new AtmosphereResponse(webSocket,request,destroyable);
  request.headers(configureHeader(request)).setAttribute(WebSocket.WEBSOCKET_SUSPEND,true);
  AtmosphereResourceImpl r=new AtmosphereResourceImpl(framework.getAtmosphereConfig(),null,request,wsr,framework.getAsyncSupport(),null);
  request.setAttribute(FrameworkConfig.INJECTED_ATMOSPHERE_RESOURCE,r);
  webSocket.resource(r);
  webSocketProtocol.onOpen(webSocket);
  dispatch(request,wsr);
  request.removeAttribute(FrameworkConfig.INJECTED_ATMOSPHERE_RESOURCE);
  if (webSocket.resource() != null) {
    final AsynchronousProcessor.AsynchronousProcessorHook hook=new AsynchronousProcessor.AsynchronousProcessorHook((AtmosphereResourceImpl)webSocket.resource());
    request.setAttribute(ASYNCHRONOUS_HOOK,hook);
    final Action action=((AtmosphereResourceImpl)webSocket.resource()).action();
    if (action.timeout() != -1 && !framework.getAsyncSupport().getContainerName().contains("Netty")) {
      final AtomicReference<Future<?>> f=new AtomicReference();
      f.set(scheduler.scheduleAtFixedRate(new Runnable(){
        @Override public void run(){
          if (WebSocket.class.isAssignableFrom(webSocket.getClass()) && System.currentTimeMillis() - WebSocket.class.cast(webSocket).lastWriteTimeStampInMilliseconds() > action.timeout()) {
            hook.timedOut();
            f.get().cancel(true);
          }
        }
      }
,action.timeout(),action.timeout(),TimeUnit.MILLISECONDS));
    }
  }
 else {
    logger.warn("AtmosphereResource was null");
  }
}
