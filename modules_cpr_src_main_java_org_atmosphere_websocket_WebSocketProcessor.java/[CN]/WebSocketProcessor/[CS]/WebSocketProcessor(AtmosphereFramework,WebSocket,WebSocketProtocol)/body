{
  this.webSocket=webSocket;
  this.framework=framework;
  this.webSocketProtocol=webSocketProtocol;
  String s=framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.RECYCLE_ATMOSPHERE_REQUEST_RESPONSE);
  if (s != null && Boolean.valueOf(s)) {
    recycleAtmosphereRequestResponse=true;
  }
 else {
    recycleAtmosphereRequestResponse=false;
  }
  s=framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.WEBSOCKET_PROTOCOL_EXECUTION);
  if (s != null && Boolean.valueOf(s)) {
    executeAsync=true;
    asyncExecutor=Executors.newCachedThreadPool();
  }
 else {
    executeAsync=false;
    asyncExecutor=new ExecutorService(){
      @Override public void shutdown(){
      }
      @Override public List<Runnable> shutdownNow(){
        return null;
      }
      @Override public boolean isShutdown(){
        return false;
      }
      @Override public boolean isTerminated(){
        return false;
      }
      @Override public boolean awaitTermination(      long l,      TimeUnit timeUnit) throws InterruptedException {
        return false;
      }
      @Override public <T>Future<T> submit(      Callable<T> tCallable){
        try {
          tCallable.call();
        }
 catch (        Exception e) {
          logger.trace("",e);
        }
        return null;
      }
      @Override public <T>Future<T> submit(      Runnable runnable,      T t){
        runnable.run();
        return null;
      }
      @Override public Future<?> submit(      Runnable runnable){
        runnable.run();
        return null;
      }
      @Override public <T>List<Future<T>> invokeAll(      Collection<? extends Callable<T>> callables) throws InterruptedException {
        throw new UnsupportedOperationException();
      }
      @Override public <T>List<Future<T>> invokeAll(      Collection<? extends Callable<T>> callables,      long l,      TimeUnit timeUnit) throws InterruptedException {
        throw new UnsupportedOperationException();
      }
      @Override public <T>T invokeAny(      Collection<? extends Callable<T>> callables) throws InterruptedException, ExecutionException {
        throw new UnsupportedOperationException();
      }
      @Override public <T>T invokeAny(      Collection<? extends Callable<T>> callables,      long l,      TimeUnit timeUnit) throws InterruptedException, ExecutionException, TimeoutException {
        throw new UnsupportedOperationException();
      }
      @Override public void execute(      Runnable runnable){
        runnable.run();
      }
    }
;
  }
}
