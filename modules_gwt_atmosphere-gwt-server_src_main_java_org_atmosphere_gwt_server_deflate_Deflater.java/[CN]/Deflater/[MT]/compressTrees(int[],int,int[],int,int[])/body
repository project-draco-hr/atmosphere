{
  int inLen=tree1len + tree2len;
  int[] in=new int[inLen];
  System.arraycopy(tree1,0,in,0,tree1len);
  System.arraycopy(tree2,0,in,tree1len,tree2len);
  int ptr=0;
  int[] ct=new int[inLen];
  int ctPtr=0;
  while (ptr < inLen) {
    int v=in[ptr++];
    if (v == 0) {
      int r=1;
      while (r < 138 && ptr < inLen) {
        if (in[ptr] != 0)         break;
        r++;
        ptr++;
      }
switch (r) {
case 1:
        ct[ctPtr++]=0;
      freq[0]++;
    break;
case 2:
  ct[ctPtr++]=0;
ct[ctPtr++]=0;
freq[0]+=2;
break;
default :
if (r <= 10) {
ct[ctPtr++]=17 + ((r - 3) << 5);
freq[17]++;
}
 else {
ct[ctPtr++]=18 + ((r - 11) << 5);
freq[18]++;
}
break;
}
}
 else {
int r=0;
while (r < 6 && ptr < inLen) {
if (in[ptr] != v) break;
r++;
ptr++;
}
ct[ctPtr++]=v;
freq[v]++;
switch (r) {
case 0:
break;
case 1:
ct[ctPtr++]=v;
freq[v]++;
break;
case 2:
ct[ctPtr++]=v;
ct[ctPtr++]=v;
freq[v]+=2;
break;
default :
ct[ctPtr++]=16 + ((r - 3) << 5);
freq[16]++;
break;
}
}
}
int[] res=new int[ctPtr];
System.arraycopy(ct,0,res,0,ctPtr);
return res;
}
