{
  try {
    Class<?> aClass=annotatedClass;
    AtmosphereService a=aClass.getAnnotation(AtmosphereService.class);
    atmosphereConfig(a.atmosphereConfig(),framework);
    framework.setDefaultBroadcasterClassName(a.broadcaster().getName());
    filters(a.broadcastFilters(),framework);
    LinkedList<AtmosphereInterceptor> l=new LinkedList<AtmosphereInterceptor>();
    AtmosphereInterceptor aa=listeners(a.listeners(),framework);
    if (aa != null) {
      l.add(aa);
    }
    if (!a.servlet().isEmpty()) {
      final ReflectorServletProcessor r=new ReflectorServletProcessor();
      r.setServletClassName(a.servlet());
      String mapping=a.path();
      Class<?>[] interceptors=a.interceptors();
      for (      Class i : interceptors) {
        try {
          AtmosphereInterceptor ai=(AtmosphereInterceptor)i.newInstance();
          l.add(ai);
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
      if (!a.dispatch()) {
        AtmosphereHandler proxy=new AtmosphereServletProcessor(){
          private String method="GET";
          @Override public void onRequest(          AtmosphereResource resource) throws IOException {
            if (!resource.getRequest().getMethod().equalsIgnoreCase(method)) {
              r.onRequest(resource);
            }
          }
          @Override public void onStateChange(          AtmosphereResourceEvent event) throws IOException {
            r.onStateChange(event);
          }
          @Override public void destroy(){
            r.destroy();
          }
          @Override public void init(          ServletConfig sc) throws ServletException {
            String s=sc.getInitParameter(ATMOSPHERERESOURCE_INTERCEPTOR_METHOD);
            if (s != null) {
              method=s;
            }
            r.init(sc);
          }
        }
;
        framework.addAtmosphereHandler(mapping,proxy,l);
      }
 else {
        framework.addAtmosphereHandler(mapping,r,l);
      }
    }
 else {
      interceptors(a.interceptors(),framework);
    }
    framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
  }
 catch (  Throwable e) {
    logger.warn("",e);
  }
}
