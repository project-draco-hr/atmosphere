{
  framework.addAtmosphereHandler("/a",new AbstractReflectorAtmosphereHandler(){
    @Override public void onRequest(    AtmosphereResource resource) throws IOException {
    }
    @Override public void destroy(){
    }
  }
);
  final AtmosphereRequest parentRequest=new AtmosphereRequest.Builder().pathInfo("/a").queryString(HeaderConfig.WEBSOCKET_X_ATMOSPHERE_TRANSPORT).build();
  final CountDownLatch suspended=new CountDownLatch(1);
  framework.interceptor(new AtmosphereInterceptor(){
    @Override public void configure(    AtmosphereConfig config){
    }
    @Override public Action inspect(    AtmosphereResource r){
      try {
        r.getBroadcaster().addAtmosphereResource(r);
        return suspended.getCount() == 1 ? Action.SUSPEND : Action.CONTINUE;
      }
  finally {
        suspended.countDown();
      }
    }
    @Override public void postInspect(    AtmosphereResource r){
    }
  }
);
  new Thread(){
    public void run(){
      try {
        framework.doCometSupport(parentRequest,AtmosphereResponse.newInstance().request(parentRequest));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
catch (      ServletException e) {
        e.printStackTrace();
      }
    }
  }
.start();
  suspended.await();
  Map<String,Object> m=new HashMap<String,Object>();
  m.put(SUSPENDED_ATMOSPHERE_RESOURCE_UUID,parentRequest.resource().uuid());
  AtmosphereRequest request=new AtmosphereRequest.Builder().attributes(m).pathInfo("/a").queryString(HeaderConfig.WEBSOCKET_X_ATMOSPHERE_TRANSPORT).build();
  request.setAttribute(FrameworkConfig.WEBSOCKET_MESSAGE,"true");
  framework.doCometSupport(request,AtmosphereResponse.newInstance().request(request));
  AtmosphereResource r=parentRequest.resource();
  Broadcaster b=r.getBroadcaster();
  assertEquals(b.getAtmosphereResources().size(),1);
  AtmosphereResourceImpl.class.cast(r).cancel();
  assertEquals(b.getAtmosphereResources().size(),0);
}
