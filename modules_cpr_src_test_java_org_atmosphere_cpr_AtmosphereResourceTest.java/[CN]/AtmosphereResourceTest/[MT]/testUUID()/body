{
  framework.addAtmosphereHandler("/a",new AbstractReflectorAtmosphereHandler(){
    @Override public void onRequest(    AtmosphereResource resource) throws IOException {
    }
    @Override public void destroy(){
    }
  }
);
  AtmosphereRequest request=new AtmosphereRequest.Builder().pathInfo("/a").build();
  final AtomicReference<String> e=new AtomicReference<String>();
  final AtomicReference<String> e2=new AtomicReference<String>();
  framework.interceptor(new AtmosphereInterceptor(){
    @Override public void configure(    AtmosphereConfig config){
    }
    @Override public Action inspect(    AtmosphereResource r){
      e.set(r.uuid());
      e2.set(r.getResponse().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID));
      return Action.CANCELLED;
    }
    @Override public void postInspect(    AtmosphereResource r){
    }
  }
);
  framework.doCometSupport(request,AtmosphereResponse.newInstance());
  assertEquals(e.get(),e2.get());
}
