{
  List<String> packages=f.customAnnotationPackages();
  AnnotationDetector detector=new AnnotationDetector(atmosphereReporter);
  try {
    if (packages.size() > 0) {
      for (      String p : packages) {
        logger.trace("Package {} scanned for @AtmosphereAnnotation",p);
        detector.detect(p);
      }
    }
    String path=IOUtils.realPath(f.getServletContext(),f.getHandlersPath());
    if (path != null) {
      detector.detect(new File(path));
    }
    String pathLibs=IOUtils.realPath(f.getServletContext(),f.getLibPath());
    if (pathLibs != null) {
      File libFolder=new File(pathLibs);
      File jars[]=libFolder.listFiles(new FilenameFilter(){
        @Override public boolean accept(        File arg0,        String arg1){
          return arg1.endsWith(".jar");
        }
      }
);
      if (jars != null) {
        for (        File file : jars) {
          detector.detect(file);
        }
      }
    }
    if (!coreAnnotationsFound.get()) {
      fallbackToManualAnnotatedClasses(getClass(),f,handler);
    }
  }
 catch (  IOException e) {
    logger.warn("Unable to scan annotation",e);
  }
 finally {
    detector.destroy();
  }
}
