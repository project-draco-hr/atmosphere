{
  final ClassLoader cl=Thread.currentThread().getContextClassLoader();
  final AnnotationDetector.TypeReporter reporter=new AnnotationDetector.TypeReporter(){
    @SuppressWarnings("unchecked") @Override public Class<? extends Annotation>[] annotations(){
      return new Class[]{AtmosphereHandlerService.class,BroadcasterCacheService.class,BroadcasterFilterService.class,BroadcasterFactoryService.class,BroadcasterService.class,MeteorService.class,WebSocketHandlerService.class,WebSocketProtocolService.class,AtmosphereInterceptorService.class,BroadcasterListenerService.class,AsyncSupportService.class,AsyncSupportListenerService.class,WebSocketProcessorService.class,BroadcasterCacheInspectorService.class};
    }
    @Override public void reportTypeAnnotation(    Class<? extends Annotation> annotation,    String className){
      logger.info("Found Annotation in {} being scanned: {}",className,annotation);
      if (AtmosphereHandlerService.class.equals(annotation)) {
        try {
          AtmosphereHandler handler=(AtmosphereHandler)cl.loadClass(className).newInstance();
          AtmosphereHandlerService a=handler.getClass().getAnnotation(AtmosphereHandlerService.class);
          framework.setDefaultBroadcasterClassName(a.broadcaster().getName());
          Class<? extends BroadcastFilter>[] bf=a.broadcastFilters();
          for (          Class<? extends BroadcastFilter> b : bf) {
            framework.broadcasterFilters().add(b.getName());
          }
          for (          String s : a.properties()) {
            String[] nv=s.split("=");
            IntrospectionUtils.setProperty(handler,nv[0],nv[1]);
            IntrospectionUtils.addProperty(handler,nv[0],nv[1]);
          }
          for (          String s : a.atmosphereConfig()) {
            String[] nv=s.split("=");
            framework.addInitParameter(nv[0],nv[1]);
          }
          Class<?>[] interceptors=a.interceptors();
          List<AtmosphereInterceptor> l=new ArrayList<AtmosphereInterceptor>();
          for (          Class i : interceptors) {
            try {
              AtmosphereInterceptor ai=(AtmosphereInterceptor)i.newInstance();
              ai.configure(framework.getAtmosphereConfig());
              l.add(ai);
            }
 catch (            Throwable e) {
              logger.warn("",e);
            }
          }
          framework.addAtmosphereHandler(a.path(),handler,l);
          framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
          framework.sessionSupport(a.supportSession());
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
 else       if (BroadcasterCacheService.class.equals(annotation)) {
        framework.setBroadcasterCacheClassName(className);
      }
 else       if (BroadcasterCacheInspectorService.class.equals(annotation)) {
        try {
          framework.addBroadcasterCacheInjector((BroadcasterCacheInspector)cl.loadClass(className).newInstance());
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
 else       if (MeteorService.class.equals(annotation)) {
        try {
          ReflectorServletProcessor r=new ReflectorServletProcessor();
          r.setServletClassName(className);
          Class<Servlet> s=(Class<Servlet>)cl.loadClass(className);
          MeteorService m=s.getAnnotation(MeteorService.class);
          String mapping=m.path();
          framework.setDefaultBroadcasterClassName(m.broadcaster().getName());
          Class<? extends BroadcastFilter>[] bf=m.broadcastFilters();
          for (          Class<? extends BroadcastFilter> b : bf) {
            framework.broadcasterFilters().add(b.getName());
          }
          for (          String i : m.atmosphereConfig()) {
            String[] nv=i.split("=");
            framework.addInitParameter(nv[0],nv[1]);
          }
          Class<?>[] interceptors=m.interceptors();
          List<AtmosphereInterceptor> l=new ArrayList<AtmosphereInterceptor>();
          for (          Class i : interceptors) {
            try {
              AtmosphereInterceptor ai=(AtmosphereInterceptor)i.newInstance();
              ai.configure(framework.getAtmosphereConfig());
              l.add(ai);
            }
 catch (            Throwable e) {
              logger.warn("",e);
            }
          }
          framework.addAtmosphereHandler(mapping,r,l);
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
 else       if (BroadcasterFilterService.class.equals(annotation)) {
        framework.broadcasterFilters().add(className);
      }
 else       if (BroadcasterService.class.equals(annotation)) {
        framework.setDefaultBroadcasterClassName(className);
      }
 else       if (WebSocketHandlerService.class.equals(annotation)) {
        try {
          framework.initWebSocket();
          Class<WebSocketHandler> s=(Class<WebSocketHandler>)cl.loadClass(className);
          WebSocketHandlerService m=s.getAnnotation(WebSocketHandlerService.class);
          WebSocketProcessor p=WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework);
          p.registerWebSocketHandler(m.path(),s.newInstance());
          framework.setDefaultBroadcasterClassName(m.broadcaster().getName());
          Class<? extends BroadcastFilter>[] bf=m.broadcastFilters();
          for (          Class<? extends BroadcastFilter> b : bf) {
            framework.broadcasterFilters().add(b.getName());
          }
          framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
 else       if (WebSocketProtocolService.class.equals(annotation)) {
        framework.setWebSocketProtocolClassName(className);
      }
 else       if (AtmosphereInterceptorService.class.equals(annotation)) {
        try {
          AtmosphereInterceptor a=(AtmosphereInterceptor)cl.loadClass(className).newInstance();
          a.configure(framework.getAtmosphereConfig());
          framework.interceptor(a);
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
 else       if (AsyncSupportService.class.equals(annotation)) {
        try {
          framework.setAsyncSupport(new DefaultAsyncSupportResolver(framework.config).newCometSupport(className));
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
 else       if (AsyncSupportListenerService.class.equals(annotation)) {
        try {
          framework.asyncSupportListener((AsyncSupportListener)cl.loadClass(className).newInstance());
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
 else       if (BroadcasterFactoryService.class.equals(annotation)) {
        try {
          Class<BroadcasterFactory> bf=(Class<BroadcasterFactory>)cl.loadClass(className);
          framework.setBroadcasterFactory(bf.newInstance());
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
 else       if (BroadcasterListenerService.class.equals(annotation)) {
        try {
          framework.addBroadcastListener((BroadcasterListener)cl.loadClass(className).newInstance());
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
 else       if (WebSocketProcessorService.class.equals(annotation)) {
        try {
          framework.setWebsocketProcessorClassName(className);
        }
 catch (        Throwable e) {
          logger.warn("",e);
        }
      }
    }
  }
;
  logger.trace("Scanning @Service annotations in {}",rootDir.getAbsolutePath());
  final AnnotationDetector cf=new AnnotationDetector(reporter);
  cf.detect(rootDir);
  return this;
}
