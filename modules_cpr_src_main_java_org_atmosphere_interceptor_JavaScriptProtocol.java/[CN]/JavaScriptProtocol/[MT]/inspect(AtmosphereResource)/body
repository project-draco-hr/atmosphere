{
  String uuid=r.getRequest().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
  String handshakeUUID=r.getRequest().getHeader(HeaderConfig.X_ATMO_PROTOCOL);
  if (uuid != null && uuid.equals("0") && handshakeUUID != null) {
    r.getRequest().header(HeaderConfig.X_ATMO_PROTOCOL,null);
    final StringBuffer message=new StringBuffer(r.uuid()).append(wsDelimiter).append(System.currentTimeMillis());
    boolean track=false;
    if (r.getBroadcaster().getBroadcasterConfig().hasFilters()) {
      for (      BroadcastFilter bf : r.getBroadcaster().getBroadcasterConfig().filters()) {
        if (TrackMessageSizeFilter.class.isAssignableFrom(bf.getClass())) {
          track=true;
          break;
        }
      }
    }
    final AtomicReference<String> protocolMessage=new AtomicReference<String>(message.toString());
    if (track) {
      protocolMessage.set((String)f.filter(r,protocolMessage.get(),protocolMessage.get()).message());
    }
    r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
      @Override public void onSuspend(      AtmosphereResourceEvent event){
        r.getResponse().write(protocolMessage.get());
switch (r.transport()) {
case JSONP:
case AJAX:
case LONG_POLLING:
          r.resume();
        break;
default :
      try {
        r.getResponse().flushBuffer();
      }
 catch (      IOException e) {
        logger.trace("",e);
      }
    break;
}
}
}
);
return Action.CONTINUE;
}
return Action.CONTINUE;
}
