{
  final AtmosphereResourceImpl r=AtmosphereResourceImpl.class.cast(ar);
  final AtmosphereRequest request=r.getRequest(false);
  final AtmosphereResponse response=r.getResponse(false);
  String uuid=request.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
  String handshakeUUID=request.getHeader(HeaderConfig.X_ATMO_PROTOCOL);
  if (uuid != null && uuid.equals("0") && handshakeUUID != null) {
    request.header(HeaderConfig.X_ATMO_PROTOCOL,null);
    final StringBuffer message=new StringBuffer(r.uuid()).append(wsDelimiter).append(System.currentTimeMillis()).append(wsDelimiter);
    final AtomicReference<String> protocolMessage=new AtomicReference<String>(message.toString());
    if (r.getBroadcaster().getBroadcasterConfig().hasFilters()) {
      for (      BroadcastFilter bf : r.getBroadcaster().getBroadcasterConfig().filters()) {
        if (TrackMessageSizeFilter.class.isAssignableFrom(bf.getClass())) {
          protocolMessage.set((String)f.filter(r,protocolMessage.get(),protocolMessage.get()).message());
          break;
        }
      }
    }
    if (!Utils.resumableTransport(r.transport())) {
      OnSuspend a=new OnSuspend(){
        @Override public void onSuspend(        AtmosphereResourceEvent event){
          response.write(protocolMessage.get());
          try {
            response.flushBuffer();
          }
 catch (          IOException e) {
            logger.trace("",e);
          }
        }
      }
;
      request.setAttribute(CALLBACK_JAVASCRIPT_PROTOCOL,a);
      r.addEventListener(a);
    }
 else {
      response.write(protocolMessage.get());
    }
    if (r.transport() == AtmosphereResource.TRANSPORT.WEBSOCKET || r.transport() == AtmosphereResource.TRANSPORT.STREAMING || r.transport() == AtmosphereResource.TRANSPORT.SSE) {
      return Action.CONTINUE;
    }
 else {
      return Action.CANCELLED;
    }
  }
  return Action.CONTINUE;
}
