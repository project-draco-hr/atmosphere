{
  if (Utils.webSocketMessage(ar))   return Action.CONTINUE;
  final AtmosphereResourceImpl r=AtmosphereResourceImpl.class.cast(ar);
  final AtmosphereRequest request=r.getRequest(false);
  final AtmosphereResponse response=r.getResponse(false);
  String uuid=request.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
  String handshakeUUID=request.getHeader(HeaderConfig.X_ATMO_PROTOCOL);
  if (uuid != null && uuid.equals("0") && handshakeUUID != null) {
    if (enforceAtmosphereVersion) {
      String javascriptVersion=request.getHeader(HeaderConfig.X_ATMOSPHERE_FRAMEWORK);
      int version=0;
      if (javascriptVersion != null) {
        version=parseVersion(javascriptVersion.split("-")[0]);
      }
      if (version < 221) {
        logger.error("Invalid Atmosphere Version {}",javascriptVersion);
        response.setStatus(501);
        response.addHeader(X_ATMOSPHERE_ERROR,"Atmosphere Protocol version not supported.");
        try {
          response.flushBuffer();
        }
 catch (        IOException e) {
        }
        return Action.CANCELLED;
      }
    }
    request.header(HeaderConfig.X_ATMO_PROTOCOL,null);
    int heartbeatInterval=0;
    String heartbeatData="";
    for (    final AtmosphereInterceptor interceptor : framework.interceptors()) {
      if (HeartbeatInterceptor.class.isAssignableFrom(interceptor.getClass())) {
        final HeartbeatInterceptor heartbeatInterceptor=HeartbeatInterceptor.class.cast(interceptor);
        heartbeatInterval=heartbeatInterceptor.clientHeartbeatFrequencyInSeconds() * 1000;
        heartbeatData=new String(heartbeatInterceptor.getPaddingBytes());
        break;
      }
    }
    final StringBuffer message=new StringBuffer(r.uuid()).append(wsDelimiter);
    if (enforceAtmosphereVersion) {
      message.append(heartbeatInterval).append(wsDelimiter).append(heartbeatData).append(wsDelimiter);
    }
    final AtomicReference<String> protocolMessage=new AtomicReference<String>(message.toString());
    if (r.getBroadcaster().getBroadcasterConfig().hasFilters()) {
      for (      BroadcastFilter bf : r.getBroadcaster().getBroadcasterConfig().filters()) {
        if (TrackMessageSizeFilter.class.isAssignableFrom(bf.getClass())) {
          protocolMessage.set((String)f.filter(r.getBroadcaster().getID(),r,protocolMessage.get(),protocolMessage.get()).message());
          break;
        }
      }
    }
    if (!Utils.resumableTransport(r.transport())) {
      OnSuspend a=new OnSuspend(){
        @Override public void onSuspend(        AtmosphereResourceEvent event){
          response.write(protocolMessage.get());
          try {
            response.flushBuffer();
          }
 catch (          IOException e) {
            logger.trace("",e);
          }
          r.removeEventListener(this);
        }
      }
;
      request.setAttribute(CALLBACK_JAVASCRIPT_PROTOCOL,a);
      r.addEventListener(a);
    }
 else {
      response.write(protocolMessage.get());
    }
    if (r.transport() == AtmosphereResource.TRANSPORT.WEBSOCKET || r.transport() == AtmosphereResource.TRANSPORT.STREAMING || r.transport() == AtmosphereResource.TRANSPORT.SSE) {
      return Action.CONTINUE;
    }
 else {
      return Action.CANCELLED;
    }
  }
  return Action.CONTINUE;
}
