{
  String uuid=r.getRequest().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
  String handshakeUUID=r.getRequest().getHeader(HeaderConfig.X_ATMO_PROTOCOL);
  if (uuid != null && uuid.equals("0") && handshakeUUID != null) {
    r.getRequest().header(HeaderConfig.X_ATMO_PROTOCOL,null);
    final StringBuffer message=new StringBuffer(r.uuid()).append(wsDelimiter).append(System.currentTimeMillis());
    boolean track=false;
    if (r.getBroadcaster().getBroadcasterConfig().hasFilters()) {
      for (      BroadcastFilter bf : r.getBroadcaster().getBroadcasterConfig().filters()) {
        if (TrackMessageSizeFilter.class.isAssignableFrom(bf.getClass())) {
          track=true;
          break;
        }
      }
    }
    final AtomicReference<String> protocolMessage=new AtomicReference<String>(message.toString());
    if (track) {
      protocolMessage.set((String)f.filter(r,protocolMessage.get(),protocolMessage.get()).message());
    }
    if (r.transport() == AtmosphereResource.TRANSPORT.STREAMING) {
      r.addEventListener(new AtmosphereResourceEventListenerAdapter(){
        @Override public void onSuspend(        AtmosphereResourceEvent event){
          r.getResponse().write(protocolMessage.get());
          try {
            r.getResponse().flushBuffer();
          }
 catch (          IOException e) {
            logger.trace("",e);
          }
        }
      }
);
    }
 else {
      r.getResponse().write(protocolMessage.get());
    }
    if (r.transport() == AtmosphereResource.TRANSPORT.WEBSOCKET || r.transport() == AtmosphereResource.TRANSPORT.STREAMING || r.transport() == AtmosphereResource.TRANSPORT.SSE) {
      return Action.CONTINUE;
    }
 else {
      return Action.CANCELLED;
    }
  }
  return Action.CONTINUE;
}
