{
  this.framework=framework;
  this.webSocketProtocol=framework.getWebSocketProtocol();
  String s=framework.getAtmosphereConfig().getInitParameter(RECYCLE_ATMOSPHERE_REQUEST_RESPONSE);
  if (s != null && Boolean.valueOf(s)) {
    destroyable=true;
  }
 else {
    destroyable=false;
  }
  s=framework.getAtmosphereConfig().getInitParameter(WEBSOCKET_PROTOCOL_EXECUTION);
  if (s != null && Boolean.valueOf(s)) {
    executeAsync=true;
  }
 else {
    executeAsync=false;
  }
  s=framework.getAtmosphereConfig().getInitParameter(IN_MEMORY_STREAMING_BUFFER_SIZE);
  if (s != null) {
    byteBufferMaxSize=Integer.valueOf(s);
    charBufferMaxSize=byteBufferMaxSize;
  }
  AtmosphereConfig config=framework.getAtmosphereConfig();
  if (executeAsync) {
    asyncExecutor=ExecutorsFactory.getAsyncOperationExecutor(config,"WebSocket");
  }
 else {
    asyncExecutor=VoidExecutorService.VOID;
  }
  scheduler=ExecutorsFactory.getScheduler(config);
  optimizeMapping();
  closingTime=Long.valueOf(config.getInitParameter(ApplicationConfig.CLOSED_ATMOSPHERE_THINK_TIME,"0"));
  invokeInterceptors=Boolean.valueOf(config.getInitParameter(INVOKE_ATMOSPHERE_INTERCEPTOR_ON_WEBSOCKET_MESSAGE,"true"));
  config.startupHook(new AtmosphereConfig.StartupHook(){
    @Override public void started(    final AtmosphereFramework framework){
      if (AsynchronousProcessor.class.isAssignableFrom(framework.getAsyncSupport().getClass())) {
        asynchronousProcessor=AsynchronousProcessor.class.cast(framework.getAsyncSupport());
      }
 else {
        asynchronousProcessor=new AsynchronousProcessor(framework.getAtmosphereConfig()){
          @Override public Action service(          AtmosphereRequest req,          AtmosphereResponse res) throws IOException, ServletException {
            return framework.getAsyncSupport().service(req,res);
          }
        }
;
      }
    }
  }
);
}
