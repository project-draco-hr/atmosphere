{
  if (webSocket.isOpen()) {
    logger.trace("Already closed {}",webSocket);
    return;
  }
  WebSocketHandler webSocketHandler=webSocket.webSocketHandler();
  final AtmosphereResourceImpl resource=(AtmosphereResourceImpl)webSocket.resource();
  if (resource == null) {
    logger.trace("Already closed {}",webSocket);
  }
 else {
    final boolean allowedToClose=allowedCloseCode(closeCode);
    final AtmosphereRequest r=resource.getRequest(false);
    final AtmosphereResponse s=resource.getResponse(false);
    boolean ff=r.getAttribute("firefox") != null;
    boolean completeLifecycle=true;
    try {
      webSocketProtocol.onClose(webSocket);
      if (webSocketHandler != null) {
        webSocketHandler.onClose(webSocket);
      }
      logger.trace("About to close AtmosphereResource for {} with code {}",resource,closeCode);
      if (!resource.getAtmosphereResourceEvent().isClosedByClient() && !resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()) {
        if (allowedToClose) {
          if (ff || closingTime > 0) {
            completeLifecycle=false;
            logger.debug("Delaying closing operation for firefox and resource {}",resource.uuid());
            ExecutorsFactory.getScheduler(framework.getAtmosphereConfig()).schedule(new Callable<Object>(){
              @Override public Object call() throws Exception {
                executeClose(webSocket,1005);
                finish(webSocket,resource,r,s,!allowedToClose);
                return null;
              }
            }
,ff ? (closingTime == 0 ? 1000 : closingTime) : closingTime,TimeUnit.MILLISECONDS);
          }
 else {
            executeClose(webSocket,closeCode);
          }
        }
 else {
          logger.debug("Timeout {}",resource.uuid());
          asynchronousProcessor.endRequest(AtmosphereResourceImpl.class.cast(webSocket.resource()),false);
        }
      }
 else {
        logger.debug("Unable to properly complete {}",resource == null ? "null" : resource.uuid());
        completeLifecycle=false;
      }
    }
  finally {
      if (completeLifecycle) {
        finish(webSocket,resource,r,s,!allowedToClose);
      }
    }
  }
}
