{
  logger.trace("WebSocket {} closed with {}",webSocket.resource(),closeCode);
  WebSocketHandler webSocketHandler=webSocket.webSocketHandler();
  AtmosphereResourceImpl resource=(AtmosphereResourceImpl)webSocket.resource();
  if (resource == null) {
    logger.debug("Already closed {}",webSocket);
  }
 else {
    logger.trace("About to close AtmosphereResource for {}",resource.uuid());
    AtmosphereRequest r=resource.getRequest(false);
    AtmosphereResponse s=resource.getResponse(false);
    try {
      webSocketProtocol.onClose(webSocket);
      if (webSocketHandler != null) {
        webSocketHandler.onClose(webSocket);
      }
      if (resource != null && resource.isInScope() && !resource.getAtmosphereResourceEvent().isClosedByApplication()) {
        Object o=r.getAttribute(ASYNCHRONOUS_HOOK);
        if (o != null && AsynchronousProcessorHook.class.isAssignableFrom(o.getClass())) {
          final AsynchronousProcessorHook h=(AsynchronousProcessorHook)o;
          if (!resource.isCancelled()) {
            if (closeCode == 1005 || closeCode == 1001 || closeCode == 1006) {
              boolean ff=r.getAttribute("firefox") != null;
              if (ff || closingTime > 0) {
                ExecutorsFactory.getScheduler(framework.getAtmosphereConfig()).schedule(new Callable<Object>(){
                  @Override public Object call() throws Exception {
                    executeClose(h,webSocket,1005);
                    return null;
                  }
                }
,ff ? closingTime == 0 ? 500 : closingTime : closingTime,TimeUnit.MILLISECONDS);
              }
 else {
                executeClose(h,webSocket,closeCode);
              }
            }
 else {
              h.timedOut();
            }
          }
        }
 else {
          logger.debug("ASYNCHRONOUS_HOOK not available for {}",resource.uuid());
        }
      }
 else {
        logger.debug("Unable to properly complete {}",resource == null ? "null" : resource.uuid());
      }
    }
  finally {
      if (webSocket != null) {
        try {
          r.setAttribute(WebSocket.CLEAN_CLOSE,Boolean.TRUE);
          webSocket.resource(null);
          if (webSocket.isOpen())           webSocket.close(s);
        }
 catch (        IOException e) {
          logger.trace("",e);
        }
      }
      if (r != null) {
        r.destroy(true);
      }
      if (s != null) {
        s.destroy(true);
      }
    }
  }
}
