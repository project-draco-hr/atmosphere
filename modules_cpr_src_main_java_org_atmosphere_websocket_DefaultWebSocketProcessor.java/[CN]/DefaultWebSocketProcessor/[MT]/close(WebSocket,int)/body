{
  WebSocketHandler webSocketHandler=webSocket.webSocketHandler();
  final AtmosphereResourceImpl resource=(AtmosphereResourceImpl)webSocket.resource();
  if (resource == null) {
    logger.trace("Already closed {}",webSocket);
  }
 else {
    logger.debug("About to close AtmosphereResource for {}",resource.uuid());
    final AtmosphereRequest r=resource.getRequest(false);
    final AtmosphereResponse s=resource.getResponse(false);
    boolean ff=r.getAttribute("firefox") != null;
    boolean completeLifecycle=true;
    try {
      webSocketProtocol.onClose(webSocket);
      if (webSocketHandler != null) {
        webSocketHandler.onClose(webSocket);
      }
      if (resource.getAtmosphereResourceEvent().isClosedByApplication()) {
        if (!resource.isCancelled()) {
          if (closeCode == 1005 || closeCode == 1001 || closeCode == 1006) {
            if (ff || closingTime > 0) {
              completeLifecycle=false;
              logger.debug("Delaying closing operation for firefox and resource {}",resource.uuid());
              ExecutorsFactory.getScheduler(framework.getAtmosphereConfig()).schedule(new Callable<Object>(){
                @Override public Object call() throws Exception {
                  executeClose(webSocket,1005);
                  finish(webSocket,resource,r,s);
                  return null;
                }
              }
,ff ? (closingTime == 0 ? 1000 : closingTime) : closingTime,TimeUnit.MILLISECONDS);
            }
 else {
              executeClose(webSocket,closeCode);
            }
          }
 else {
            logger.debug("Timeout",resource.uuid());
            asynchronousProcessor.endRequest(AtmosphereResourceImpl.class.cast(webSocket.resource()),false);
          }
        }
 else {
          logger.trace("Resource already cancelled {}",resource.uuid());
        }
      }
 else {
        logger.trace("Unable to properly complete {}",resource == null ? "null" : resource.uuid());
      }
    }
  finally {
      if (completeLifecycle) {
        finish(webSocket,resource,r,s);
      }
    }
  }
}
