{
  WebSocketHandlerProxy p=null;
  String path=w.path();
  if (wildcardMapping()) {
    String pathInfo=null;
    try {
      pathInfo=request.getPathInfo();
    }
 catch (    IllegalStateException ex) {
    }
    if (pathInfo != null) {
      path=request.getServletPath() + pathInfo;
    }
 else {
      path=request.getServletPath();
    }
    if (path == null || path.isEmpty()) {
      path="/";
    }
synchronized (handlers) {
      p=handlers.get(path);
      if (p == null) {
        WebSocketHandlerService a=w.proxied.getClass().getAnnotation(WebSocketHandlerService.class);
        if (a != null) {
          String targetPath=a.path();
          if (targetPath.indexOf("{") != -1 && targetPath.indexOf("}") != -1) {
            try {
              boolean singleton=w.proxied.getClass().getAnnotation(Singleton.class) != null;
              if (!singleton) {
                registerWebSocketHandler(path,new WebSocketHandlerProxy(a.broadcaster(),framework.newClassInstance(WebSocketHandler.class,w.proxied.getClass())));
              }
 else {
                registerWebSocketHandler(path,new WebSocketHandlerProxy(a.broadcaster(),w));
              }
              p=handlers.get(path);
            }
 catch (            Throwable e) {
              logger.warn("Unable to create WebSocketHandler",e);
            }
          }
        }
      }
    }
  }
  try {
    webSocket.resource().setBroadcaster(AnnotationUtil.broadcaster(framework,p != null ? p.broadcasterClazz : w.broadcasterClazz,path));
  }
 catch (  Exception e) {
    logger.error("",e);
  }
  return p != null ? p.proxied : w.proxied;
}
