{
  if (framework.isDestroyed())   return;
  if (framework.getAtmosphereConfig().handlers().size() == 0) {
synchronized (framework) {
      if (handlers.size() == 0) {
        logger.error("No AtmosphereHandler or WebSocketHandler installed.");
        throw new AtmosphereMappingException("No AtmosphereHandler maps request for " + request.getRequestURI());
      }
      framework.addAtmosphereHandler(ROOT_MASTER,REFLECTOR_ATMOSPHEREHANDLER);
    }
  }
  request.headers(configureHeader(request)).setAttribute(WebSocket.WEBSOCKET_SUSPEND,true);
  AtmosphereResource r=framework.atmosphereFactory().create(framework.getAtmosphereConfig(),response,framework.getAsyncSupport());
  boolean cleanUpAfterDisconnect=false;
  try {
    request.setAttribute(INJECTED_ATMOSPHERE_RESOURCE,r);
    request.setAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID,r.uuid());
    if (Utils.firefoxWebSocketEnabled(request)) {
      request.setAttribute("firefox","true");
    }
    AtmosphereResourceImpl.class.cast(r).webSocket(webSocket);
    webSocket.resource(r);
    webSocketProtocol.onOpen(webSocket);
    WebSocketHandler proxy=null;
    if (handlers.size() != 0) {
      WebSocketHandlerProxy handler=mapper.map(request,handlers);
      if (handler == null) {
        logger.debug("No WebSocketHandler maps request for {} with mapping {}",request.getRequestURI(),handlers);
        throw new AtmosphereMappingException("No AtmosphereHandler maps request for " + request.getRequestURI());
      }
      proxy=postProcessMapping(webSocket,request,handler);
    }
    dispatch(webSocket,request,response);
    if (proxy != null) {
      webSocket.webSocketHandler(proxy).resource().suspend(-1);
      proxy.onOpen(webSocket);
    }
    request.removeAttribute(INJECTED_ATMOSPHERE_RESOURCE);
    if (webSocket.resource() != null) {
      final Action action=((AtmosphereResourceImpl)webSocket.resource()).action();
      if (action.timeout() != -1 && !framework.getAsyncSupport().getContainerName().contains("Netty")) {
        final AtomicReference<Future<?>> f=new AtomicReference();
        f.set(scheduler.scheduleAtFixedRate(new Runnable(){
          @Override public void run(){
            if (WebSocket.class.isAssignableFrom(webSocket.getClass()) && System.currentTimeMillis() - WebSocket.class.cast(webSocket).lastWriteTimeStampInMilliseconds() > action.timeout()) {
              asynchronousProcessor.endRequest(((AtmosphereResourceImpl)webSocket.resource()),false);
              f.get().cancel(true);
            }
          }
        }
,action.timeout(),action.timeout(),TimeUnit.MILLISECONDS));
      }
    }
 else {
      logger.warn("AtmosphereResource was null");
      cleanUpAfterDisconnect=true;
    }
    notifyListener(webSocket,new WebSocketEventListener.WebSocketEvent("",CONNECT,webSocket));
  }
 catch (  AtmosphereMappingException ex) {
    cleanUpAfterDisconnect=true;
    throw ex;
  }
catch (  IOException ex) {
    cleanUpAfterDisconnect=true;
    throw ex;
  }
catch (  Exception ex) {
    logger.trace("onOpen exception",ex);
    cleanUpAfterDisconnect=true;
  }
 finally {
    if (cleanUpAfterDisconnect) {
      logger.warn("Problem opening websocket for {}",r.uuid());
      framework.atmosphereFactory().remove(r.uuid());
      AtmosphereResourceEventImpl.class.cast(r.getAtmosphereResourceEvent()).setCancelled(true);
      AsynchronousProcessor.class.cast(framework.getAsyncSupport()).completeLifecycle(r,true);
    }
    webSocket.shiftAttributes();
  }
}
