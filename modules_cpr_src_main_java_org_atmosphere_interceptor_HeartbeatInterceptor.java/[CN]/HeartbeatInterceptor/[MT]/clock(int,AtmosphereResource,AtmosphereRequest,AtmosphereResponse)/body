{
  try {
    request.setAttribute(HEARTBEAT_FUTURE,heartBeat.schedule(new Callable<Object>(){
      @Override public Object call() throws Exception {
synchronized (r) {
          if (AtmosphereResourceImpl.class.cast(r).isInScope() && r.isSuspended()) {
            try {
              logger.trace("Heartbeat for Resource {}",r);
              response.write(paddingBytes,false);
              if (Utils.resumableTransport(r.transport()) && resumeOnHeartbeat) {
                r.resume();
              }
 else {
                response.flushBuffer();
              }
            }
 catch (            Throwable t) {
              logger.trace("{}",r.uuid(),t);
              cancelF(request);
            }
          }
 else {
            cancelF(request);
          }
        }
        return null;
      }
    }
,interval,TimeUnit.SECONDS));
  }
 catch (  Throwable t) {
    logger.warn("",t);
  }
  return this;
}
