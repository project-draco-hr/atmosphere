{
  final AtmosphereResourceImpl impl=AtmosphereResourceImpl.class.cast(r);
  final AtmosphereRequest request=impl.getRequest(false);
  final AtmosphereResponse response=impl.getResponse(false);
  if (clientHeartbeatFrequencyInSeconds > 0) {
    byte[] body;
    try {
      body=IOUtils.readEntirelyAsByte(r);
    }
 catch (    IOException e) {
      logger.warn("",e);
      cancelF(request);
      return Action.CONTINUE;
    }
    if (Arrays.equals(paddingBytes,body)) {
      final AtmosphereResourceEvent event=new HeartbeatAtmosphereResourceEvent(AtmosphereResourceImpl.class.cast(r));
      if (AtmosphereResourceHeartbeatEventListener.class.isAssignableFrom(r.getAtmosphereHandler().getClass())) {
        r.addEventListener(new AtmosphereResourceEventListenerAdapter.OnHeartbeat(){
          @Override public void onHeartbeat(          AtmosphereResourceEvent event){
            AtmosphereResourceHeartbeatEventListener.class.cast(r.getAtmosphereHandler()).onHeartbeat(event);
          }
        }
);
      }
      r.notifyListeners(event);
      return Action.CANCELLED;
    }
    request.body(body);
  }
  if (Utils.webSocketMessage(r))   return Action.CONTINUE;
  final int interval=extractHeartbeatInterval(impl);
  if (interval != 0) {
    if (!Utils.pollableTransport(r.transport())) {
      super.inspect(r);
      final boolean wasSuspended=r.isSuspended();
      if (wasSuspended) {
        clock(interval,r,request,response);
      }
      r.addEventListener(new Clock(){
        @Override public void onSuspend(        AtmosphereResourceEvent event){
          if (!wasSuspended) {
            clock(interval,r,request,response);
          }
        }
        @Override public void onResume(        AtmosphereResourceEvent event){
          cancelF(request);
        }
        @Override public void onDisconnect(        AtmosphereResourceEvent event){
          cancelF(request);
        }
        @Override public void onClose(        AtmosphereResourceEvent event){
          cancelF(request);
        }
      }
);
    }
 else {
      return Action.CONTINUE;
    }
    final AsyncIOWriter writer=response.getAsyncIOWriter();
    if (!Utils.resumableTransport(r.transport()) && AtmosphereInterceptorWriter.class.isAssignableFrom(writer.getClass()) && request.getAttribute(INTERCEPTOR_ADDED) == null) {
      AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptorAdapter(){
        @Override public byte[] transformPayload(        AtmosphereResponse response,        byte[] responseDraft,        byte[] data) throws IOException {
          cancelF(request);
          return responseDraft;
        }
        @Override public void postPayload(        final AtmosphereResponse response,        byte[] data,        int offset,        int length){
          logger.trace("Scheduling heartbeat for {}",r.uuid());
          clock(interval,r,request,response);
        }
      }
);
      request.setAttribute(INTERCEPTOR_ADDED,Boolean.TRUE);
    }
  }
  return Action.CONTINUE;
}
