{
  final AtmosphereResponse response=r.getResponse();
  if (r.transport().equals(TRANSPORT.STREAMING) || r.transport().equals(TRANSPORT.SSE) || r.transport().equals(TRANSPORT.WEBSOCKET)) {
    super.inspect(r);
    AsyncIOWriter writer=response.getAsyncIOWriter();
    if (AtmosphereInterceptorWriter.class.isAssignableFrom(writer.getClass()) && r.getRequest().getAttribute(INTERCEPTOR_ADDED) == null) {
      AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptorAdapter(){
        Future<?> writeFuture;
        @Override public byte[] transformPayload(        AtmosphereResponse response,        byte[] responseDraft,        byte[] data) throws IOException {
          if (writeFuture != null) {
            writeFuture.cancel(true);
          }
          return responseDraft;
        }
        @Override public void postPayload(        final AtmosphereResponse response,        byte[] data,        int offset,        int length){
          if (writeFuture != null) {
            writeFuture.cancel(true);
          }
          Thread.dumpStack();
          logger.debug("Scheduling heartbeat for {}",r.uuid());
          writeFuture=heartBeat.schedule(new Callable<Object>(){
            @Override public Object call() throws Exception {
              logger.debug("Writing heartbeat for {}",r.uuid());
              response.write(paddingText,true);
              return null;
            }
          }
,heartbeatFrequencyInSeconds,TimeUnit.SECONDS);
        }
      }
);
      r.getRequest().setAttribute(INTERCEPTOR_ADDED,Boolean.TRUE);
    }
  }
  return Action.CONTINUE;
}
