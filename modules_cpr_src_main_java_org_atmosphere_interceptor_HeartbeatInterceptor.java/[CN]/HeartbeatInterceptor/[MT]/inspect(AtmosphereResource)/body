{
  if (Utils.webSocketMessage(r))   return Action.CONTINUE;
  final int interval=extractHeartbeatInterval(r);
  if (interval != 0) {
    final AtmosphereResponse response=r.getResponse();
    final AtmosphereRequest request=r.getRequest();
    if (!Utils.pollableTransport(r.transport())) {
      super.inspect(r);
      final boolean wasSuspended=r.isSuspended();
      if (wasSuspended) {
        clock(interval,r,request,response);
      }
      r.addEventListener(new Clock(){
        @Override public void onSuspend(        AtmosphereResourceEvent event){
          if (!wasSuspended) {
            clock(interval,r,request,response);
          }
        }
        @Override public void onResume(        AtmosphereResourceEvent event){
          cancelF(request);
        }
        @Override public void onDisconnect(        AtmosphereResourceEvent event){
          cancelF(request);
        }
        @Override public void onClose(        AtmosphereResourceEvent event){
          cancelF(request);
        }
      }
);
    }
 else {
      return Action.CONTINUE;
    }
    AsyncIOWriter writer=response.getAsyncIOWriter();
    if (!Utils.resumableTransport(r.transport()) && AtmosphereInterceptorWriter.class.isAssignableFrom(writer.getClass()) && r.getRequest().getAttribute(INTERCEPTOR_ADDED) == null) {
      AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptorAdapter(){
        @Override public byte[] transformPayload(        AtmosphereResponse response,        byte[] responseDraft,        byte[] data) throws IOException {
          cancelF(request);
          return responseDraft;
        }
        @Override public void postPayload(        final AtmosphereResponse response,        byte[] data,        int offset,        int length){
          logger.trace("Scheduling heartbeat for {}",r.uuid());
          clock(interval,r,request,response);
        }
      }
);
      r.getRequest().setAttribute(INTERCEPTOR_ADDED,Boolean.TRUE);
    }
 else {
      byte[] body=IOUtils.readEntirelyAsByte(r);
      if (Arrays.equals(paddingBytes,body)) {
        final AtmosphereResourceEvent event=new HeartbeatAtmosphereResourceEvent(AtmosphereResourceImpl.class.cast(r));
        if (r.getAtmosphereHandler().getClass().isAssignableFrom(ManagedAtmosphereHandler.class)) {
          r.addEventListener(new AtmosphereResourceEventListenerAdapter.OnHeartbeat(){
            @Override public void onHeartbeat(            AtmosphereResourceEvent event){
              ManagedAtmosphereHandler.class.cast(r.getAtmosphereHandler()).onHeartbeat(event);
            }
          }
);
        }
        r.notifyListeners(event);
        return Action.CANCELLED;
      }
      request.body(body);
    }
  }
  return Action.CONTINUE;
}
