{
  final AtmosphereResponse response=r.getResponse();
  final AtmosphereRequest request=r.getRequest();
  super.inspect(r);
  AsyncIOWriter writer=response.getAsyncIOWriter();
  if (AtmosphereInterceptorWriter.class.isAssignableFrom(writer.getClass()) && r.getRequest().getAttribute(INTERCEPTOR_ADDED) == null) {
    AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptorAdapter(){
      @Override public byte[] transformPayload(      AtmosphereResponse response,      byte[] responseDraft,      byte[] data) throws IOException {
        cancelF(request);
        return responseDraft;
      }
      @Override public void postPayload(      final AtmosphereResponse response,      byte[] data,      int offset,      int length){
        logger.trace("Scheduling heartbeat for {}",r.uuid());
        clock(r,request,response);
      }
    }
);
    r.getRequest().setAttribute(INTERCEPTOR_ADDED,Boolean.TRUE);
  }
  return Action.CONTINUE;
}
