{
  if (uri == null)   return;
  try {
    if (config != null) {
      if (config.getServletConfig().getInitParameter(XMPP_AUTH) != null) {
        authToken=config.getServletConfig().getInitParameter(XMPP_AUTH);
      }
 else {
        throw new IllegalStateException("No authorization token specified. Please make sure your web.xml contains:" + "\n        <init-param>\n" + "            <param-name>org.atmosphere.plugin.xmpp.XMPPBroadcaster.authorization</param-name>\n"+ "            <param-value>principal:password</param-value>\n"+ "        </init-param>");
      }
      if (config.getServletConfig().getInitParameter(XMPP_SERVER) != null) {
        uri=URI.create(config.getServletConfig().getInitParameter(XMPP_SERVER));
      }
      if (config.getServletConfig().getInitParameter(XMPP_DEBUG) != null) {
        XMPPConnection.DEBUG_ENABLED=true;
      }
    }
    ConnectionConfiguration config=null;
    int port=-1;
    try {
      port=uri.getPort();
    }
 catch (    Throwable t) {
      ;
    }
    if (port == -1) {
      config=new ConnectionConfiguration(uri.getHost());
    }
 else {
      config=new ConnectionConfiguration(uri.getHost(),port);
    }
    xmppConnection=new XMPPConnection(config);
    xmppConnection.connect();
    SASLAuthentication.supportSASLMechanism("PLAIN",0);
    String[] credentials=authToken.split(":");
    xmppConnection.login(credentials[0],credentials[1],getID());
    logger.info("Subscribing to: " + getID());
    channel=xmppConnection.getChatManager().createChat(getID(),new MessageListener(){
      public void processMessage(      Chat chat,      Message message){
        broadcastReceivedMessage(message.getBody());
      }
    }
);
    logger.info("Connected to: " + getID());
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
}
