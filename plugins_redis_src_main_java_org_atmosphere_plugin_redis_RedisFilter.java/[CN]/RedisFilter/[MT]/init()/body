{
  logger.log(Level.INFO,"Starting Atmosphere Redis Clustering support");
  final Broadcaster broadcaster=bc;
  listener.submit(new Runnable(){
    public void run(){
      jedisSubscriber.subscribe(new JedisPubSub(){
        public void onMessage(        String channel,        String message){
          receivedMessages.offer(message);
          broadcaster.broadcast(message);
        }
        public void onSubscribe(        String channel,        int subscribedChannels){
          if (logger.isLoggable(Level.FINE))           logger.fine("onSubscribe: " + channel);
        }
        public void onUnsubscribe(        String channel,        int subscribedChannels){
          if (logger.isLoggable(Level.FINE))           logger.fine("onUnsubscribe: " + channel);
        }
        public void onPSubscribe(        String pattern,        int subscribedChannels){
          if (logger.isLoggable(Level.FINE))           logger.fine("onPSubscribe: " + pattern);
        }
        public void onPUnsubscribe(        String pattern,        int subscribedChannels){
          if (logger.isLoggable(Level.FINE))           logger.fine("onPUnsubscribe: " + pattern);
        }
        public void onPMessage(        String pattern,        String channel,        String message){
          if (logger.isLoggable(Level.FINE))           logger.fine("onPMessage: " + pattern + " "+ channel+ " "+ message);
        }
      }
,bc.getID());
    }
  }
);
}
