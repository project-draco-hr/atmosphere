{
  logger.info("Starting Atmosphere Redis Clustering support");
  final Broadcaster broadcaster=bc;
  listener.submit(new Runnable(){
    public void run(){
      jedisSubscriber.subscribe(new JedisPubSub(){
        public void onMessage(        String channel,        String message){
          receivedMessages.offer(message);
          broadcaster.broadcast(message);
        }
        public void onSubscribe(        String channel,        int subscribedChannels){
          logger.debug("onSubscribe(): channel: {}",channel);
        }
        public void onUnsubscribe(        String channel,        int subscribedChannels){
          logger.debug("onUnsubscribe(): channel: {}",channel);
        }
        public void onPSubscribe(        String pattern,        int subscribedChannels){
          logger.debug("onPSubscribe(): pattern: {}",pattern);
        }
        public void onPUnsubscribe(        String pattern,        int subscribedChannels){
          logger.debug("onPUnsubscribe(): pattern: {}",pattern);
        }
        public void onPMessage(        String pattern,        String channel,        String message){
          logger.debug("onPMessage: pattern: {}, channel: {}, message: {}",new Object[]{pattern,channel,message});
        }
      }
,bc.getID());
    }
  }
);
}
