{
  final AtmosphereResponse response=r.getResponse();
  if (r.transport() != AtmosphereResource.TRANSPORT.WEBSOCKET) {
    super.inspect(r);
    AsyncIOWriter writer=response.getAsyncIOWriter();
    if (AtmosphereInterceptorWriter.class.isAssignableFrom(writer.getClass())) {
      AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptor(){
        @Override public void prePayload(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
        }
        @Override public byte[] transformPayload(        byte[] responseDraft,        byte[] data) throws IOException {
          return responseDraft;
        }
        @Override public void postPayload(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
          response.write(end);
        }
      }
);
    }
 else {
      throw new IllegalStateException("AsyncIOWriter must be an instance of " + AsyncIOWriter.class.getName());
    }
  }
 else {
    ((WebSocket)response.getAsyncIOWriter()).webSocketResponseFilter(new WebSocketResponseFilter(){
      @Override public String filter(      AtmosphereResponse r,      String message){
        return message + endString;
      }
      @Override public byte[] filter(      AtmosphereResponse r,      byte[] message){
        byte[] nb=new byte[message.length + end.length];
        System.arraycopy(message,0,nb,0,message.length);
        System.arraycopy(end,0,nb,message.length,nb.length);
        return nb;
      }
      @Override public byte[] filter(      AtmosphereResponse r,      byte[] message,      int offset,      int length){
        byte[] nb=new byte[length + end.length];
        System.arraycopy(message,offset,nb,0,length);
        System.arraycopy(end,0,nb,length,nb.length);
        return nb;
      }
    }
);
  }
  return Action.CONTINUE;
}
