{
  final AtmosphereResponse response=r.getResponse();
  if (r.transport() != AtmosphereResource.TRANSPORT.WEBSOCKET) {
    response.asyncIOWriter(new AsyncIOWriterAdapter(){
      @Override public AsyncIOWriter redirect(      String location) throws IOException {
        response.sendRedirect(location);
        return this;
      }
      @Override public AsyncIOWriter writeError(      int errorCode,      String message) throws IOException {
        response.sendError(errorCode);
        return this;
      }
      @Override public AsyncIOWriter write(      String data) throws IOException {
        response.write(data + "<||>");
        return this;
      }
      @Override public AsyncIOWriter write(      byte[] data) throws IOException {
        response.write(data).write(END);
        return this;
      }
      @Override public AsyncIOWriter write(      byte[] data,      int offset,      int length) throws IOException {
        response.write(data,offset,length).write(END);
        return this;
      }
      @Override public void close() throws IOException {
        response.closeStreamOrWriter();
      }
      @Override public AsyncIOWriter flush() throws IOException {
        response.flushBuffer();
        return this;
      }
    }
);
  }
 else {
    ((WebSocket)response.getAsyncIOWriter()).webSocketResponseFilter(new WebSocketResponseFilter(){
      @Override public String filter(      AtmosphereResponse r,      String message){
        return message + "<||>";
      }
      @Override public byte[] filter(      AtmosphereResponse r,      byte[] message){
        byte[] nb=new byte[message.length + END.length];
        System.arraycopy(message,0,nb,0,message.length);
        System.arraycopy(END,0,nb,message.length,nb.length);
        return nb;
      }
      @Override public byte[] filter(      AtmosphereResponse r,      byte[] message,      int offset,      int length){
        byte[] nb=new byte[length + END.length];
        System.arraycopy(message,offset,nb,0,length);
        System.arraycopy(END,0,nb,length,nb.length);
        return nb;
      }
    }
);
  }
  return Action.CONTINUE;
}
