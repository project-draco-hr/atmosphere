{
  LongPollScheduler scheduler=(LongPollScheduler)request.getAttribute(LongPollScheduler.ATTRIBUTE);
  if (scheduler == null) {
    boolean batch=false;
    ServerSessionImpl session=null;
    boolean connect=false;
    try {
      ServerMessage.Mutable[] messages=parseMessages(request);
      if (messages == null)       return;
      PrintWriter writer=null;
      for (      ServerMessage.Mutable message : messages) {
        connect=Channel.META_CONNECT.equals(message.getChannel());
        String client_id=message.getClientId();
        if (session == null || client_id != null && !client_id.equals(session.getId())) {
          session=(ServerSessionImpl)getBayeux().getSession(client_id);
          if (_autoBatch && !batch && session != null && !connect && !message.isMeta()) {
            batch=true;
            session.startBatch();
          }
        }
 else         if (!session.isHandshook()) {
          batch=false;
          session=null;
        }
        if (connect && session != null) {
          session.setScheduler(null);
        }
        boolean wasConnected=session != null && session.isConnected();
        ServerMessage.Mutable reply=bayeuxServerHandle(session,message);
        if (reply != null) {
          if (session == null) {
            session=(ServerSessionImpl)getBayeux().getSession(reply.getClientId());
            if (session != null) {
              String userAgent=request.getHeader("User-Agent");
              session.setUserAgent(userAgent);
              String browserId=findBrowserId(request);
              if (browserId == null)               setBrowserId(request,response);
            }
          }
 else {
            if (connect) {
              try {
                writer=sendQueue(request,response,session,writer);
                if (writer == null && reply.isSuccessful() && session.isQueueEmpty()) {
                  String browserId=findBrowserId(request);
                  boolean allowSuspendConnect;
                  if (browserId != null)                   allowSuspendConnect=incBrowserId(browserId);
 else                   allowSuspendConnect=_allowMultiSessionsNoBrowser;
                  if (allowSuspendConnect) {
                    long timeout=session.calculateTimeout(getTimeout());
                    if (timeout > 0 && wasConnected && session.isConnected()) {
                      Continuation continuation=ContinuationSupport.getContinuation(request);
                      continuation.setTimeout(timeout);
                      continuation.suspend(response);
                      scheduler=new LongPollScheduler(session,continuation,reply,browserId);
                      session.setScheduler(scheduler);
                      request.setAttribute(LongPollScheduler.ATTRIBUTE,scheduler);
                      reply=null;
                      metaConnectSuspended(request,session,timeout);
                    }
 else {
                      decBrowserId(browserId);
                    }
                  }
 else {
                    Map<String,Object> advice=reply.getAdvice(true);
                    if (browserId != null)                     advice.put("multiple-clients",true);
                    if (_multiSessionInterval > 0) {
                      advice.put(Message.RECONNECT_FIELD,Message.RECONNECT_RETRY_VALUE);
                      advice.put(Message.INTERVAL_FIELD,_multiSessionInterval);
                    }
 else {
                      advice.put(Message.RECONNECT_FIELD,Message.RECONNECT_NONE_VALUE);
                      reply.setSuccessful(false);
                    }
                    session.reAdvise();
                  }
                }
              }
  finally {
                if (reply != null && session.isConnected())                 session.startIntervalTimeout(getInterval());
              }
            }
 else {
              if (!isMetaConnectDeliveryOnly() && !session.isMetaConnectDeliveryOnly()) {
                writer=sendQueue(request,response,session,writer);
              }
            }
          }
          if (reply != null) {
            if (connect && session != null && !session.isConnected())             reply.getAdvice(true).put(Message.RECONNECT_FIELD,Message.RECONNECT_NONE_VALUE);
            reply=getBayeux().extendReply(session,session,reply);
            if (reply != null) {
              getBayeux().freeze(reply);
              writer=send(request,response,writer,reply);
            }
          }
        }
        message.setAssociated(null);
      }
      if (writer != null)       complete(writer);
    }
 catch (    ParseException x) {
      handleJSONParseException(request,response,x.getMessage(),x.getCause());
    }
 finally {
      if (batch) {
        boolean ended=session.endBatch();
        if (!ended && isAlwaysFlushingAfterHandle())         session.flush();
      }
 else       if (session != null && !connect && isAlwaysFlushingAfterHandle()) {
        session.flush();
      }
    }
  }
 else {
    ServerSessionImpl session=scheduler.getSession();
    metaConnectResumed(request,session);
    PrintWriter writer;
    try {
      writer=sendQueue(request,response,session,null);
    }
  finally {
      if (session.isConnected())       session.startIntervalTimeout(getInterval());
    }
    ServerMessage.Mutable reply=scheduler.getReply();
    if (!session.isConnected())     reply.getAdvice(true).put(Message.RECONNECT_FIELD,Message.RECONNECT_NONE_VALUE);
    reply=getBayeux().extendReply(session,session,reply);
    if (reply != null) {
      getBayeux().freeze(reply);
      writer=send(request,response,writer,reply);
    }
    complete(writer);
  }
}
