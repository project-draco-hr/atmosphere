{
  AtmosphereFramework f=new AtmosphereFramework();
  f.setBroadcasterFactory(new DefaultBroadcasterFactory(DefaultBroadcaster.class,"NEVER",f.getAtmosphereConfig()));
  assertNotNull(f.getBroadcasterFactory());
  broadcaster=f.getBroadcasterFactory().get(DefaultBroadcaster.class,"test");
  atmosphereHandler=new AR();
  final AtomicReference<byte[]> ref=new AtomicReference<byte[]>();
  AtmosphereResponse r=AtmosphereResponse.newInstance();
  r.asyncIOWriter(new AsyncIOWriterAdapter(){
    @Override public AsyncIOWriter write(    AtmosphereResponse r,    byte[] data) throws IOException {
      ref.set(data);
      return this;
    }
  }
);
  ar=new AtmosphereResourceImpl(f.getAtmosphereConfig(),broadcaster,mock(AtmosphereRequest.class),r,mock(BlockingIOCometSupport.class),atmosphereHandler);
  broadcaster.addAtmosphereResource(ar);
  List<byte[]> l=new ArrayList<byte[]>();
  l.add("yo".getBytes());
  broadcaster.broadcast(l).get();
  assertEquals("yo",new String(ref.get()));
}
