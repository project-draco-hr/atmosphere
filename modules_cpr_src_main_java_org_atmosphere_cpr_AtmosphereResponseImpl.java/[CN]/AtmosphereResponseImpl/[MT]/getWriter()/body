{
  if (forceAsyncIOWriter || !delegateToNativeResponse) {
    return new PrintWriter(getOutputStream()){
      @Override public void write(      char[] chars,      int offset,      int length){
        boolean b=forceAsyncIOWriter;
        try {
          validAsyncIOWriter();
          writeStatusAndHeaders();
          forceAsyncIOWriter=false;
          asyncIOWriter.write(AtmosphereResponseImpl.this,new String(chars,offset,length));
        }
 catch (        IOException e) {
          handleException(e);
          throw new RuntimeException(e);
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
      @Override public void write(      char[] chars){
        boolean b=forceAsyncIOWriter;
        try {
          validAsyncIOWriter();
          writeStatusAndHeaders();
          forceAsyncIOWriter=false;
          asyncIOWriter.write(AtmosphereResponseImpl.this,new String(chars));
        }
 catch (        IOException e) {
          handleException(e);
          throw new RuntimeException(e);
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
      @Override public void write(      String s,      int offset,      int length){
        boolean b=forceAsyncIOWriter;
        try {
          validAsyncIOWriter();
          writeStatusAndHeaders();
          forceAsyncIOWriter=false;
          asyncIOWriter.write(AtmosphereResponseImpl.this,new String(s.substring(offset,length)));
        }
 catch (        IOException e) {
          handleException(e);
          throw new RuntimeException(e);
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
      @Override public void write(      String s){
        boolean b=forceAsyncIOWriter;
        try {
          validAsyncIOWriter();
          writeStatusAndHeaders();
          forceAsyncIOWriter=false;
          asyncIOWriter.write(AtmosphereResponseImpl.this,s);
        }
 catch (        IOException e) {
          handleException(e);
          throw new RuntimeException(e);
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
      @Override public void flush(){
        if (!validFlushOrClose())         return;
        boolean b=forceAsyncIOWriter;
        try {
          writeStatusAndHeaders();
          forceAsyncIOWriter=false;
          asyncIOWriter.flush(AtmosphereResponseImpl.this);
        }
 catch (        IOException e) {
          handleException(e);
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
      @Override public void close(){
        if (!validFlushOrClose() || asyncIOWriter instanceof KeepOpenStreamAware)         return;
        boolean b=forceAsyncIOWriter;
        forceAsyncIOWriter=false;
        try {
          asyncIOWriter.close(AtmosphereResponseImpl.this);
        }
 catch (        IOException e) {
          handleException(e);
        }
 finally {
          forceAsyncIOWriter=b;
        }
      }
    }
;
  }
 else {
    return _r().getWriter() != null ? _r().getWriter() : new PrintWriter(new StringWriter());
  }
}
