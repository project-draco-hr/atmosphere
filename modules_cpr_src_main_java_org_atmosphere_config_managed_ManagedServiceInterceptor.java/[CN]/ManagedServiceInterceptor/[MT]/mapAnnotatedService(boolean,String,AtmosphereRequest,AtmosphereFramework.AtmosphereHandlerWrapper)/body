{
synchronized (config.handlers()) {
    if (config.handlers().get(path) == null) {
      if (AnnotatedProxy.class.isAssignableFrom(w.atmosphereHandler.getClass())) {
        AnnotatedProxy ap=AnnotatedProxy.class.cast(w.atmosphereHandler);
        ManagedService a=ap.target().getClass().getAnnotation(ManagedService.class);
        if (a != null) {
          String targetPath=a.path();
          if (targetPath.indexOf("{") != -1 && targetPath.indexOf("}") != -1) {
            try {
              boolean singleton=ap.target().getClass().getAnnotation(Singleton.class) != null;
              if (!singleton) {
                ManagedAtmosphereHandler h=config.framework().newClassInstance(ManagedAtmosphereHandler.class,ManagedAtmosphereHandler.class);
                final Object o=config.framework().newClassInstance(Object.class,ap.target().getClass());
                h.configure(config,o);
                logger.debug("Path: {}, targetPath: {}",path,targetPath);
                String[] inParts=path.split("/");
                String[] outParts=targetPath.split("/");
                Map<String,String> annotatedPathVars=new HashMap<String,String>();
                int len=Math.min(outParts.length,inParts.length);
                for (int i=0; i < len; i++) {
                  String s=outParts[i];
                  if (s.startsWith("{") && s.endsWith("}")) {
                    annotatedPathVars.put(s.substring(1,s.length() - 1),inParts[i]);
                    logger.debug("Putting PathVar pair: {} -> {}",s.substring(1,s.length() - 1),inParts[i]);
                  }
                }
                for (                Field field : o.getClass().getDeclaredFields()) {
                  if (field.isAnnotationPresent(PathVariable.class)) {
                    PathVariable annotation=field.getAnnotation(PathVariable.class);
                    String name=annotation.value();
                    if (name.isEmpty()) {
                      name=field.getName();
                    }
                    if (annotatedPathVars.containsKey(name)) {
                      try {
                        logger.debug("Annotating field {}",name);
                        field.setAccessible(true);
                        field.set(o,annotatedPathVars.get(name));
                      }
 catch (                      Exception e) {
                        logger.error("Error processing @PathVariable annotation",e);
                      }
                    }
 else {
                      logger.error("No path marker found for PathVariable {}, class {}",field.getName(),o.getClass());
                    }
                  }
                }
                config.framework().addAtmosphereHandler(path,h,config.getBroadcasterFactory().lookup(a.broadcaster(),path,true),w.interceptors);
              }
 else {
                config.framework().addAtmosphereHandler(path,w.atmosphereHandler,config.getBroadcasterFactory().lookup(a.broadcaster(),path,true),w.interceptors);
              }
              request.setAttribute(FrameworkConfig.NEW_MAPPING,"true");
            }
 catch (            Throwable e) {
              logger.warn("Unable to create AtmosphereHandler",e);
            }
          }
        }
      }
    }
 else     if (reMap) {
      request.setAttribute(FrameworkConfig.NEW_MAPPING,"true");
    }
  }
}
