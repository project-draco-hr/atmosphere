{
  logger.debug("Path: {}, targetPath: {}",path,targetPath);
  String[] inParts=path.split("/");
  String[] outParts=targetPath.split("/");
  Map<String,String> annotatedPathVars=new HashMap<String,String>();
  int len=Math.min(outParts.length,inParts.length);
  for (int i=0; i < len; i++) {
    String s=outParts[i];
    if (s.startsWith("{") && s.endsWith("}")) {
      annotatedPathVars.put(s.substring(1,s.length() - 1),inParts[i]);
      logger.debug("Putting PathVar pair: {} -> {}",s.substring(1,s.length() - 1),inParts[i]);
    }
  }
  for (  Field field : o.getClass().getDeclaredFields()) {
    if (field.isAnnotationPresent(PathParam.class)) {
      PathParam annotation=field.getAnnotation(PathParam.class);
      String name=annotation.value();
      if (name.isEmpty()) {
        name=field.getName();
      }
      if (annotatedPathVars.containsKey(name)) {
        try {
          logger.debug("Annotating field {}",name);
          field.setAccessible(true);
          field.set(o,annotatedPathVars.get(name));
        }
 catch (        Exception e) {
          logger.error("Error processing @PathVariable annotation",e);
        }
      }
 else {
        logger.error("No path marker found for PathVariable {}, class {}",field.getName(),o.getClass());
      }
    }
  }
}
