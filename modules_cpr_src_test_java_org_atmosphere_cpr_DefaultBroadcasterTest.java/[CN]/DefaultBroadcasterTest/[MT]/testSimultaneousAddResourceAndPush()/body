{
  final Map<String,BroadcastMessage> cache=new HashMap<String,BroadcastMessage>();
  broadcaster.getBroadcasterConfig().setBroadcasterCache(new AbstractBroadcasterCache(){
    @Override public CacheMessage addToCache(    String id,    String r,    BroadcastMessage e){
      CacheMessage c=put(e,System.nanoTime());
      cache.put(id,e);
      return c;
    }
    @Override public List<Object> retrieveFromCache(    String id,    AtmosphereResource r){
      ArrayList<Object> cacheContents=new ArrayList<Object>();
      if (!cache.isEmpty()) {
        cacheContents.add(cache.get(id).message);
        cache.clear();
      }
      return cacheContents;
    }
  }
);
  final AtmosphereResourceImpl ar=new AtmosphereResourceImpl(new AtmosphereFramework().getAtmosphereConfig(),broadcaster,mock(AtmosphereRequest.class),AtmosphereResponse.newInstance(),mock(BlockingIOCometSupport.class),new AR());
  final String message="foo";
  Runnable broadcastRunnable=new Runnable(){
    @Override public void run(){
      try {
        broadcaster.broadcast(message).get();
      }
 catch (      InterruptedException ex) {
        Logger.getLogger(DefaultBroadcasterTest.class.getName()).log(Level.SEVERE,null,ex);
      }
catch (      ExecutionException ex) {
        Logger.getLogger(DefaultBroadcasterTest.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
;
  Runnable pollRunnable=new Runnable(){
    @Override public void run(){
      broadcaster.addAtmosphereResource(ar);
    }
  }
;
  int remainingTest=10;
  ExecutorService newFixedThreadPool=Executors.newFixedThreadPool(2);
  while (remainingTest > 0) {
    remainingTest--;
    Future<?> pollFuture=newFixedThreadPool.submit(pollRunnable);
    Future<?> broadcastFuture=newFixedThreadPool.submit(broadcastRunnable);
    broadcastFuture.get();
    pollFuture.get();
    Object eventMessage=ar.getAtmosphereResourceEvent().getMessage();
    Object retrievedMessage;
    if (eventMessage instanceof List) {
      retrievedMessage=((List)eventMessage).get(0);
    }
 else {
      retrievedMessage=eventMessage;
    }
    broadcaster.removeAtmosphereResource(ar);
    cache.clear();
    assertEquals(retrievedMessage,message);
  }
}
