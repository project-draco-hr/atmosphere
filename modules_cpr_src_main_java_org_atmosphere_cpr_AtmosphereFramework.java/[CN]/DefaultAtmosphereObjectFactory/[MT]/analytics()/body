{
  if (!config.getInitParameter(ApplicationConfig.ANALYTICS,true))   return;
  final String container=getServletContext().getServerInfo();
  if (allowAllClassesScan) {
    Thread t=new Thread(){
      public void run(){
        try {
          logger.debug("Retrieving Atmosphere's latest version from http://async-io.org/version.html");
          HttpURLConnection urlConnection=(HttpURLConnection)URI.create("http://async-io.org/version.html").toURL().openConnection();
          urlConnection.setRequestProperty("User-Agent","Mozilla/5.0");
          urlConnection.setRequestProperty("Connection","keep-alive");
          urlConnection.setRequestProperty("Cache-Control","max-age=0");
          urlConnection.setRequestProperty("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
          urlConnection.setRequestProperty("Accept-Language","en-US,en;q=0.8");
          urlConnection.setRequestProperty("Accept-Charset","ISO-8859-1,utf-8;q=0.7,*;q=0.3");
          urlConnection.setRequestProperty("If-Modified-Since","ISO-8859-1,utf-8;q=0.7,*;q=0.3");
          urlConnection.setInstanceFollowRedirects(true);
          BufferedReader in=new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
          String inputLine;
          String newVersion=Version.getRawVersion();
          String clientVersion="2.2.11";
          String nextMajorRelease="2.4.0";
          boolean nextAvailable=false;
          try {
            while ((inputLine=in.readLine().trim()) != null) {
              if (inputLine.startsWith("ATMO23_VERSION=")) {
                newVersion=inputLine.substring("ATMO23_VERSION=".length());
              }
 else               if (inputLine.startsWith("CLIENT3_VERSION=")) {
                clientVersion=inputLine.substring("CLIENT3_VERSION=".length());
                break;
              }
 else               if (inputLine.startsWith("ATMO_RELEASE_VERSION=")) {
                nextMajorRelease=inputLine.substring("ATMO_RELEASE_VERSION=".length());
                if (nextMajorRelease.compareTo(Version.getRawVersion()) > 0 && nextMajorRelease.toLowerCase().indexOf("rc") == -1 && nextMajorRelease.toLowerCase().indexOf("beta") == -1) {
                  nextAvailable=true;
                }
              }
            }
          }
  finally {
            logger.info("Latest version of Atmosphere's JavaScript Client {}",clientVersion);
            if (newVersion.compareTo(Version.getRawVersion()) > 0) {
              String msg="\n\n\tAtmosphere Framework Updates:\n\tMinor Update available (bugs fixes): {}";
              if (nextAvailable) {
                msg="\n\n\tAtmosphere Framework Updates\n\tMinor available (bugs fixes): {}\n\tMajor available (new features): {}";
              }
              logger.info(msg,newVersion,nextMajorRelease);
            }
            try {
              in.close();
            }
 catch (            IOException ex) {
            }
            urlConnection.disconnect();
          }
          JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker(ModuleDetection.detect(),Version.getRawVersion(),"UA-31990725-1");
          tracker.trackSynchronously(new FocusPoint(container,new FocusPoint("Atmosphere")));
        }
 catch (        Throwable e) {
        }
      }
    }
;
    t.setDaemon(true);
    t.start();
  }
}
