{
  req.setAttribute(PROPERTY_USE_STREAM,useStreamForFlushingComments);
  req.setAttribute(BROADCASTER_CLASS,broadcasterClassName);
  req.setAttribute(ATMOSPHERE_CONFIG,config);
  req.setAttribute(THROW_EXCEPTION_ON_CLONED_REQUEST,"" + config.isThrowExceptionOnCloned());
  boolean skip=true;
  String s=config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST);
  if (s != null) {
    skip=Boolean.valueOf(s);
  }
  if (!skip || req.getAttribute(WEBSOCKET_SUSPEND) == null) {
    Map<String,String> headers=configureQueryStringAsRequest(req);
    String body=headers.remove(ATMOSPHERE_POST_BODY);
    if (body != null && body.isEmpty()) {
      body=null;
    }
    req.headers(headers).method(body != null && req.getMethod().equalsIgnoreCase("GET") ? "POST" : req.getMethod());
    if (body != null) {
      req.body(URLDecoder.decode(body,req.getCharacterEncoding() == null ? "UTF-8" : req.getCharacterEncoding()));
    }
  }
  s=req.getHeader(X_ATMOSPHERE_TRACKING_ID);
  if (s == null || s.equals("0")) {
    String unique=config.getInitParameter(ApplicationConfig.UNIQUE_UUID_WEBSOCKET);
    if (unique != null && Boolean.valueOf(unique)) {
      s=(String)req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);
    }
  }
  if (s == null || s.equals("0")) {
    s=UUID.randomUUID().toString();
    res.setHeader(HeaderConfig.X_FIRST_REQUEST,"true");
    res.setHeader(X_ATMOSPHERE_TRACKING_ID,s);
  }
 else {
    res.setHeader(HeaderConfig.X_FIRST_REQUEST,null);
    if (req.resource() == null) {
      res.setHeader(X_ATMOSPHERE_TRACKING_ID,s);
    }
 else     if (req.getAttribute(WebSocket.WEBSOCKET_INITIATED) == null) {
      res.setHeader(X_ATMOSPHERE_TRACKING_ID,s);
    }
  }
  if (req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID) == null) {
    req.setAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID,s);
  }
  return this;
}
