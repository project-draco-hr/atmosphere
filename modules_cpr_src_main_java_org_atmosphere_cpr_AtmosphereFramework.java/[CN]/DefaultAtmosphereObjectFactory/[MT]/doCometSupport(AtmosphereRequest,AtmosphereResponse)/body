{
  if (isDestroyed.get())   return Action.CANCELLED;
  Action a=null;
  try {
    configureRequestResponse(req,res);
    a=asyncSupport.service(req,res);
  }
 catch (  IllegalStateException ex) {
    boolean isJBoss=ex.getMessage().startsWith("JBoss failed");
    if (ex.getMessage() != null && (ex.getMessage().startsWith("Tomcat failed") || isJBoss)) {
      if (!isFilter) {
        logger.warn("Failed using comet support: {}, error: {} Is the NIO or APR Connector enabled?",asyncSupport.getClass().getName(),ex.getMessage());
      }
      logger.error("If you have more than one Connector enabled, make sure they both use the same protocol, " + "e.g NIO/APR or HTTP for all. If not, {} will be used and cannot be changed.",BlockingIOCometSupport.class.getName(),ex);
      AsyncSupport current=asyncSupport;
      asyncSupport=asyncSupport.supportWebSocket() && !isJBoss ? new Tomcat7BIOSupportWithWebSocket(config) : new BlockingIOCometSupport(config);
      if (current instanceof AsynchronousProcessor) {
        ((AsynchronousProcessor)current).shutdown();
      }
      asyncSupport.init(config.getServletConfig());
      logger.warn("Using " + asyncSupport.getClass().getName());
      a=asyncSupport.service(req,res);
    }
 else {
      logger.error("AtmosphereFramework exception",ex);
      throw ex;
    }
  }
 finally {
    if (a != null) {
      notify(a.type(),req,res);
    }
    if (!externalizeDestroy) {
      if (req != null && a != null && a.type() != Action.TYPE.SUSPEND) {
        req.destroy();
        res.destroy();
        notify(Action.TYPE.DESTROYED,req,res);
      }
    }
  }
  return a;
}
