{
  if (logger.isTraceEnabled()) {
    Enumeration<String> e=servletConfig.getInitParameterNames();
    logger.trace("Configured init-params");
    String n;
    while (e.hasMoreElements()) {
      n=e.nextElement();
      logger.trace("\t{} = {}",n,servletConfig.getInitParameter(n));
    }
  }
  logger.info("Using EndpointMapper {}",endpointMapper.getClass());
  for (  String i : broadcasterFilters) {
    logger.info("Using BroadcastFilter: {}",i);
  }
  if (broadcasterCacheClassName == null || DefaultBroadcasterCache.class.getName().equals(broadcasterCacheClassName)) {
    logger.warn("No BroadcasterCache configured. Broadcasted message between client reconnection will be LOST. " + "It is recommended to configure the {}",UUIDBroadcasterCache.class.getName());
  }
 else {
    logger.info("Using BroadcasterCache: {}",broadcasterCacheClassName);
  }
  String s=config.getInitParameter(BROADCASTER_WAIT_TIME);
  logger.info("Default Broadcaster Class: {}",broadcasterClassName);
  logger.info("Broadcaster Shared List Resources: {}",config.getInitParameter(BROADCASTER_SHAREABLE_LISTENERS,false));
  logger.info("Broadcaster Polling Wait Time {}",s == null ? DefaultBroadcaster.POLLING_DEFAULT : s);
  logger.info("Shared ExecutorService supported: {}",sharedThreadPools);
  BroadcasterConfig bc=broadcasterFactory.lookup(Broadcaster.ROOT_MASTER,true).getBroadcasterConfig();
  if (bc.getExecutorService() != null) {
    ExecutorService executorService=bc.getExecutorService();
    if (ThreadPoolExecutor.class.isAssignableFrom(executorService.getClass())) {
      long max=ThreadPoolExecutor.class.cast(executorService).getMaximumPoolSize();
      logger.info("Messaging Thread Pool Size: {}",ThreadPoolExecutor.class.cast(executorService).getMaximumPoolSize() == 2147483647 ? "Unlimited" : max);
    }
 else {
      logger.info("Messaging ExecutorService Pool Size unavailable - Not instance of ThreadPoolExecutor");
    }
  }
  if (bc.getAsyncWriteService() != null) {
    ExecutorService asyncWriteService=bc.getAsyncWriteService();
    if (ThreadPoolExecutor.class.isAssignableFrom(asyncWriteService.getClass())) {
      logger.info("Async I/O Thread Pool Size: {}",ThreadPoolExecutor.class.cast(asyncWriteService).getMaximumPoolSize());
    }
 else {
      logger.info("Async I/O ExecutorService Pool Size unavailable - Not instance of ThreadPoolExecutor");
    }
  }
  logger.info("Using BroadcasterFactory: {}",broadcasterFactory.getClass().getName());
  logger.info("Using AtmosphereResurceFactory: {}",arFactory.getClass().getName());
  logger.info("Using WebSocketProcessor: {}",webSocketProcessorClassName);
  if (defaultSerializerClassName != null && !defaultSerializerClassName.isEmpty()) {
    logger.info("Using Serializer: {}",defaultSerializerClassName);
  }
  WebSocketProcessor wp=WebSocketProcessorFactory.getDefault().getWebSocketProcessor(this);
  boolean b=false;
  if (DefaultWebSocketProcessor.class.isAssignableFrom(wp.getClass())) {
    b=DefaultWebSocketProcessor.class.cast(wp).invokeInterceptors();
  }
  logger.info("Invoke AtmosphereInterceptor on WebSocket message {}",b);
  logger.info("HttpSession supported: {}",config.isSupportSession());
  logger.info("Atmosphere is using {} for dependency injection and object creation",objectFactory);
  logger.info("Atmosphere is using async support: {} running under container: {}",getAsyncSupport().getClass().getName(),asyncSupport.getContainerName());
  logger.info("Atmosphere Framework {} started.",Version.getRawVersion());
  logger.info("\n\n\tFor Atmosphere Framework Commercial Support, visit \n\t{} " + "or send an email to {}\n","http://www.async-io.org/","support@async-io.org");
  if (logger.isTraceEnabled()) {
    for (    Entry<String,AtmosphereHandlerWrapper> e : atmosphereHandlers.entrySet()) {
      logger.trace("\nConfigured AtmosphereHandler {}\n",e.getKey());
      logger.trace("{}",e.getValue());
    }
  }
  Universe.broadcasterFactory(broadcasterFactory);
}
