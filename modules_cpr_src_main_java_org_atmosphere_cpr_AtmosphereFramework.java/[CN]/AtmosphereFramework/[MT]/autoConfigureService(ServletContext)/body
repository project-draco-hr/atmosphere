{
  String path=handlersPath != DEFAULT_HANDLER_PATH ? handlersPath : sc.getRealPath(handlersPath);
  try {
    annotationProcessor=(AnnotationProcessor)newClassInstance(getClass().getClassLoader().loadClass(annotationProcessorClassName));
    logger.info("Atmosphere is using {} for processing annotation",annotationProcessorClassName);
    annotationProcessor.configure(this);
    if (packages.size() > 0) {
      for (      String s : packages) {
        annotationProcessor.scan(s);
      }
    }
    if (!annotationFound) {
      if (path != null) {
        annotationProcessor.scan(new File(path));
      }
      String pathLibs=libPath != DEFAULT_LIB_PATH ? libPath : sc.getRealPath(DEFAULT_LIB_PATH);
      if (pathLibs != null) {
        File libFolder=new File(pathLibs);
        File jars[]=libFolder.listFiles(new FilenameFilter(){
          @Override public boolean accept(          File arg0,          String arg1){
            return arg1.endsWith(".jar");
          }
        }
);
        if (jars != null) {
          for (          File file : jars) {
            annotationProcessor.scan(file);
          }
        }
      }
    }
    if (!annotationFound && allowAllClassesScan) {
      logger.debug("Scanning all classes on the classpath");
      annotationProcessor.scanAll();
    }
  }
 catch (  Throwable e) {
    logger.error("",e);
    return;
  }
 finally {
    if (annotationProcessor != null) {
      annotationProcessor.destroy();
    }
  }
}
