{
  req.setAttribute(BROADCASTER_FACTORY,BroadcasterFactory.getDefault());
  req.setAttribute(PROPERTY_USE_STREAM,useStreamForFlushingComments);
  req.setAttribute(BROADCASTER_CLASS,broadcasterClassName);
  req.setAttribute(ATMOSPHERE_CONFIG,config);
  String s=req.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
  if (s == null || s.equals("0")) {
    res.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID,UUID.randomUUID().toString());
  }
  Action a=null;
  try {
    boolean skip=true;
    s=config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST);
    if (s != null) {
      skip=Boolean.valueOf(s);
    }
    if (!skip || req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {
      Map<String,String> headers=configureQueryStringAsRequest(req);
      String body=headers.remove(ATMOSPHERE_POST_BODY);
      if (body != null && body.isEmpty()) {
        body=null;
      }
      req.headers(headers).method(body != null && req.getMethod().equalsIgnoreCase("GET") ? "POST" : req.getMethod());
      if (body != null) {
        req.body(body);
      }
    }
    a=asyncSupport.service(req,res);
  }
 catch (  IllegalStateException ex) {
    if (ex.getMessage() != null && (ex.getMessage().startsWith("Tomcat failed") || ex.getMessage().startsWith("JBoss failed"))) {
      if (!isFilter) {
        logger.warn("Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?",asyncSupport.getClass().getName(),ex.getMessage());
      }
      logger.trace(ex.getMessage(),ex);
      asyncSupport=asyncSupport.supportWebSocket() ? new Tomcat7BIOSupportWithWebSocket(config) : new BlockingIOCometSupport(config);
      logger.warn("Using " + asyncSupport.getClass().getName());
      a=asyncSupport.service(req,res);
    }
 else {
      logger.error("AtmosphereFramework exception",ex);
      throw ex;
    }
  }
 finally {
    if (a != null) {
      notify(a.type(),req,res);
    }
    if (req != null && a != null && a.type() != Action.TYPE.SUSPEND) {
      req.destroy();
      res.destroy();
      notify(Action.TYPE.DESTROYED,req,res);
    }
  }
  return a;
}
