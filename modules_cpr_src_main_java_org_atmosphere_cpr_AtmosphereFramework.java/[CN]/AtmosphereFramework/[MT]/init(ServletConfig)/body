{
  try {
    ServletContextHolder.register(this);
    ServletConfig scFacade=new ServletConfig(){
      public String getServletName(){
        return sc.getServletName();
      }
      public ServletContext getServletContext(){
        return sc.getServletContext();
      }
      public String getInitParameter(      String name){
        String param=sc.getInitParameter(name);
        if (param == null) {
          return initParams.get(name);
        }
        return param;
      }
      public Enumeration<String> getInitParameterNames(){
        Enumeration en=sc.getInitParameterNames();
        while (en.hasMoreElements()) {
          String name=(String)en.nextElement();
          if (!initParams.containsKey(name)) {
            initParams.put(name,name);
          }
        }
        return Collections.enumeration(initParams.keySet());
      }
    }
;
    this.servletConfig=scFacade;
    doInitParams(scFacade);
    doInitParamsForWebSocket(scFacade);
    configureBroadcaster(sc.getServletContext());
    loadConfiguration(scFacade);
    autoDetectContainer();
    configureWebDotXmlAtmosphereHandler(sc);
    initWebSocketProtocol();
    cometSupport.init(scFacade);
    initAtmosphereHandler(scFacade);
    logger.info("Using broadcaster class: {}",broadcasterClassName);
    logger.info("Atmosphere Framework {} started.",Version.getRawVersion());
  }
 catch (  Throwable t) {
    logger.error("failed to initialize atmosphere framework",t);
    if (t instanceof ServletException) {
      throw (ServletException)t;
    }
    throw new ServletException(t.getCause());
  }
}
