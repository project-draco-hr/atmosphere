{
  Broadcaster two=ar.getAtmosphereConfig().getBroadcasterFactory().get(DefaultBroadcaster.class,"two");
  two.addAtmosphereResource(ar);
  ar.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE,ar);
  ar.getAtmosphereConfig().framework().setAsyncSupport(new AsynchronousProcessor(ar.getAtmosphereConfig()){
    @Override public Action service(    AtmosphereRequest req,    AtmosphereResponse res) throws IOException, ServletException {
      return Action.CONTINUE;
    }
  }
);
  AsynchronousProcessor.class.cast(ar.getAtmosphereConfig().framework().getAsyncSupport()).timedout(ar.getRequest(),ar.getResponse());
  assertEquals(broadcaster.getAtmosphereResources().size(),0);
  assertEquals(two.getAtmosphereResources().size(),0);
}
