{
synchronized (config.handlers()) {
    if (config.handlers().get(path) == null) {
      if (ReflectorServletProcessor.class.isAssignableFrom(w.atmosphereHandler.getClass())) {
        ReflectorServletProcessor r=ReflectorServletProcessor.class.cast(w.atmosphereHandler);
        Servlet s=r.getServlet();
        MeteorService m=s.getClass().getAnnotation(MeteorService.class);
        if (m != null) {
          String targetPath=m.path();
          if (targetPath.indexOf("{") != -1 && targetPath.indexOf("}") != -1) {
            try {
              boolean singleton=s.getClass().getAnnotation(Singleton.class) != null;
              if (!singleton) {
                r=config.framework().newClassInstance(ReflectorServletProcessor.class,ReflectorServletProcessor.class);
                r.setServlet(config.framework().newClassInstance(Servlet.class,s.getClass()));
                r.init(config);
              }
              request.localAttributes().put(Named.class.getName(),path.substring(targetPath.indexOf("{")));
              AtmosphereResourceImpl.class.cast(request.resource()).atmosphereHandler(r);
              config.framework().addAtmosphereHandler(path,r,config.getBroadcasterFactory().lookup(w.broadcaster.getClass(),path,true),w.interceptors);
              request.setAttribute(FrameworkConfig.NEW_MAPPING,"true");
            }
 catch (            Throwable e) {
              logger.warn("Unable to create AtmosphereHandler",e);
            }
          }
        }
      }
    }
 else     if (reMap) {
      request.setAttribute(FrameworkConfig.NEW_MAPPING,"true");
    }
  }
}
