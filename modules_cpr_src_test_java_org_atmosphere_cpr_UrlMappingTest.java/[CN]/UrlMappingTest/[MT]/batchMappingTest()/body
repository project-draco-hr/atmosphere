{
  framework.addAtmosphereHandler("/",new AH("/"));
  framework.addAtmosphereHandler("/red",new AH("red"));
  framework.addAtmosphereHandler("/red/*",new AH("red"));
  framework.addAtmosphereHandler("/red/red/*",new AH("redred"));
  framework.addAtmosphereHandler("/red/blue/*",new AH("redblue"));
  framework.addAtmosphereHandler("/blue/*",new AH("blue"));
  framework.addAtmosphereHandler("/blue/blue/*",new AH("blueblue"));
  AtmosphereRequest r=new AtmosphereRequestImpl.Builder().pathInfo("/").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"/");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/red").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"red");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/red/1").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"red");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/red/red").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"red");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/red/red/1").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"redred");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/red/blue/").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"redblue");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/red/blue/1").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"redblue");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/blue").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"/");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/blue/blue").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"blue");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/blue/blue/white").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"blueblue");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/green").build();
  assertEquals(processor.map(r).atmosphereHandler.toString(),"/");
  framework.removeAtmosphereHandler("/");
  r=new AtmosphereRequestImpl.Builder().pathInfo("/green").build();
  try {
    processor.map(r);
    fail();
  }
 catch (  AtmosphereMappingException e) {
    assertNotNull(e);
  }
}
