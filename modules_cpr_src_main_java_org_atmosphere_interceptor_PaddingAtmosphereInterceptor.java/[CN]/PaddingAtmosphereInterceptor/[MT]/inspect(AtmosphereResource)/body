{
  if (Utils.webSocketMessage(r))   return Action.CONTINUE;
  final AtmosphereResponse response=r.getResponse();
  final AtmosphereRequest request=r.getRequest();
  String uuid=request.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
  boolean padding=r.transport().equals(TRANSPORT.STREAMING) || r.transport().equals(TRANSPORT.LONG_POLLING);
  if (uuid != null && !uuid.equals("0") && r.transport().equals(TRANSPORT.WEBSOCKET) && request.getAttribute(INJECTED_ATMOSPHERE_RESOURCE) != null) {
    padding=true;
  }
  if (padding) {
    r.addEventListener(new ForcePreSuspend(response));
    super.inspect(r);
    AsyncIOWriter writer=response.getAsyncIOWriter();
    if (AtmosphereInterceptorWriter.class.isAssignableFrom(writer.getClass())) {
      AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptorAdapter(){
        private void padding(){
          if (!r.isSuspended()) {
            writePadding(response);
            request.setAttribute("paddingWritten","true");
          }
        }
        @Override public void prePayload(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
          padding();
        }
        @Override public void postPayload(        AtmosphereResponse response,        byte[] data,        int offset,        int length){
        }
      }
);
    }
 else {
      logger.warn("Unable to apply {}. Your AsyncIOWriter must implement {}",getClass().getName(),AtmosphereInterceptorWriter.class.getName());
    }
  }
  return Action.CONTINUE;
}
